; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\spi.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\stm32LIB\inc -I..\stm32LIB\CMSIS\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\user\_Dsp\Include -I..\user\_Algorithms -I..\user\_Bsp -I..\user\_Device -I..\user\_Task -I..\system -I..\stm32LIB\CMSIS -I..\system -I..\FreeRTOS -I..\user -I.\RTE\_COD_Gimbal_Task -IC:\keil_v5_project\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM4 -D__FPU_PRESENT --omf_browse=.\objects\spi.crf ..\user\_Bsp\spi.c]
                          THUMB

                          AREA ||i.DMA2_Stream5_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream5_IRQHandler PROC
;;;130    
;;;131    void DMA2_Stream5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133        // DMA 发送完成
;;;134        if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))	
000002  4907              LDR      r1,|L1.32|
000004  4807              LDR      r0,|L1.36|
000006  f7fffffe          BL       DMA_GetITStatus
00000a  b140              CBZ      r0,|L1.30|
;;;135        {
;;;136            // 清除DMA发送完成标志
;;;137            DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);	
00000c  4904              LDR      r1,|L1.32|
00000e  4805              LDR      r0,|L1.36|
000010  f7fffffe          BL       DMA_ClearITPendingBit
;;;138            // 片选拉高，数据发送完毕	
;;;139            GPIO_SetBits(GPIOA, GPIO_Pin_15);	
000014  f44f4100          MOV      r1,#0x8000
000018  4803              LDR      r0,|L1.40|
00001a  f7fffffe          BL       GPIO_SetBits
                  |L1.30|
;;;140        }
;;;141    }
00001e  bd10              POP      {r4,pc}
;;;142    
                          ENDP

                  |L1.32|
                          DCD      0x20008800
                  |L1.36|
                          DCD      0x40026488
                  |L1.40|
                          DCD      0x40020000

                          AREA ||i.SPI1_DMA_init||, CODE, READONLY, ALIGN=2

                  SPI1_DMA_init PROC
;;;75     
;;;76     void SPI1_DMA_init(uint32_t tx_buf, uint32_t rx_buf, uint16_t num)
000000  b570              PUSH     {r4-r6,lr}
;;;77     {		
000002  b090              SUB      sp,sp,#0x40
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;78         DMA_InitTypeDef DMA_InitStructure;  		
;;;79     // DMA结构体
;;;80         /* 使能DMA时钟 */  		
;;;81         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);	
00000a  2101              MOVS     r1,#1
00000c  0588              LSLS     r0,r1,#22
00000e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;82     
;;;83     //RX
;;;84         DMA_DeInit(DMA2_Stream5);	/* 复位初始化DMA数据流 */							
000012  482e              LDR      r0,|L2.204|
000014  f7fffffe          BL       DMA_DeInit
;;;85         while (DMA_GetCmdStatus(DMA2_Stream5) != DISABLE);	/* 确保DMA数据流复位完成 */ 
000018  bf00              NOP      
                  |L2.26|
00001a  482c              LDR      r0,|L2.204|
00001c  f7fffffe          BL       DMA_GetCmdStatus
000020  2800              CMP      r0,#0
000022  d1fa              BNE      |L2.26|
;;;86         /* 配置 DMA Stream */
;;;87         DMA_InitStructure.DMA_Channel = DMA_Channel_3;/* 通道3，数据流5 */
000024  f04f60c0          MOV      r0,#0x6000000
000028  9001              STR      r0,[sp,#4]
;;;88         DMA_InitStructure.DMA_PeripheralBaseAddr = (SPI1_BASE+0x0C);/* 外设地址 */ 
00002a  4829              LDR      r0,|L2.208|
00002c  9002              STR      r0,[sp,#8]
;;;89         DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)tx_buf;	/* 内存地址(要传输的变量的指针) ,DMA存储器0地址*/  		
00002e  9503              STR      r5,[sp,#0xc]
;;;90         DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral; /* 方向：存储器到外设 */   
000030  2040              MOVS     r0,#0x40
000032  9004              STR      r0,[sp,#0x10]
;;;91         DMA_InitStructure.DMA_BufferSize = (uint32_t)num;	/* 数据传输量 ,可设置为0， 实际发送时会重新设置*/	 	
000034  9405              STR      r4,[sp,#0x14]
;;;92         DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; /* 外设非增量模式 */
000036  2000              MOVS     r0,#0
000038  9006              STR      r0,[sp,#0x18]
;;;93         DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;/* 存储器增量模式 */  	
00003a  f44f6080          MOV      r0,#0x400
00003e  9007              STR      r0,[sp,#0x1c]
;;;94         DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;/* 外设数据长度:8位 */	 
000040  2000              MOVS     r0,#0
000042  9008              STR      r0,[sp,#0x20]
;;;95         DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;/* 内存数据长度:8位 */
000044  9009              STR      r0,[sp,#0x24]
;;;96         DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;/* DMA模式：正常模式 */  
000046  900a              STR      r0,[sp,#0x28]
;;;97         DMA_InitStructure.DMA_Priority = DMA_Priority_High;/* 优先级：高 */
000048  f44f3000          MOV      r0,#0x20000
00004c  900b              STR      r0,[sp,#0x2c]
;;;98         DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;     /* 禁用FIFO */   		
00004e  2000              MOVS     r0,#0
000050  900c              STR      r0,[sp,#0x30]
;;;99         DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;   
000052  900d              STR      r0,[sp,#0x34]
;;;100        DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single; /* 外设突发单次传输 */  	
000054  900e              STR      r0,[sp,#0x38]
;;;101        DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single; /* 存储器突发单次传输 */  
000056  900f              STR      r0,[sp,#0x3c]
;;;102        	
;;;103        DMA_Init(DMA2_Stream5, &DMA_InitStructure);/* 初始化DMA Stream */	
000058  a901              ADD      r1,sp,#4
00005a  481c              LDR      r0,|L2.204|
00005c  f7fffffe          BL       DMA_Init
;;;104        DMA_ITConfig(DMA2_Stream5,DMA_IT_TC,ENABLE);/* 开启传输完成中断  */
000060  2201              MOVS     r2,#1
000062  2110              MOVS     r1,#0x10
000064  4819              LDR      r0,|L2.204|
000066  f7fffffe          BL       DMA_ITConfig
;;;105    
;;;106    //RX
;;;107        DMA_DeInit(DMA2_Stream2);/* 复位初始化DMA数据流 */	
00006a  4818              LDR      r0,|L2.204|
00006c  3848              SUBS     r0,r0,#0x48
00006e  f7fffffe          BL       DMA_DeInit
;;;108        while(DMA_GetCmdStatus(DMA2_Stream2)!=DISABLE);/* 确保DMA数据流复位完成 */
000072  bf00              NOP      
                  |L2.116|
000074  4815              LDR      r0,|L2.204|
000076  3848              SUBS     r0,r0,#0x48
000078  f7fffffe          BL       DMA_GetCmdStatus
00007c  2800              CMP      r0,#0
00007e  d1f9              BNE      |L2.116|
;;;109    
;;;110        /* 配置 DMA Stream */
;;;111        DMA_InitStructure.DMA_Channel = DMA_Channel_3;  /* 通道3，数据流2*/	 			
000080  f04f60c0          MOV      r0,#0x6000000
000084  9001              STR      r0,[sp,#4]
;;;112        DMA_InitStructure.DMA_PeripheralBaseAddr = (SPI1_BASE+0x0C);/* 设置DMA源：串口数据寄存器地址*/ 
000086  4812              LDR      r0,|L2.208|
000088  9002              STR      r0,[sp,#8]
;;;113        DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)rx_buf;	/* 内存地址(要传输的变量的指针)*/  	
00008a  9603              STR      r6,[sp,#0xc]
;;;114        DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;/* 方向：存储器到外设模式 */	
00008c  2000              MOVS     r0,#0
00008e  9004              STR      r0,[sp,#0x10]
;;;115        DMA_InitStructure.DMA_BufferSize = (uint32_t)num;/* 数据传输量 ,需要最大可能接受的数据量[不能为0],实际发送时会重新设置*/	  
000090  9405              STR      r4,[sp,#0x14]
;;;116        DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; /* 外设非增量模式 */
000092  9006              STR      r0,[sp,#0x18]
;;;117        DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;/* 存储器增量模式 */  
000094  f44f6080          MOV      r0,#0x400
000098  9007              STR      r0,[sp,#0x1c]
;;;118        DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;/* 外设数据长度:8位 */
00009a  2000              MOVS     r0,#0
00009c  9008              STR      r0,[sp,#0x20]
;;;119        DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;	/* 内存数据长度:8位 */
00009e  9009              STR      r0,[sp,#0x24]
;;;120        DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;/* DMA模式：正常模式 */
0000a0  900a              STR      r0,[sp,#0x28]
;;;121        DMA_InitStructure.DMA_Priority = DMA_Priority_High; /* 优先级：高 */
0000a2  f44f3000          MOV      r0,#0x20000
0000a6  900b              STR      r0,[sp,#0x2c]
;;;122        DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable; /*禁用FIFO*/ 
0000a8  2000              MOVS     r0,#0
0000aa  900c              STR      r0,[sp,#0x30]
;;;123        DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
0000ac  900d              STR      r0,[sp,#0x34]
;;;124        DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single; /* 外设突发单次传输 */ 
0000ae  900e              STR      r0,[sp,#0x38]
;;;125        DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single; /* 存储器突发单次传输 */  
0000b0  900f              STR      r0,[sp,#0x3c]
;;;126        DMA_Init(DMA2_Stream2, &DMA_InitStructure);	 /* 初始化DMA Stream */						   
0000b2  a901              ADD      r1,sp,#4
0000b4  4805              LDR      r0,|L2.204|
0000b6  3848              SUBS     r0,r0,#0x48
0000b8  f7fffffe          BL       DMA_Init
;;;127        DMA_ITConfig(DMA2_Stream2,DMA_IT_TC,ENABLE);  /* 开启传输完成中断  */					
0000bc  2201              MOVS     r2,#1
0000be  2110              MOVS     r1,#0x10
0000c0  4802              LDR      r0,|L2.204|
0000c2  3848              SUBS     r0,r0,#0x48
0000c4  f7fffffe          BL       DMA_ITConfig
;;;128    
;;;129    }
0000c8  b010              ADD      sp,sp,#0x40
0000ca  bd70              POP      {r4-r6,pc}
;;;130    
                          ENDP

                  |L2.204|
                          DCD      0x40026488
                  |L2.208|
                          DCD      0x4001300c

                          AREA ||i.SPI1_Init||, CODE, READONLY, ALIGN=2

                  SPI1_Init PROC
;;;5      
;;;6      void SPI1_Init(void)
000000  b500              PUSH     {lr}
;;;7      {
000002  b089              SUB      sp,sp,#0x24
;;;8          GPIO_InitTypeDef GPIO_InitStructure;
;;;9          SPI_InitTypeDef SPI_InitStructure;
;;;10         NVIC_InitTypeDef NVIC_InitStructure;
;;;11     
;;;12         //1.初始化GPIO   
;;;13         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA|RCC_AHB1Periph_GPIOB,ENABLE);  
000004  2101              MOVS     r1,#1
000006  2003              MOVS     r0,#3
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;14         /* 连接 引脚源*/
;;;15         GPIO_PinAFConfig(GPIOA,GPIO_PinSource15,GPIO_AF_SPI1);
00000c  2205              MOVS     r2,#5
00000e  210f              MOVS     r1,#0xf
000010  483f              LDR      r0,|L3.272|
000012  f7fffffe          BL       GPIO_PinAFConfig
;;;16         GPIO_PinAFConfig(GPIOB,GPIO_PinSource3,GPIO_AF_SPI1); 
000016  2205              MOVS     r2,#5
000018  2103              MOVS     r1,#3
00001a  483e              LDR      r0,|L3.276|
00001c  f7fffffe          BL       GPIO_PinAFConfig
;;;17         GPIO_PinAFConfig(GPIOB,GPIO_PinSource4,GPIO_AF_SPI1);
000020  2205              MOVS     r2,#5
000022  2104              MOVS     r1,#4
000024  483b              LDR      r0,|L3.276|
000026  f7fffffe          BL       GPIO_PinAFConfig
;;;18     
;;;19         /* 使能 SPI 时钟 */
;;;20         RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);    		
00002a  2101              MOVS     r1,#1
00002c  0308              LSLS     r0,r1,#12
00002e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;21         /* GPIO初始化 */
;;;22         GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	
000032  2000              MOVS     r0,#0
000034  f88d0022          STRB     r0,[sp,#0x22]
;;;23         GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;  
000038  f88d0023          STRB     r0,[sp,#0x23]
;;;24         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003c  2002              MOVS     r0,#2
00003e  f88d0021          STRB     r0,[sp,#0x21]
;;;25         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000042  f88d0020          STRB     r0,[sp,#0x20]
;;;26         /* 配置SCK引脚为复用功能  */
;;;27         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3  ;  
000046  2008              MOVS     r0,#8
000048  9007              STR      r0,[sp,#0x1c]
;;;28         GPIO_Init(GPIOB, &GPIO_InitStructure);
00004a  a907              ADD      r1,sp,#0x1c
00004c  4831              LDR      r0,|L3.276|
00004e  f7fffffe          BL       GPIO_Init
;;;29         /* 配置MISO引脚为复用功能 */
;;;30         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
000052  2010              MOVS     r0,#0x10
000054  9007              STR      r0,[sp,#0x1c]
;;;31         GPIO_Init(GPIOB, &GPIO_InitStructure);
000056  a907              ADD      r1,sp,#0x1c
000058  482e              LDR      r0,|L3.276|
00005a  f7fffffe          BL       GPIO_Init
;;;32         /* 配置MOSI引脚为复用功能 */
;;;33         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
00005e  2080              MOVS     r0,#0x80
000060  9007              STR      r0,[sp,#0x1c]
;;;34         GPIO_Init(GPIOA, &GPIO_InitStructure);  
000062  a907              ADD      r1,sp,#0x1c
000064  482a              LDR      r0,|L3.272|
000066  f7fffffe          BL       GPIO_Init
;;;35         /*CS引脚 */
;;;36         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
00006a  2001              MOVS     r0,#1
00006c  f88d0020          STRB     r0,[sp,#0x20]
;;;37         /* 配置CS(NSS,自动控制SPI的片选信号)引脚为复用功能  */
;;;38         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15  ;  
000070  03c0              LSLS     r0,r0,#15
000072  9007              STR      r0,[sp,#0x1c]
;;;39         GPIO_Init(GPIOA, &GPIO_InitStructure);
000074  a907              ADD      r1,sp,#0x1c
000076  4826              LDR      r0,|L3.272|
000078  f7fffffe          BL       GPIO_Init
;;;40         /* 停止信号: CS 引脚高电平 */
;;;41         GPIO_SetBits(GPIOA, GPIO_Pin_15);
00007c  f44f4100          MOV      r1,#0x8000
000080  4823              LDR      r0,|L3.272|
000082  f7fffffe          BL       GPIO_SetBits
;;;42     
;;;43         //2.配置SPI工作模式
;;;44         // 分频
;;;45         SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8; 
000086  2010              MOVS     r0,#0x10
000088  f8ad0014          STRH     r0,[sp,#0x14]
;;;46         SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge; 
00008c  2001              MOVS     r0,#1
00008e  f8ad0010          STRH     r0,[sp,#0x10]
;;;47         SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low; // 时钟空闲idle时是低电平
000092  2000              MOVS     r0,#0
000094  f8ad000e          STRH     r0,[sp,#0xe]
;;;48         SPI_InitStructure.SPI_CRCPolynomial = 0; // 不需要使用CRC校验
000098  f8ad0018          STRH     r0,[sp,#0x18]
;;;49         SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b; // 数据帧长度为8位
00009c  f8ad000c          STRH     r0,[sp,#0xc]
;;;50         SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;// 双线全双工模式
0000a0  f8ad0008          STRH     r0,[sp,#8]
;;;51         SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB; //数据传输从 MSB 位开始
0000a4  f8ad0016          STRH     r0,[sp,#0x16]
;;;52         SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;//NSS 信号由软件管理
0000a8  f44f7000          MOV      r0,#0x200
0000ac  f8ad0012          STRH     r0,[sp,#0x12]
;;;53         SPI_InitStructure.SPI_Mode = SPI_Mode_Master;	//设置为主设备
0000b0  f44f7082          MOV      r0,#0x104
0000b4  f8ad000a          STRH     r0,[sp,#0xa]
;;;54     
;;;55         SPI_Init(SPI1,&SPI_InitStructure);  
0000b8  a902              ADD      r1,sp,#8
0000ba  4817              LDR      r0,|L3.280|
0000bc  f7fffffe          BL       SPI_Init
;;;56     
;;;57         //DMA
;;;58         SPI_I2S_DMACmd(SPI1,SPI_I2S_DMAReq_Tx,ENABLE);
0000c0  2201              MOVS     r2,#1
0000c2  2102              MOVS     r1,#2
0000c4  4814              LDR      r0,|L3.280|
0000c6  f7fffffe          BL       SPI_I2S_DMACmd
;;;59         SPI_I2S_DMACmd(SPI1,SPI_I2S_DMAReq_Rx,ENABLE);
0000ca  2201              MOVS     r2,#1
0000cc  4611              MOV      r1,r2
0000ce  4812              LDR      r0,|L3.280|
0000d0  f7fffffe          BL       SPI_I2S_DMACmd
;;;60         SPI1_DMA_init(0,0,0);
0000d4  2200              MOVS     r2,#0
0000d6  4611              MOV      r1,r2
0000d8  4610              MOV      r0,r2
0000da  f7fffffe          BL       SPI1_DMA_init
;;;61         
;;;62         // 中断初始化 
;;;63         NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;/* DMA发送中断源 */  	 
0000de  2044              MOVS     r0,#0x44
0000e0  f88d0004          STRB     r0,[sp,#4]
;;;64         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; /* 抢断优先级 */
0000e4  2000              MOVS     r0,#0
0000e6  f88d0005          STRB     r0,[sp,#5]
;;;65         NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;/* 响应优先级 */				
0000ea  2002              MOVS     r0,#2
0000ec  f88d0006          STRB     r0,[sp,#6]
;;;66         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	/* 使能外部中断通道 */				 	
0000f0  2001              MOVS     r0,#1
0000f2  f88d0007          STRB     r0,[sp,#7]
;;;67         NVIC_Init(&NVIC_InitStructure);/* 配置NVIC */	
0000f6  a801              ADD      r0,sp,#4
0000f8  f7fffffe          BL       NVIC_Init
;;;68     
;;;69         /* 使能 FLASH_SPI */	
;;;70         SPI_Cmd(SPI1, ENABLE);   
0000fc  2101              MOVS     r1,#1
0000fe  4806              LDR      r0,|L3.280|
000100  f7fffffe          BL       SPI_Cmd
;;;71         SPI_I2S_ClearITPendingBit(SPI1,SPI_I2S_IT_RXNE);
000104  2160              MOVS     r1,#0x60
000106  4804              LDR      r0,|L3.280|
000108  f7fffffe          BL       SPI_I2S_ClearITPendingBit
;;;72     
;;;73     }
00010c  b009              ADD      sp,sp,#0x24
00010e  bd00              POP      {pc}
;;;74     
                          ENDP

                  |L3.272|
                          DCD      0x40020000
                  |L3.276|
                          DCD      0x40020400
                  |L3.280|
                          DCD      0x40013000

;*** Start embedded assembler ***

#line 1 "..\\user\\_Bsp\\spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_1b04b235____REV16|
#line 388 "..\\stm32LIB\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_spi_c_1b04b235____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_1b04b235____REVSH|
#line 402
|__asm___5_spi_c_1b04b235____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_1b04b235____RRX|
#line 587
|__asm___5_spi_c_1b04b235____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
