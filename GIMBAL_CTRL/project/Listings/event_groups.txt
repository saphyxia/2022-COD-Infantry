; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\event_groups.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\event_groups.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\stm32LIB\inc -I..\stm32LIB\CMSIS\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\user\_Dsp\Include -I..\user\_Algorithms -I..\user\_Bsp -I..\user\_Device -I..\user\_Task -I..\system -I..\stm32LIB\CMSIS -I..\system -I..\FreeRTOS -I..\user -I.\RTE\_COD_Gimbal_Task -IC:\keil_v5_project\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM4 -D__FPU_PRESENT --omf_browse=.\objects\event_groups.crf ..\FreeRTOS\event_groups.c]
                          THUMB

                          AREA ||i.prvTestWaitCondition||, CODE, READONLY, ALIGN=1

                  prvTestWaitCondition PROC
;;;670    
;;;671    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
000000  b510              PUSH     {r4,lr}
;;;672    {
000002  4603              MOV      r3,r0
;;;673    BaseType_t xWaitConditionMet = pdFALSE;
000004  2000              MOVS     r0,#0
;;;674    
;;;675    	if( xWaitForAllBits == pdFALSE )
000006  b922              CBNZ     r2,|L1.18|
;;;676    	{
;;;677    		/* Task only has to wait for one bit within uxBitsToWaitFor to be
;;;678    		set.  Is one already set? */
;;;679    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
000008  ea030401          AND      r4,r3,r1
00000c  b134              CBZ      r4,|L1.28|
;;;680    		{
;;;681    			xWaitConditionMet = pdTRUE;
00000e  2001              MOVS     r0,#1
000010  e004              B        |L1.28|
                  |L1.18|
;;;682    		}
;;;683    		else
;;;684    		{
;;;685    			mtCOVERAGE_TEST_MARKER();
;;;686    		}
;;;687    	}
;;;688    	else
;;;689    	{
;;;690    		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
;;;691    		Are they set already? */
;;;692    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
000012  ea030401          AND      r4,r3,r1
000016  428c              CMP      r4,r1
000018  d100              BNE      |L1.28|
;;;693    		{
;;;694    			xWaitConditionMet = pdTRUE;
00001a  2001              MOVS     r0,#1
                  |L1.28|
;;;695    		}
;;;696    		else
;;;697    		{
;;;698    			mtCOVERAGE_TEST_MARKER();
;;;699    		}
;;;700    	}
;;;701    
;;;702    	return xWaitConditionMet;
;;;703    }
00001c  bd10              POP      {r4,pc}
;;;704    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxEventGroupGetNumber||, CODE, READONLY, ALIGN=1

                  uxEventGroupGetNumber PROC
;;;722    
;;;723    	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
000000  4601              MOV      r1,r0
;;;724    	{
;;;725    	UBaseType_t xReturn;
;;;726    	EventGroup_t const *pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
000002  460a              MOV      r2,r1
;;;727    
;;;728    		if( xEventGroup == NULL )
000004  b909              CBNZ     r1,|L2.10|
;;;729    		{
;;;730    			xReturn = 0;
000006  2000              MOVS     r0,#0
000008  e000              B        |L2.12|
                  |L2.10|
;;;731    		}
;;;732    		else
;;;733    		{
;;;734    			xReturn = pxEventBits->uxEventGroupNumber;
00000a  6990              LDR      r0,[r2,#0x18]
                  |L2.12|
;;;735    		}
;;;736    
;;;737    		return xReturn;
;;;738    	}
00000c  4770              BX       lr
;;;739    
                          ENDP


                          AREA ||i.vEventGroupClearBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupClearBitsCallback PROC
;;;664    an interrupt. */
;;;665    void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
000000  b570              PUSH     {r4-r6,lr}
;;;666    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;667    	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       xEventGroupClearBits
;;;668    }
00000e  bd70              POP      {r4-r6,pc}
;;;669    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupDelete||, CODE, READONLY, ALIGN=1

                  vEventGroupDelete PROC
;;;612    
;;;613    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
000000  b570              PUSH     {r4-r6,lr}
;;;614    {
000002  4605              MOV      r5,r0
;;;615    EventGroup_t *pxEventBits = xEventGroup;
000004  462e              MOV      r6,r5
;;;616    const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
000006  1d34              ADDS     r4,r6,#4
;;;617    
;;;618    	vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;619    	{
;;;620    		traceEVENT_GROUP_DELETE( xEventGroup );
;;;621    
;;;622    		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
00000c  e018              B        |L4.64|
                  |L4.14|
;;;623    		{
;;;624    			/* Unblock the task, returning 0 as the event list is being deleted
;;;625    			and cannot therefore have any bits set. */
;;;626    			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
00000e  f1040008          ADD      r0,r4,#8
000012  68e1              LDR      r1,[r4,#0xc]
000014  4281              CMP      r1,r0
000016  d001              BEQ      |L4.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L4.30|
                  |L4.28|
00001c  2000              MOVS     r0,#0
                  |L4.30|
00001e  b950              CBNZ     r0,|L4.54|
000020  bf00              NOP      
000022  2050              MOVS     r0,#0x50
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L4.52|
000034  e7fe              B        |L4.52|
                  |L4.54|
;;;627    			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
000036  f04f7100          MOV      r1,#0x2000000
00003a  68e0              LDR      r0,[r4,#0xc]
00003c  f7fffffe          BL       vTaskRemoveFromUnorderedEventList
                  |L4.64|
000040  6820              LDR      r0,[r4,#0]            ;622
000042  2800              CMP      r0,#0                 ;622
000044  d1e3              BNE      |L4.14|
;;;628    		}
;;;629    
;;;630    		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
;;;631    		{
;;;632    			/* The event group can only have been allocated dynamically - free
;;;633    			it again. */
;;;634    			vPortFree( pxEventBits );
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       vPortFree
;;;635    		}
;;;636    		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
;;;637    		{
;;;638    			/* The event group could have been allocated statically or
;;;639    			dynamically, so check before attempting to free the memory. */
;;;640    			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
;;;641    			{
;;;642    				vPortFree( pxEventBits );
;;;643    			}
;;;644    			else
;;;645    			{
;;;646    				mtCOVERAGE_TEST_MARKER();
;;;647    			}
;;;648    		}
;;;649    		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;650    	}
;;;651    	( void ) xTaskResumeAll();
00004c  f7fffffe          BL       xTaskResumeAll
;;;652    }
000050  bd70              POP      {r4-r6,pc}
;;;653    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupSetBitsCallback||, CODE, READONLY, ALIGN=1

                  vEventGroupSetBitsCallback PROC
;;;656    an interrupt. */
;;;657    void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
000000  b570              PUSH     {r4-r6,lr}
;;;658    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;659    	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       xEventGroupSetBits
;;;660    }
00000e  bd70              POP      {r4-r6,pc}
;;;661    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupSetNumber||, CODE, READONLY, ALIGN=1

                  vEventGroupSetNumber PROC
;;;744    
;;;745    	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
000000  6181              STR      r1,[r0,#0x18]
;;;746    	{
;;;747    		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
;;;748    	}
000002  4770              BX       lr
;;;749    
                          ENDP


                          AREA ||i.xEventGroupClearBits||, CODE, READONLY, ALIGN=1

                  xEventGroupClearBits PROC
;;;460    
;;;461    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;462    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;463    EventGroup_t *pxEventBits = xEventGroup;
000008  462c              MOV      r4,r5
;;;464    EventBits_t uxReturn;
;;;465    
;;;466    	/* Check the user is not attempting to clear the bits used by the kernel
;;;467    	itself. */
;;;468    	configASSERT( xEventGroup );
00000a  b955              CBNZ     r5,|L7.34|
00000c  bf00              NOP      
00000e  2050              MOVS     r0,#0x50
000010  f3808811          MSR      BASEPRI,r0
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
00001c  bf00              NOP      
00001e  bf00              NOP      
                  |L7.32|
000020  e7fe              B        |L7.32|
                  |L7.34|
;;;469    	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000022  f006407f          AND      r0,r6,#0xff000000
000026  b908              CBNZ     r0,|L7.44|
000028  2001              MOVS     r0,#1
00002a  e000              B        |L7.46|
                  |L7.44|
00002c  2000              MOVS     r0,#0
                  |L7.46|
00002e  b950              CBNZ     r0,|L7.70|
000030  bf00              NOP      
000032  2050              MOVS     r0,#0x50
000034  f3808811          MSR      BASEPRI,r0
000038  f3bf8f4f          DSB      
00003c  f3bf8f6f          ISB      
000040  bf00              NOP      
000042  bf00              NOP      
                  |L7.68|
000044  e7fe              B        |L7.68|
                  |L7.70|
;;;470    
;;;471    	taskENTER_CRITICAL();
000046  f7fffffe          BL       vPortEnterCritical
;;;472    	{
;;;473    		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
;;;474    
;;;475    		/* The value returned is the event group value prior to the bits being
;;;476    		cleared. */
;;;477    		uxReturn = pxEventBits->uxEventBits;
00004a  6827              LDR      r7,[r4,#0]
;;;478    
;;;479    		/* Clear the bits. */
;;;480    		pxEventBits->uxEventBits &= ~uxBitsToClear;
00004c  6820              LDR      r0,[r4,#0]
00004e  43b0              BICS     r0,r0,r6
000050  6020              STR      r0,[r4,#0]
;;;481    	}
;;;482    	taskEXIT_CRITICAL();
000052  f7fffffe          BL       vPortExitCritical
;;;483    
;;;484    	return uxReturn;
000056  4638              MOV      r0,r7
;;;485    }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;486    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupCreate||, CODE, READONLY, ALIGN=1

                  xEventGroupCreate PROC
;;;144    
;;;145    	EventGroupHandle_t xEventGroupCreate( void )
000000  b510              PUSH     {r4,lr}
;;;146    	{
;;;147    	EventGroup_t *pxEventBits;
;;;148    
;;;149    		/* Allocate the event group.  Justification for MISRA deviation as
;;;150    		follows:  pvPortMalloc() always ensures returned memory blocks are
;;;151    		aligned per the requirements of the MCU stack.  In this case
;;;152    		pvPortMalloc() must return a pointer that is guaranteed to meet the
;;;153    		alignment requirements of the EventGroup_t structure - which (if you
;;;154    		follow it through) is the alignment requirements of the TickType_t type
;;;155    		(EventBits_t being of TickType_t itself).  Therefore, whenever the
;;;156    		stack alignment requirements are greater than or equal to the
;;;157    		TickType_t alignment requirements the cast is safe.  In other cases,
;;;158    		where the natural word size of the architecture is less than
;;;159    		sizeof( TickType_t ), the TickType_t variables will be accessed in two
;;;160    		or more reads operations, and the alignment requirements is only that
;;;161    		of each individual read. */
;;;162    		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
000002  201c              MOVS     r0,#0x1c
000004  f7fffffe          BL       pvPortMalloc
000008  4604              MOV      r4,r0
;;;163    
;;;164    		if( pxEventBits != NULL )
00000a  b124              CBZ      r4,|L8.22|
;;;165    		{
;;;166    			pxEventBits->uxEventBits = 0;
00000c  2000              MOVS     r0,#0
00000e  6020              STR      r0,[r4,#0]
;;;167    			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
000010  1d20              ADDS     r0,r4,#4
000012  f7fffffe          BL       vListInitialise
                  |L8.22|
;;;168    
;;;169    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;170    			{
;;;171    				/* Both static and dynamic allocation can be used, so note this
;;;172    				event group was allocated statically in case the event group is
;;;173    				later deleted. */
;;;174    				pxEventBits->ucStaticallyAllocated = pdFALSE;
;;;175    			}
;;;176    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;177    
;;;178    			traceEVENT_GROUP_CREATE( pxEventBits );
;;;179    		}
;;;180    		else
;;;181    		{
;;;182    			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
;;;183    		}
;;;184    
;;;185    		return pxEventBits;
000016  4620              MOV      r0,r4
;;;186    	}
000018  bd10              POP      {r4,pc}
;;;187    
                          ENDP


                          AREA ||i.xEventGroupGetBitsFromISR||, CODE, READONLY, ALIGN=1

                  xEventGroupGetBitsFromISR PROC
;;;502    
;;;503    EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
000000  b570              PUSH     {r4-r6,lr}
;;;504    {
000002  4601              MOV      r1,r0
;;;505    UBaseType_t uxSavedInterruptStatus;
;;;506    EventGroup_t const * const pxEventBits = xEventGroup;
000004  460b              MOV      r3,r1
;;;507    EventBits_t uxReturn;
;;;508    
;;;509    	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000006  bf00              NOP      
000008  2550              MOVS     r5,#0x50
00000a  f3ef8011          MRS      r0,BASEPRI
00000e  f3858811          MSR      BASEPRI,r5
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  4602              MOV      r2,r0
;;;510    	{
;;;511    		uxReturn = pxEventBits->uxEventBits;
00001e  681c              LDR      r4,[r3,#0]
;;;512    	}
;;;513    	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000020  4610              MOV      r0,r2
000022  f3808811          MSR      BASEPRI,r0
000026  bf00              NOP      
;;;514    
;;;515    	return uxReturn;
000028  4620              MOV      r0,r4
;;;516    } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
00002a  bd70              POP      {r4-r6,pc}
;;;517    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSetBits||, CODE, READONLY, ALIGN=1

                  xEventGroupSetBits PROC
;;;518    
;;;519    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;520    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
;;;521    ListItem_t *pxListItem, *pxNext;
;;;522    ListItem_t const *pxListEnd;
;;;523    List_t const * pxList;
;;;524    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;525    EventGroup_t *pxEventBits = xEventGroup;
00000c  463c              MOV      r4,r7
;;;526    BaseType_t xMatchFound = pdFALSE;
00000e  9000              STR      r0,[sp,#0]
;;;527    
;;;528    	/* Check the user is not attempting to set the bits used by the kernel
;;;529    	itself. */
;;;530    	configASSERT( xEventGroup );
000010  b957              CBNZ     r7,|L10.40|
000012  bf00              NOP      
000014  2050              MOVS     r0,#0x50
000016  f3808811          MSR      BASEPRI,r0
00001a  f3bf8f4f          DSB      
00001e  f3bf8f6f          ISB      
000022  bf00              NOP      
000024  bf00              NOP      
                  |L10.38|
000026  e7fe              B        |L10.38|
                  |L10.40|
;;;531    	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000028  f008407f          AND      r0,r8,#0xff000000
00002c  b908              CBNZ     r0,|L10.50|
00002e  2001              MOVS     r0,#1
000030  e000              B        |L10.52|
                  |L10.50|
000032  2000              MOVS     r0,#0
                  |L10.52|
000034  b950              CBNZ     r0,|L10.76|
000036  bf00              NOP      
000038  2050              MOVS     r0,#0x50
00003a  f3808811          MSR      BASEPRI,r0
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
000046  bf00              NOP      
000048  bf00              NOP      
                  |L10.74|
00004a  e7fe              B        |L10.74|
                  |L10.76|
;;;532    
;;;533    	pxList = &( pxEventBits->xTasksWaitingForBits );
00004c  f1040904          ADD      r9,r4,#4
;;;534    	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000050  f1090008          ADD      r0,r9,#8
000054  9002              STR      r0,[sp,#8]
;;;535    	vTaskSuspendAll();
000056  f7fffffe          BL       vTaskSuspendAll
;;;536    	{
;;;537    		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
;;;538    
;;;539    		pxListItem = listGET_HEAD_ENTRY( pxList );
00005a  f8d9600c          LDR      r6,[r9,#0xc]
;;;540    
;;;541    		/* Set the bits. */
;;;542    		pxEventBits->uxEventBits |= uxBitsToSet;
00005e  6820              LDR      r0,[r4,#0]
000060  ea400008          ORR      r0,r0,r8
000064  6020              STR      r0,[r4,#0]
;;;543    
;;;544    		/* See if the new bit value should unblock any tasks. */
;;;545    		while( pxListItem != pxListEnd )
000066  e026              B        |L10.182|
                  |L10.104|
;;;546    		{
;;;547    			pxNext = listGET_NEXT( pxListItem );
000068  f8d6b004          LDR      r11,[r6,#4]
;;;548    			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
00006c  6835              LDR      r5,[r6,#0]
;;;549    			xMatchFound = pdFALSE;
00006e  2000              MOVS     r0,#0
000070  9000              STR      r0,[sp,#0]
;;;550    
;;;551    			/* Split the bits waited for from the control bits. */
;;;552    			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
000072  f0054a7f          AND      r10,r5,#0xff000000
;;;553    			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
000076  f025457f          BIC      r5,r5,#0xff000000
;;;554    
;;;555    			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
00007a  f00a6080          AND      r0,r10,#0x4000000
00007e  b928              CBNZ     r0,|L10.140|
;;;556    			{
;;;557    				/* Just looking for single bit being set. */
;;;558    				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
000080  6820              LDR      r0,[r4,#0]
000082  4028              ANDS     r0,r0,r5
000084  b140              CBZ      r0,|L10.152|
;;;559    				{
;;;560    					xMatchFound = pdTRUE;
000086  2001              MOVS     r0,#1
000088  9000              STR      r0,[sp,#0]
00008a  e005              B        |L10.152|
                  |L10.140|
;;;561    				}
;;;562    				else
;;;563    				{
;;;564    					mtCOVERAGE_TEST_MARKER();
;;;565    				}
;;;566    			}
;;;567    			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
00008c  6820              LDR      r0,[r4,#0]
00008e  4028              ANDS     r0,r0,r5
000090  42a8              CMP      r0,r5
000092  d101              BNE      |L10.152|
;;;568    			{
;;;569    				/* All bits are set. */
;;;570    				xMatchFound = pdTRUE;
000094  2001              MOVS     r0,#1
000096  9000              STR      r0,[sp,#0]
                  |L10.152|
;;;571    			}
;;;572    			else
;;;573    			{
;;;574    				/* Need all bits to be set, but not all the bits were set. */
;;;575    			}
;;;576    
;;;577    			if( xMatchFound != pdFALSE )
000098  9800              LDR      r0,[sp,#0]
00009a  b158              CBZ      r0,|L10.180|
;;;578    			{
;;;579    				/* The bits match.  Should the bits be cleared on exit? */
;;;580    				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
00009c  f00a7080          AND      r0,r10,#0x1000000
0000a0  b110              CBZ      r0,|L10.168|
;;;581    				{
;;;582    					uxBitsToClear |= uxBitsWaitedFor;
0000a2  9801              LDR      r0,[sp,#4]
0000a4  4328              ORRS     r0,r0,r5
0000a6  9001              STR      r0,[sp,#4]
                  |L10.168|
;;;583    				}
;;;584    				else
;;;585    				{
;;;586    					mtCOVERAGE_TEST_MARKER();
;;;587    				}
;;;588    
;;;589    				/* Store the actual event flag value in the task's event list
;;;590    				item before removing the task from the event list.  The
;;;591    				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
;;;592    				that is was unblocked due to its required bits matching, rather
;;;593    				than because it timed out. */
;;;594    				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
0000a8  6820              LDR      r0,[r4,#0]
0000aa  f0407100          ORR      r1,r0,#0x2000000
0000ae  4630              MOV      r0,r6
0000b0  f7fffffe          BL       vTaskRemoveFromUnorderedEventList
                  |L10.180|
;;;595    			}
;;;596    
;;;597    			/* Move onto the next list item.  Note pxListItem->pxNext is not
;;;598    			used here as the list item may have been removed from the event list
;;;599    			and inserted into the ready/pending reading list. */
;;;600    			pxListItem = pxNext;
0000b4  465e              MOV      r6,r11
                  |L10.182|
0000b6  9802              LDR      r0,[sp,#8]            ;545
0000b8  4286              CMP      r6,r0                 ;545
0000ba  d1d5              BNE      |L10.104|
;;;601    		}
;;;602    
;;;603    		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
;;;604    		bit was set in the control word. */
;;;605    		pxEventBits->uxEventBits &= ~uxBitsToClear;
0000bc  6820              LDR      r0,[r4,#0]
0000be  9901              LDR      r1,[sp,#4]
0000c0  4388              BICS     r0,r0,r1
0000c2  6020              STR      r0,[r4,#0]
;;;606    	}
;;;607    	( void ) xTaskResumeAll();
0000c4  f7fffffe          BL       xTaskResumeAll
;;;608    
;;;609    	return pxEventBits->uxEventBits;
0000c8  6820              LDR      r0,[r4,#0]
;;;610    }
0000ca  e8bd8ffe          POP      {r1-r11,pc}
;;;611    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSync||, CODE, READONLY, ALIGN=2

                  xEventGroupSync PROC
;;;190    
;;;191    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;192    {
000004  4683              MOV      r11,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
;;;193    EventBits_t uxOriginalBitValue, uxReturn;
;;;194    EventGroup_t *pxEventBits = xEventGroup;
00000c  465d              MOV      r5,r11
;;;195    BaseType_t xAlreadyYielded;
;;;196    BaseType_t xTimeoutOccurred = pdFALSE;
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
;;;197    
;;;198    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000012  f004407f          AND      r0,r4,#0xff000000
000016  b908              CBNZ     r0,|L11.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L11.30|
                  |L11.28|
00001c  2000              MOVS     r0,#0
                  |L11.30|
00001e  b950              CBNZ     r0,|L11.54|
000020  bf00              NOP      
000022  2050              MOVS     r0,#0x50
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L11.52|
000034  e7fe              B        |L11.52|
                  |L11.54|
;;;199    	configASSERT( uxBitsToWaitFor != 0 );
000036  b10c              CBZ      r4,|L11.60|
000038  2001              MOVS     r0,#1
00003a  e000              B        |L11.62|
                  |L11.60|
00003c  2000              MOVS     r0,#0
                  |L11.62|
00003e  b950              CBNZ     r0,|L11.86|
000040  bf00              NOP      
000042  2050              MOVS     r0,#0x50
000044  f3808811          MSR      BASEPRI,r0
000048  f3bf8f4f          DSB      
00004c  f3bf8f6f          ISB      
000050  bf00              NOP      
000052  bf00              NOP      
                  |L11.84|
000054  e7fe              B        |L11.84|
                  |L11.86|
;;;200    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;201    	{
;;;202    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
000056  f7fffffe          BL       xTaskGetSchedulerState
00005a  b900              CBNZ     r0,|L11.94|
00005c  b90f              CBNZ     r7,|L11.98|
                  |L11.94|
00005e  2001              MOVS     r0,#1
000060  e000              B        |L11.100|
                  |L11.98|
000062  2000              MOVS     r0,#0
                  |L11.100|
000064  b950              CBNZ     r0,|L11.124|
000066  bf00              NOP      
000068  2050              MOVS     r0,#0x50
00006a  f3808811          MSR      BASEPRI,r0
00006e  f3bf8f4f          DSB      
000072  f3bf8f6f          ISB      
000076  bf00              NOP      
000078  bf00              NOP      
                  |L11.122|
00007a  e7fe              B        |L11.122|
                  |L11.124|
;;;203    	}
;;;204    	#endif
;;;205    
;;;206    	vTaskSuspendAll();
00007c  f7fffffe          BL       vTaskSuspendAll
;;;207    	{
;;;208    		uxOriginalBitValue = pxEventBits->uxEventBits;
000080  f8d59000          LDR      r9,[r5,#0]
;;;209    
;;;210    		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
000084  4641              MOV      r1,r8
000086  4658              MOV      r0,r11
000088  f7fffffe          BL       xEventGroupSetBits
;;;211    
;;;212    		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
00008c  ea490008          ORR      r0,r9,r8
000090  4020              ANDS     r0,r0,r4
000092  42a0              CMP      r0,r4
000094  d106              BNE      |L11.164|
;;;213    		{
;;;214    			/* All the rendezvous bits are now set - no need to block. */
;;;215    			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
000096  ea490608          ORR      r6,r9,r8
;;;216    
;;;217    			/* Rendezvous always clear the bits.  They will have been cleared
;;;218    			already unless this is the only task in the rendezvous. */
;;;219    			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
00009a  6828              LDR      r0,[r5,#0]
00009c  43a0              BICS     r0,r0,r4
00009e  6028              STR      r0,[r5,#0]
;;;220    
;;;221    			xTicksToWait = 0;
0000a0  2700              MOVS     r7,#0
0000a2  e00b              B        |L11.188|
                  |L11.164|
;;;222    		}
;;;223    		else
;;;224    		{
;;;225    			if( xTicksToWait != ( TickType_t ) 0 )
0000a4  b13f              CBZ      r7,|L11.182|
;;;226    			{
;;;227    				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
;;;228    
;;;229    				/* Store the bits that the calling task is waiting for in the
;;;230    				task's event list item so the kernel knows when a match is
;;;231    				found.  Then enter the blocked state. */
;;;232    				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
0000a6  f04461a0          ORR      r1,r4,#0x5000000
0000aa  463a              MOV      r2,r7
0000ac  1d28              ADDS     r0,r5,#4
0000ae  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;233    
;;;234    				/* This assignment is obsolete as uxReturn will get set after
;;;235    				the task unblocks, but some compilers mistakenly generate a
;;;236    				warning about uxReturn being returned without being set if the
;;;237    				assignment is omitted. */
;;;238    				uxReturn = 0;
0000b2  2600              MOVS     r6,#0
0000b4  e002              B        |L11.188|
                  |L11.182|
;;;239    			}
;;;240    			else
;;;241    			{
;;;242    				/* The rendezvous bits were not set, but no block time was
;;;243    				specified - just return the current event bit value. */
;;;244    				uxReturn = pxEventBits->uxEventBits;
0000b6  682e              LDR      r6,[r5,#0]
;;;245    				xTimeoutOccurred = pdTRUE;
0000b8  2001              MOVS     r0,#1
0000ba  9000              STR      r0,[sp,#0]
                  |L11.188|
;;;246    			}
;;;247    		}
;;;248    	}
;;;249    	xAlreadyYielded = xTaskResumeAll();
0000bc  f7fffffe          BL       xTaskResumeAll
0000c0  4682              MOV      r10,r0
;;;250    
;;;251    	if( xTicksToWait != ( TickType_t ) 0 )
0000c2  b307              CBZ      r7,|L11.262|
;;;252    	{
;;;253    		if( xAlreadyYielded == pdFALSE )
0000c4  f1ba0f00          CMP      r10,#0
0000c8  d107              BNE      |L11.218|
;;;254    		{
;;;255    			portYIELD_WITHIN_API();
0000ca  f04f5080          MOV      r0,#0x10000000
0000ce  490f              LDR      r1,|L11.268|
0000d0  6008              STR      r0,[r1,#0]
0000d2  f3bf8f4f          DSB      
0000d6  f3bf8f6f          ISB      
                  |L11.218|
;;;256    		}
;;;257    		else
;;;258    		{
;;;259    			mtCOVERAGE_TEST_MARKER();
;;;260    		}
;;;261    
;;;262    		/* The task blocked to wait for its required bits to be set - at this
;;;263    		point either the required bits were set or the block time expired.  If
;;;264    		the required bits were set they will have been stored in the task's
;;;265    		event list item, and they should now be retrieved then cleared. */
;;;266    		uxReturn = uxTaskResetEventItemValue();
0000da  f7fffffe          BL       uxTaskResetEventItemValue
0000de  4606              MOV      r6,r0
;;;267    
;;;268    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
0000e0  f0067000          AND      r0,r6,#0x2000000
0000e4  b968              CBNZ     r0,|L11.258|
;;;269    		{
;;;270    			/* The task timed out, just return the current event bit value. */
;;;271    			taskENTER_CRITICAL();
0000e6  f7fffffe          BL       vPortEnterCritical
;;;272    			{
;;;273    				uxReturn = pxEventBits->uxEventBits;
0000ea  682e              LDR      r6,[r5,#0]
;;;274    
;;;275    				/* Although the task got here because it timed out before the
;;;276    				bits it was waiting for were set, it is possible that since it
;;;277    				unblocked another task has set the bits.  If this is the case
;;;278    				then it needs to clear the bits before exiting. */
;;;279    				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
0000ec  ea060004          AND      r0,r6,r4
0000f0  42a0              CMP      r0,r4
0000f2  d102              BNE      |L11.250|
;;;280    				{
;;;281    					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0000f4  6828              LDR      r0,[r5,#0]
0000f6  43a0              BICS     r0,r0,r4
0000f8  6028              STR      r0,[r5,#0]
                  |L11.250|
;;;282    				}
;;;283    				else
;;;284    				{
;;;285    					mtCOVERAGE_TEST_MARKER();
;;;286    				}
;;;287    			}
;;;288    			taskEXIT_CRITICAL();
0000fa  f7fffffe          BL       vPortExitCritical
;;;289    
;;;290    			xTimeoutOccurred = pdTRUE;
0000fe  2001              MOVS     r0,#1
000100  9000              STR      r0,[sp,#0]
                  |L11.258|
;;;291    		}
;;;292    		else
;;;293    		{
;;;294    			/* The task unblocked because the bits were set. */
;;;295    		}
;;;296    
;;;297    		/* Control bits might be set as the task had blocked should not be
;;;298    		returned. */
;;;299    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
000102  f026467f          BIC      r6,r6,#0xff000000
                  |L11.262|
;;;300    	}
;;;301    
;;;302    	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
;;;303    
;;;304    	/* Prevent compiler warnings when trace macros are not used. */
;;;305    	( void ) xTimeoutOccurred;
;;;306    
;;;307    	return uxReturn;
000106  4630              MOV      r0,r6
;;;308    }
000108  e8bd8ff8          POP      {r3-r11,pc}
;;;309    /*-----------------------------------------------------------*/
                          ENDP

                  |L11.268|
                          DCD      0xe000ed04

                          AREA ||i.xEventGroupWaitBits||, CODE, READONLY, ALIGN=2

                  xEventGroupWaitBits PROC
;;;310    
;;;311    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;312    {
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
000008  460d              MOV      r5,r1
00000a  4617              MOV      r7,r2
00000c  f8dd8040          LDR      r8,[sp,#0x40]
;;;313    EventGroup_t *pxEventBits = xEventGroup;
000010  464c              MOV      r4,r9
;;;314    EventBits_t uxReturn, uxControlBits = 0;
000012  f04f0a00          MOV      r10,#0
;;;315    BaseType_t xWaitConditionMet, xAlreadyYielded;
;;;316    BaseType_t xTimeoutOccurred = pdFALSE;
000016  2000              MOVS     r0,#0
000018  9001              STR      r0,[sp,#4]
;;;317    
;;;318    	/* Check the user is not attempting to wait on the bits used by the kernel
;;;319    	itself, and that at least one bit is being requested. */
;;;320    	configASSERT( xEventGroup );
00001a  f1b90f00          CMP      r9,#0
00001e  d10a              BNE      |L12.54|
000020  bf00              NOP      
000022  2050              MOVS     r0,#0x50
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L12.52|
000034  e7fe              B        |L12.52|
                  |L12.54|
;;;321    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000036  f005407f          AND      r0,r5,#0xff000000
00003a  b908              CBNZ     r0,|L12.64|
00003c  2001              MOVS     r0,#1
00003e  e000              B        |L12.66|
                  |L12.64|
000040  2000              MOVS     r0,#0
                  |L12.66|
000042  b950              CBNZ     r0,|L12.90|
000044  bf00              NOP      
000046  2050              MOVS     r0,#0x50
000048  f3808811          MSR      BASEPRI,r0
00004c  f3bf8f4f          DSB      
000050  f3bf8f6f          ISB      
000054  bf00              NOP      
000056  bf00              NOP      
                  |L12.88|
000058  e7fe              B        |L12.88|
                  |L12.90|
;;;322    	configASSERT( uxBitsToWaitFor != 0 );
00005a  b10d              CBZ      r5,|L12.96|
00005c  2001              MOVS     r0,#1
00005e  e000              B        |L12.98|
                  |L12.96|
000060  2000              MOVS     r0,#0
                  |L12.98|
000062  b950              CBNZ     r0,|L12.122|
000064  bf00              NOP      
000066  2050              MOVS     r0,#0x50
000068  f3808811          MSR      BASEPRI,r0
00006c  f3bf8f4f          DSB      
000070  f3bf8f6f          ISB      
000074  bf00              NOP      
000076  bf00              NOP      
                  |L12.120|
000078  e7fe              B        |L12.120|
                  |L12.122|
;;;323    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;324    	{
;;;325    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
00007a  f7fffffe          BL       xTaskGetSchedulerState
00007e  b910              CBNZ     r0,|L12.134|
000080  f1b80f00          CMP      r8,#0
000084  d101              BNE      |L12.138|
                  |L12.134|
000086  2001              MOVS     r0,#1
000088  e000              B        |L12.140|
                  |L12.138|
00008a  2000              MOVS     r0,#0
                  |L12.140|
00008c  b950              CBNZ     r0,|L12.164|
00008e  bf00              NOP      
000090  2050              MOVS     r0,#0x50
000092  f3808811          MSR      BASEPRI,r0
000096  f3bf8f4f          DSB      
00009a  f3bf8f6f          ISB      
00009e  bf00              NOP      
0000a0  bf00              NOP      
                  |L12.162|
0000a2  e7fe              B        |L12.162|
                  |L12.164|
;;;326    	}
;;;327    	#endif
;;;328    
;;;329    	vTaskSuspendAll();
0000a4  f7fffffe          BL       vTaskSuspendAll
;;;330    	{
;;;331    		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
0000a8  6820              LDR      r0,[r4,#0]
0000aa  9000              STR      r0,[sp,#0]
;;;332    
;;;333    		/* Check to see if the wait condition is already met or not. */
;;;334    		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
0000ac  4629              MOV      r1,r5
0000ae  9a06              LDR      r2,[sp,#0x18]
0000b0  9800              LDR      r0,[sp,#0]
0000b2  f7fffffe          BL       prvTestWaitCondition
0000b6  9002              STR      r0,[sp,#8]
;;;335    
;;;336    		if( xWaitConditionMet != pdFALSE )
0000b8  9802              LDR      r0,[sp,#8]
0000ba  b138              CBZ      r0,|L12.204|
;;;337    		{
;;;338    			/* The wait condition has already been met so there is no need to
;;;339    			block. */
;;;340    			uxReturn = uxCurrentEventBits;
0000bc  9e00              LDR      r6,[sp,#0]
;;;341    			xTicksToWait = ( TickType_t ) 0;
0000be  f04f0800          MOV      r8,#0
;;;342    
;;;343    			/* Clear the wait bits if requested to do so. */
;;;344    			if( xClearOnExit != pdFALSE )
0000c2  b1c7              CBZ      r7,|L12.246|
;;;345    			{
;;;346    				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0000c4  6820              LDR      r0,[r4,#0]
0000c6  43a8              BICS     r0,r0,r5
0000c8  6020              STR      r0,[r4,#0]
0000ca  e014              B        |L12.246|
                  |L12.204|
;;;347    			}
;;;348    			else
;;;349    			{
;;;350    				mtCOVERAGE_TEST_MARKER();
;;;351    			}
;;;352    		}
;;;353    		else if( xTicksToWait == ( TickType_t ) 0 )
0000cc  f1b80f00          CMP      r8,#0
0000d0  d103              BNE      |L12.218|
;;;354    		{
;;;355    			/* The wait condition has not been met, but no block time was
;;;356    			specified, so just return the current value. */
;;;357    			uxReturn = uxCurrentEventBits;
0000d2  9e00              LDR      r6,[sp,#0]
;;;358    			xTimeoutOccurred = pdTRUE;
0000d4  2001              MOVS     r0,#1
0000d6  9001              STR      r0,[sp,#4]
0000d8  e00d              B        |L12.246|
                  |L12.218|
;;;359    		}
;;;360    		else
;;;361    		{
;;;362    			/* The task is going to block to wait for its required bits to be
;;;363    			set.  uxControlBits are used to remember the specified behaviour of
;;;364    			this call to xEventGroupWaitBits() - for use when the event bits
;;;365    			unblock the task. */
;;;366    			if( xClearOnExit != pdFALSE )
0000da  b10f              CBZ      r7,|L12.224|
;;;367    			{
;;;368    				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
0000dc  f04a7a80          ORR      r10,r10,#0x1000000
                  |L12.224|
;;;369    			}
;;;370    			else
;;;371    			{
;;;372    				mtCOVERAGE_TEST_MARKER();
;;;373    			}
;;;374    
;;;375    			if( xWaitForAllBits != pdFALSE )
0000e0  9806              LDR      r0,[sp,#0x18]
0000e2  b108              CBZ      r0,|L12.232|
;;;376    			{
;;;377    				uxControlBits |= eventWAIT_FOR_ALL_BITS;
0000e4  f04a6a80          ORR      r10,r10,#0x4000000
                  |L12.232|
;;;378    			}
;;;379    			else
;;;380    			{
;;;381    				mtCOVERAGE_TEST_MARKER();
;;;382    			}
;;;383    
;;;384    			/* Store the bits that the calling task is waiting for in the
;;;385    			task's event list item so the kernel knows when a match is
;;;386    			found.  Then enter the blocked state. */
;;;387    			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
0000e8  ea45010a          ORR      r1,r5,r10
0000ec  4642              MOV      r2,r8
0000ee  1d20              ADDS     r0,r4,#4
0000f0  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;388    
;;;389    			/* This is obsolete as it will get set after the task unblocks, but
;;;390    			some compilers mistakenly generate a warning about the variable
;;;391    			being returned without being set if it is not done. */
;;;392    			uxReturn = 0;
0000f4  2600              MOVS     r6,#0
                  |L12.246|
;;;393    
;;;394    			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
;;;395    		}
;;;396    	}
;;;397    	xAlreadyYielded = xTaskResumeAll();
0000f6  f7fffffe          BL       xTaskResumeAll
0000fa  4683              MOV      r11,r0
;;;398    
;;;399    	if( xTicksToWait != ( TickType_t ) 0 )
0000fc  f1b80f00          CMP      r8,#0
000100  d023              BEQ      |L12.330|
;;;400    	{
;;;401    		if( xAlreadyYielded == pdFALSE )
000102  f1bb0f00          CMP      r11,#0
000106  d107              BNE      |L12.280|
;;;402    		{
;;;403    			portYIELD_WITHIN_API();
000108  f04f5080          MOV      r0,#0x10000000
00010c  4911              LDR      r1,|L12.340|
00010e  6008              STR      r0,[r1,#0]
000110  f3bf8f4f          DSB      
000114  f3bf8f6f          ISB      
                  |L12.280|
;;;404    		}
;;;405    		else
;;;406    		{
;;;407    			mtCOVERAGE_TEST_MARKER();
;;;408    		}
;;;409    
;;;410    		/* The task blocked to wait for its required bits to be set - at this
;;;411    		point either the required bits were set or the block time expired.  If
;;;412    		the required bits were set they will have been stored in the task's
;;;413    		event list item, and they should now be retrieved then cleared. */
;;;414    		uxReturn = uxTaskResetEventItemValue();
000118  f7fffffe          BL       uxTaskResetEventItemValue
00011c  4606              MOV      r6,r0
;;;415    
;;;416    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
00011e  f0067000          AND      r0,r6,#0x2000000
000122  b980              CBNZ     r0,|L12.326|
;;;417    		{
;;;418    			taskENTER_CRITICAL();
000124  f7fffffe          BL       vPortEnterCritical
;;;419    			{
;;;420    				/* The task timed out, just return the current event bit value. */
;;;421    				uxReturn = pxEventBits->uxEventBits;
000128  6826              LDR      r6,[r4,#0]
;;;422    
;;;423    				/* It is possible that the event bits were updated between this
;;;424    				task leaving the Blocked state and running again. */
;;;425    				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
00012a  4629              MOV      r1,r5
00012c  4630              MOV      r0,r6
00012e  9a06              LDR      r2,[sp,#0x18]
000130  f7fffffe          BL       prvTestWaitCondition
000134  b118              CBZ      r0,|L12.318|
;;;426    				{
;;;427    					if( xClearOnExit != pdFALSE )
000136  b117              CBZ      r7,|L12.318|
;;;428    					{
;;;429    						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
000138  6820              LDR      r0,[r4,#0]
00013a  43a8              BICS     r0,r0,r5
00013c  6020              STR      r0,[r4,#0]
                  |L12.318|
;;;430    					}
;;;431    					else
;;;432    					{
;;;433    						mtCOVERAGE_TEST_MARKER();
;;;434    					}
;;;435    				}
;;;436    				else
;;;437    				{
;;;438    					mtCOVERAGE_TEST_MARKER();
;;;439    				}
;;;440    				xTimeoutOccurred = pdTRUE;
00013e  2001              MOVS     r0,#1
000140  9001              STR      r0,[sp,#4]
;;;441    			}
;;;442    			taskEXIT_CRITICAL();
000142  f7fffffe          BL       vPortExitCritical
                  |L12.326|
;;;443    		}
;;;444    		else
;;;445    		{
;;;446    			/* The task unblocked because the bits were set. */
;;;447    		}
;;;448    
;;;449    		/* The task blocked so control bits may have been set. */
;;;450    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
000146  f026467f          BIC      r6,r6,#0xff000000
                  |L12.330|
;;;451    	}
;;;452    	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
;;;453    
;;;454    	/* Prevent compiler warnings when trace macros are not used. */
;;;455    	( void ) xTimeoutOccurred;
;;;456    
;;;457    	return uxReturn;
00014a  4630              MOV      r0,r6
;;;458    }
00014c  b007              ADD      sp,sp,#0x1c
00014e  e8bd8ff0          POP      {r4-r11,pc}
;;;459    /*-----------------------------------------------------------*/
                          ENDP

000152  0000              DCW      0x0000
                  |L12.340|
                          DCD      0xe000ed04
