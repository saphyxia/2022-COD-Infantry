; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\freertos_init.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\freertos_init.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\stm32LIB\inc -I..\stm32LIB\CMSIS\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\user\_Dsp\Include -I..\user\_Algorithms -I..\user\_Bsp -I..\user\_Device -I..\user\_Task -I..\system -I..\stm32LIB\CMSIS -I..\system -I..\FreeRTOS -I..\user -I.\RTE\_COD_Gimbal_Task -IC:\keil_v5_project\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM4 -D__FPU_PRESENT --omf_browse=.\objects\freertos_init.crf ..\FreeRTOS\FreeRTOS_Init.c]
                          THUMB

                          AREA ||i.Delay_init||, CODE, READONLY, ALIGN=2

                  Delay_init PROC
;;;12     //SYSCLK:系统时钟频率
;;;13     void Delay_init(u8 SYSCLK)
000000  b570              PUSH     {r4-r6,lr}
;;;14     {
000002  4604              MOV      r4,r0
;;;15     	u32 reload;
;;;16     	//SysTick频率为HCLK
;;;17      	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK); 
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       SysTick_CLKSourceConfig
;;;18     	fac_us=SYSCLK;							//不论是否使用OS,fac_us都需要使用
00000a  480c              LDR      r0,|L1.60|
00000c  7004              STRB     r4,[r0,#0]
;;;19     	reload=SYSCLK;							//每秒钟的计数次数 单位为M	   
00000e  4625              MOV      r5,r4
;;;20     	reload*=1000000/configTICK_RATE_HZ;		//根configTICK_RATE_HZ定溢出时间
000010  f44f707a          MOV      r0,#0x3e8
000014  4345              MULS     r5,r0,r5
;;;21     											//reload为24位寄存器,最大值:16777216,在168M下,约合0.0998s左右	
;;;22     	fac_ms=1000/configTICK_RATE_HZ;			//代表OS可以延时的最少单位	   
000016  2001              MOVS     r0,#1
000018  4909              LDR      r1,|L1.64|
00001a  8008              STRH     r0,[r1,#0]
;;;23     	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;//开启SYSTICK中断
00001c  f04f20e0          MOV      r0,#0xe000e000
000020  6900              LDR      r0,[r0,#0x10]
000022  f0400002          ORR      r0,r0,#2
000026  f04f21e0          MOV      r1,#0xe000e000
00002a  6108              STR      r0,[r1,#0x10]
;;;24     	SysTick->LOAD=reload; 					//每1/delay_ostickspersec秒中断一次	
00002c  4608              MOV      r0,r1
00002e  6145              STR      r5,[r0,#0x14]
;;;25     	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; //开启SYSTICK     
000030  6900              LDR      r0,[r0,#0x10]
000032  f0400001          ORR      r0,r0,#1
000036  6108              STR      r0,[r1,#0x10]
;;;26     }								    
000038  bd70              POP      {r4-r6,pc}
;;;27     
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      fac_us
                  |L1.64|
                          DCD      fac_ms

                          AREA ||i.FreeRTOS_Init||, CODE, READONLY, ALIGN=2

                  FreeRTOS_Init PROC
;;;140    /*  RTOS初始化，开启任务调度    */
;;;141    void FreeRTOS_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;142    {
;;;143    	/* 创建初始化任务 */
;;;144    	xTaskCreate((TaskFunction_t		)System_Start_Task,						// 任务函数
000002  4806              LDR      r0,|L2.28|
000004  2101              MOVS     r1,#1
000006  2300              MOVS     r3,#0
000008  2280              MOVS     r2,#0x80
00000a  e9cd1000          STRD     r1,r0,[sp,#0]
00000e  a104              ADR      r1,|L2.32|
000010  4808              LDR      r0,|L2.52|
000012  f7fffffe          BL       xTaskCreate
;;;145    							(const char*		)"System_Start_Task",		// 任务名称
;;;146    							(uint16_t			)System_START_STK_SIZE,		// 任务堆栈大小
;;;147    							(void*				)NULL,					    // 传递给任务函数的参数
;;;148    							(UBaseType_t		)System_START_TASK_PRIO,	// 任务优先级
;;;149    							(TaskHandle_t*		)&SystemStart_Task_Handler);	// 任务句柄
;;;150    	vTaskStartScheduler();	// 开启任务调度
000016  f7fffffe          BL       vTaskStartScheduler
;;;151    }
00001a  bd1c              POP      {r2-r4,pc}
;;;152    
                          ENDP

                  |L2.28|
                          DCD      SystemStart_Task_Handler
                  |L2.32|
000020  53797374          DCB      "System_Start_Task",0
000024  656d5f53
000028  74617274
00002c  5f546173
000030  6b00    
000032  00                DCB      0
000033  00                DCB      0
                  |L2.52|
                          DCD      System_Start_Task

                          AREA ||i.System_Start_Task||, CODE, READONLY, ALIGN=2

                  System_Start_Task PROC
;;;153    /**/
;;;154    void System_Start_Task(void *args)
000000  b51c              PUSH     {r2-r4,lr}
;;;155    {
000002  4604              MOV      r4,r0
;;;156        taskENTER_CRITICAL();//进入临界区
000004  f7fffffe          BL       vPortEnterCritical
;;;157    
;;;158        /* 创建系统状态机任务 */
;;;159    	xTaskCreate((TaskFunction_t		)SYSTEMSTATE_TASK,						 // 任务函数
000008  4828              LDR      r0,|L3.172|
00000a  2101              MOVS     r1,#1
00000c  2300              MOVS     r3,#0
00000e  020a              LSLS     r2,r1,#8
000010  e9cd1000          STRD     r1,r0,[sp,#0]
000014  a126              ADR      r1,|L3.176|
000016  482b              LDR      r0,|L3.196|
000018  f7fffffe          BL       xTaskCreate
;;;160    							(const char*		)"SYSTEMSTATE_TASK",		 // 任务名称
;;;161    							(uint16_t			)SYSTEMSTATE_STK_SIZE,		 // 任务堆栈大小
;;;162    							(void*				)NULL,						 // 传递给任务函数的参数
;;;163    							(UBaseType_t		)SYSTEMSTATE_TASK_PRIO,	     // 任务优先级
;;;164    							(TaskHandle_t*		)&SYSTEMSTATE_Task_Handler); // 任务句柄
;;;165    
;;;166        /* 创建云台任务 */
;;;167        xTaskCreate((TaskFunction_t		)GIMBAL_TASK,						 
00001c  482a              LDR      r0,|L3.200|
00001e  2101              MOVS     r1,#1
000020  2300              MOVS     r3,#0
000022  024a              LSLS     r2,r1,#9
000024  e9cd1000          STRD     r1,r0,[sp,#0]
000028  a128              ADR      r1,|L3.204|
00002a  482b              LDR      r0,|L3.216|
00002c  f7fffffe          BL       xTaskCreate
;;;168    							(const char*		)"GIMBAL_TASK",		 
;;;169    							(uint16_t			)GIMBAL_STK_SIZE,		 
;;;170    							(void*				)NULL,						 
;;;171    							(UBaseType_t		)GIMBAL_TASK_PRIO,	     
;;;172    							(TaskHandle_t*		)&GIMBAL_Task_Handler); 
;;;173    
;;;174        /* 创建云台状态更新任务 */
;;;175        xTaskCreate((TaskFunction_t		)STATE_TASK,						 
000030  482a              LDR      r0,|L3.220|
000032  2103              MOVS     r1,#3
000034  2300              MOVS     r3,#0
000036  f44f6280          MOV      r2,#0x400
00003a  e9cd1000          STRD     r1,r0,[sp,#0]
00003e  a128              ADR      r1,|L3.224|
000040  482a              LDR      r0,|L3.236|
000042  f7fffffe          BL       xTaskCreate
;;;176    							(const char*		)"STATE_TASK",		 
;;;177    							(uint16_t			)STATE_STK_SIZE,		 
;;;178    							(void*				)NULL,						 
;;;179    							(UBaseType_t		)STATE_TASK_PRIO,	     
;;;180    							(TaskHandle_t*		)&STATE_Task_Handler); 
;;;181    
;;;182        /* 创建陀螺仪数据处理任务 */
;;;183        xTaskCreate((TaskFunction_t		)IMU_TASK,						 
000046  482a              LDR      r0,|L3.240|
000048  2102              MOVS     r1,#2
00004a  2300              MOVS     r3,#0
00004c  020a              LSLS     r2,r1,#8
00004e  e9cd1000          STRD     r1,r0,[sp,#0]
000052  a128              ADR      r1,|L3.244|
000054  482a              LDR      r0,|L3.256|
000056  f7fffffe          BL       xTaskCreate
;;;184    							(const char*		)"IMU_TASK",		 
;;;185    							(uint16_t			)IMU_STK_SIZE,		 
;;;186    							(void*				)NULL,						 
;;;187    							(UBaseType_t		)IMU_TASK_PRIO,	     
;;;188    							(TaskHandle_t*		)&IMU_Task_Handler); 
;;;189    
;;;190        /* 创建视觉数据处理任务 */
;;;191        xTaskCreate((TaskFunction_t		)VISION_TASK,						 
00005a  482a              LDR      r0,|L3.260|
00005c  2102              MOVS     r1,#2
00005e  2300              MOVS     r3,#0
000060  020a              LSLS     r2,r1,#8
000062  e9cd1000          STRD     r1,r0,[sp,#0]
000066  a128              ADR      r1,|L3.264|
000068  482a              LDR      r0,|L3.276|
00006a  f7fffffe          BL       xTaskCreate
;;;192    							(const char*		)"VISION_TASK",		 
;;;193    							(uint16_t			)VISION_STK_SIZE,		 
;;;194    							(void*				)NULL,						 
;;;195    							(UBaseType_t		)VISION_TASK_PRIO,	     
;;;196    							(TaskHandle_t*		)&VISION_Task_Handler); 
;;;197    
;;;198        /* 创建遥控器接收任务 */
;;;199        xTaskCreate((TaskFunction_t		)DBUS_TASK,						 
00006e  482a              LDR      r0,|L3.280|
000070  2102              MOVS     r1,#2
000072  2300              MOVS     r3,#0
000074  01ca              LSLS     r2,r1,#7
000076  e9cd1000          STRD     r1,r0,[sp,#0]
00007a  a128              ADR      r1,|L3.284|
00007c  482a              LDR      r0,|L3.296|
00007e  f7fffffe          BL       xTaskCreate
;;;200    							(const char*		)"DBUS_TASK",		 
;;;201    							(uint16_t			)DBUS_STK_SIZE,		 
;;;202    							(void*				)NULL,						 
;;;203    							(UBaseType_t		)DBUS_TASK_PRIO,	     
;;;204    							(TaskHandle_t*		)&DBUS_Task_Handler); 
;;;205    
;;;206        /* 创建发射任务 */
;;;207        xTaskCreate((TaskFunction_t		)SHOOT_TASK,						 
000082  482a              LDR      r0,|L3.300|
000084  2101              MOVS     r1,#1
000086  2300              MOVS     r3,#0
000088  020a              LSLS     r2,r1,#8
00008a  e9cd1000          STRD     r1,r0,[sp,#0]
00008e  a128              ADR      r1,|L3.304|
000090  482a              LDR      r0,|L3.316|
000092  f7fffffe          BL       xTaskCreate
;;;208    							(const char*		)"SHOOT_TASK",		 
;;;209    							(uint16_t			)SHOOT_STK_SIZE,		 
;;;210    							(void*				)NULL,						 
;;;211    							(UBaseType_t		)SHOOT_TASK_PRIO,	     
;;;212    							(TaskHandle_t*		)&SHOOT_Task_Handler); 
;;;213    
;;;214        /* 创建弹舱盖任务 */
;;;215        xTaskCreate((TaskFunction_t		)COVER_TASK,						 
000096  482a              LDR      r0,|L3.320|
000098  2101              MOVS     r1,#1
00009a  2300              MOVS     r3,#0
00009c  020a              LSLS     r2,r1,#8
00009e  e9cd1000          STRD     r1,r0,[sp,#0]
0000a2  a128              ADR      r1,|L3.324|
0000a4  482a              LDR      r0,|L3.336|
0000a6  f7fffffe          BL       xTaskCreate
;;;216    							(const char*		)"COVER_TASK",		 
;;;217    							(uint16_t			)COVER_STK_SIZE,		 
;;;218    							(void*				)NULL,						 
;;;219    							(UBaseType_t		)COVER_TASK_PRIO,	     
;;;220    							(TaskHandle_t*		)&COVER_Task_Handler);                             
;;;221    
;;;222    }
0000aa  bd1c              POP      {r2-r4,pc}
;;;223    
                          ENDP

                  |L3.172|
                          DCD      SYSTEMSTATE_Task_Handler
                  |L3.176|
0000b0  53595354          DCB      "SYSTEMSTATE_TASK",0
0000b4  454d5354
0000b8  4154455f
0000bc  5441534b
0000c0  00      
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L3.196|
                          DCD      SYSTEMSTATE_TASK
                  |L3.200|
                          DCD      GIMBAL_Task_Handler
                  |L3.204|
0000cc  47494d42          DCB      "GIMBAL_TASK",0
0000d0  414c5f54
0000d4  41534b00
                  |L3.216|
                          DCD      GIMBAL_TASK
                  |L3.220|
                          DCD      STATE_Task_Handler
                  |L3.224|
0000e0  53544154          DCB      "STATE_TASK",0
0000e4  455f5441
0000e8  534b00  
0000eb  00                DCB      0
                  |L3.236|
                          DCD      STATE_TASK
                  |L3.240|
                          DCD      IMU_Task_Handler
                  |L3.244|
0000f4  494d555f          DCB      "IMU_TASK",0
0000f8  5441534b
0000fc  00      
0000fd  00                DCB      0
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L3.256|
                          DCD      IMU_TASK
                  |L3.260|
                          DCD      VISION_Task_Handler
                  |L3.264|
000108  56495349          DCB      "VISION_TASK",0
00010c  4f4e5f54
000110  41534b00
                  |L3.276|
                          DCD      VISION_TASK
                  |L3.280|
                          DCD      DBUS_Task_Handler
                  |L3.284|
00011c  44425553          DCB      "DBUS_TASK",0
000120  5f544153
000124  4b00    
000126  00                DCB      0
000127  00                DCB      0
                  |L3.296|
                          DCD      DBUS_TASK
                  |L3.300|
                          DCD      SHOOT_Task_Handler
                  |L3.304|
000130  53484f4f          DCB      "SHOOT_TASK",0
000134  545f5441
000138  534b00  
00013b  00                DCB      0
                  |L3.316|
                          DCD      SHOOT_TASK
                  |L3.320|
                          DCD      COVER_Task_Handler
                  |L3.324|
000144  434f5645          DCB      "COVER_TASK",0
000148  525f5441
00014c  534b00  
00014f  00                DCB      0
                  |L3.336|
                          DCD      COVER_TASK

                          AREA ||i.delay_ms||, CODE, READONLY, ALIGN=2

                  delay_ms PROC
;;;53     //nms:0~65535
;;;54     void delay_ms(u32 nms)
000000  b570              PUSH     {r4-r6,lr}
;;;55     { 
000002  4604              MOV      r4,r0
;;;56     	if(xTaskGetSchedulerState()!=taskSCHEDULER_NOT_STARTED)//系统已经运行
000004  f7fffffe          BL       xTaskGetSchedulerState
000008  2801              CMP      r0,#1
00000a  d010              BEQ      |L4.46|
;;;57     	{ 
;;;58     		if(nms>=fac_ms) //延时的时间大于 OS 的最少时间周期
00000c  480b              LDR      r0,|L4.60|
00000e  8800              LDRH     r0,[r0,#0]  ; fac_ms
000010  4284              CMP      r4,r0
000012  d306              BCC      |L4.34|
;;;59     		{
;;;60     			vTaskDelay(nms/fac_ms);  //FreeRTOS 延时
000014  4809              LDR      r0,|L4.60|
000016  8800              LDRH     r0,[r0,#0]  ; fac_ms
000018  fbb4f5f0          UDIV     r5,r4,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       vTaskDelay
                  |L4.34|
;;;61     		}
;;;62     		nms%=fac_ms;  //OS 已经无法提供这么小的延时了,
000022  4806              LDR      r0,|L4.60|
000024  8800              LDRH     r0,[r0,#0]  ; fac_ms
000026  fbb4f1f0          UDIV     r1,r4,r0
00002a  fb004411          MLS      r4,r0,r1,r4
                  |L4.46|
;;;63     		//采用普通方式延时
;;;64     	}
;;;65     	delay_us((u32)(nms*1000)); //普通方式延时
00002e  f44f717a          MOV      r1,#0x3e8
000032  fb04f001          MUL      r0,r4,r1
000036  f7fffffe          BL       delay_us
;;;66     }
00003a  bd70              POP      {r4-r6,pc}
;;;67     //延时 nms,不会引起任务调度
                          ENDP

                  |L4.60|
                          DCD      fac_ms

                          AREA ||i.delay_us||, CODE, READONLY, ALIGN=2

                  delay_us PROC
;;;31     //nus:0~204522252(最大值即2^32/fac_us@fac_us=168)	    	ffa							   
;;;32     void delay_us(u32 nus)
000000  b570              PUSH     {r4-r6,lr}
;;;33     { 
000002  4603              MOV      r3,r0
;;;34     	u32 ticks;
;;;35     	u32 told,tnow,tcnt=0;
000004  2200              MOVS     r2,#0
;;;36     	u32 reload=SysTick->LOAD;  //LOAD 的值
000006  f04f26e0          MOV      r6,#0xe000e000
00000a  6975              LDR      r5,[r6,#0x14]
;;;37     	ticks=nus*fac_us; //需要的节拍数
00000c  4e0d              LDR      r6,|L5.68|
00000e  7836              LDRB     r6,[r6,#0]  ; fac_us
000010  fb03f406          MUL      r4,r3,r6
;;;38     	told=SysTick->VAL; //刚进入时的计数器值
000014  f04f26e0          MOV      r6,#0xe000e000
000018  69b1              LDR      r1,[r6,#0x18]
;;;39     	while(1)
00001a  e010              B        |L5.62|
                  |L5.28|
;;;40     	{
;;;41     		tnow=SysTick->VAL; 
00001c  f04f26e0          MOV      r6,#0xe000e000
000020  69b0              LDR      r0,[r6,#0x18]
;;;42     		if(tnow!=told)
000022  4288              CMP      r0,r1
000024  d00b              BEQ      |L5.62|
;;;43     		{ 
;;;44     			//这里注意一下 SYSTICK 是一个递减的计数器就可以了.
;;;45     			if(tnow<told)tcnt+=told-tnow; 
000026  4288              CMP      r0,r1
000028  d202              BCS      |L5.48|
00002a  1a0e              SUBS     r6,r1,r0
00002c  4432              ADD      r2,r2,r6
00002e  e002              B        |L5.54|
                  |L5.48|
;;;46     			else tcnt+=reload-tnow+told;
000030  1a2e              SUBS     r6,r5,r0
000032  440e              ADD      r6,r6,r1
000034  4432              ADD      r2,r2,r6
                  |L5.54|
;;;47     			told=tnow;
000036  4601              MOV      r1,r0
;;;48     			if(tcnt>=ticks)break;  //时间超过/等于要延迟的时间,则退出.
000038  42a2              CMP      r2,r4
00003a  d300              BCC      |L5.62|
00003c  e000              B        |L5.64|
                  |L5.62|
00003e  e7ed              B        |L5.28|
                  |L5.64|
000040  bf00              NOP      
;;;49     	}
;;;50     }; 
;;;51     }//延时nms
000042  bd70              POP      {r4-r6,pc}
;;;52     //nms:要延时的ms数
                          ENDP

                  |L5.68|
                          DCD      fac_us

                          AREA ||i.delay_xms||, CODE, READONLY, ALIGN=1

                  delay_xms PROC
;;;68     //nms:要延时的 ms 数
;;;69     void delay_xms(u32 nms)
000000  b530              PUSH     {r4,r5,lr}
;;;70     {
000002  4604              MOV      r4,r0
;;;71     	u32 i;
;;;72     	for(i=0;i<nms;i++) delay_us(1000);
000004  2500              MOVS     r5,#0
000006  e004              B        |L6.18|
                  |L6.8|
000008  f44f707a          MOV      r0,#0x3e8
00000c  f7fffffe          BL       delay_us
000010  1c6d              ADDS     r5,r5,#1
                  |L6.18|
000012  42a5              CMP      r5,r4
000014  d3f8              BCC      |L6.8|
;;;73     }
000016  bd30              POP      {r4,r5,pc}
;;;74     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  fac_us
000000  0000              DCB      0x00,0x00
                  fac_ms
000002  0000              DCW      0x0000
                  SystemStart_Task_Handler
                          DCD      0x00000000
                  SYSTEMSTATE_Task_Handler
                          DCD      0x00000000
                  GIMBAL_Task_Handler
                          DCD      0x00000000
                  STATE_Task_Handler
                          DCD      0x00000000
                  DBUS_Task_Handler
                          DCD      0x00000000
                  IMU_Task_Handler
                          DCD      0x00000000
                  VISION_Task_Handler
                          DCD      0x00000000
                  SHOOT_Task_Handler
                          DCD      0x00000000
                  COVER_Task_Handler
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\FreeRTOS\\FreeRTOS_Init.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_FreeRTOS_Init_c_b9f4c699____REV16|
#line 388 "..\\stm32LIB\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_FreeRTOS_Init_c_b9f4c699____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_FreeRTOS_Init_c_b9f4c699____REVSH|
#line 402
|__asm___15_FreeRTOS_Init_c_b9f4c699____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_FreeRTOS_Init_c_b9f4c699____RRX|
#line 587
|__asm___15_FreeRTOS_Init_c_b9f4c699____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
