; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\stm32f4xx_rcc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_rcc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\stm32LIB\inc -I..\stm32LIB\CMSIS\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\user\_Dsp\Include -I..\user\_Algorithms -I..\user\_Bsp -I..\user\_Device -I..\user\_Task -I..\system -I..\stm32LIB\CMSIS -I..\system -I..\FreeRTOS -I..\user -I.\RTE\_COD_Gimbal_Task -IC:\keil_v5_project\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM4 -D__FPU_PRESENT --omf_browse=.\objects\stm32f4xx_rcc.crf ..\stm32LIB\src\stm32f4xx_rcc.c]
                          THUMB

                          AREA ||i.RCC_AHB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphClockCmd PROC
;;;1459     */
;;;1460   void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L1.14|
;;;1461   {
;;;1462     /* Check the parameters */
;;;1463     assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
;;;1464   
;;;1465     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1466     if (NewState != DISABLE)
;;;1467     {
;;;1468       RCC->AHB1ENR |= RCC_AHB1Periph;
000002  4a06              LDR      r2,|L1.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L1.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L1.24|
                  |L1.14|
;;;1469     }
;;;1470     else
;;;1471     {
;;;1472       RCC->AHB1ENR &= ~RCC_AHB1Periph;
00000e  4a03              LDR      r2,|L1.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L1.28|
000016  601a              STR      r2,[r3,#0]
                  |L1.24|
;;;1473     }
;;;1474   }
000018  4770              BX       lr
;;;1475   
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      0x40023830

                          AREA ||i.RCC_AHB1PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphClockLPModeCmd PROC
;;;1851     */
;;;1852   void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L2.14|
;;;1853   {
;;;1854     /* Check the parameters */
;;;1855     assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
;;;1856     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1857     if (NewState != DISABLE)
;;;1858     {
;;;1859       RCC->AHB1LPENR |= RCC_AHB1Periph;
000002  4a06              LDR      r2,|L2.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L2.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L2.24|
                  |L2.14|
;;;1860     }
;;;1861     else
;;;1862     {
;;;1863       RCC->AHB1LPENR &= ~RCC_AHB1Periph;
00000e  4a03              LDR      r2,|L2.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L2.28|
000016  601a              STR      r2,[r3,#0]
                  |L2.24|
;;;1864     }
;;;1865   }
000018  4770              BX       lr
;;;1866   
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x40023850

                          AREA ||i.RCC_AHB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB1PeriphResetCmd PROC
;;;1658     */
;;;1659   void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L3.14|
;;;1660   {
;;;1661     /* Check the parameters */
;;;1662     assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
;;;1663     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1664   
;;;1665     if (NewState != DISABLE)
;;;1666     {
;;;1667       RCC->AHB1RSTR |= RCC_AHB1Periph;
000002  4a06              LDR      r2,|L3.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L3.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L3.24|
                  |L3.14|
;;;1668     }
;;;1669     else
;;;1670     {
;;;1671       RCC->AHB1RSTR &= ~RCC_AHB1Periph;
00000e  4a03              LDR      r2,|L3.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L3.28|
000016  601a              STR      r2,[r3,#0]
                  |L3.24|
;;;1672     }
;;;1673   }
000018  4770              BX       lr
;;;1674   
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40023810

                          AREA ||i.RCC_AHB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphClockCmd PROC
;;;1491     */
;;;1492   void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L4.14|
;;;1493   {
;;;1494     /* Check the parameters */
;;;1495     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1496     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1497   
;;;1498     if (NewState != DISABLE)
;;;1499     {
;;;1500       RCC->AHB2ENR |= RCC_AHB2Periph;
000002  4a06              LDR      r2,|L4.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L4.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L4.24|
                  |L4.14|
;;;1501     }
;;;1502     else
;;;1503     {
;;;1504       RCC->AHB2ENR &= ~RCC_AHB2Periph;
00000e  4a03              LDR      r2,|L4.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L4.28|
000016  601a              STR      r2,[r3,#0]
                  |L4.24|
;;;1505     }
;;;1506   }
000018  4770              BX       lr
;;;1507   
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x40023834

                          AREA ||i.RCC_AHB2PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphClockLPModeCmd PROC
;;;1883     */
;;;1884   void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L5.14|
;;;1885   {
;;;1886     /* Check the parameters */
;;;1887     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1888     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1889     if (NewState != DISABLE)
;;;1890     {
;;;1891       RCC->AHB2LPENR |= RCC_AHB2Periph;
000002  4a06              LDR      r2,|L5.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L5.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L5.24|
                  |L5.14|
;;;1892     }
;;;1893     else
;;;1894     {
;;;1895       RCC->AHB2LPENR &= ~RCC_AHB2Periph;
00000e  4a03              LDR      r2,|L5.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L5.28|
000016  601a              STR      r2,[r3,#0]
                  |L5.24|
;;;1896     }
;;;1897   }
000018  4770              BX       lr
;;;1898   
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40023854

                          AREA ||i.RCC_AHB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB2PeriphResetCmd PROC
;;;1687     */
;;;1688   void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L6.14|
;;;1689   {
;;;1690     /* Check the parameters */
;;;1691     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1692     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1693   
;;;1694     if (NewState != DISABLE)
;;;1695     {
;;;1696       RCC->AHB2RSTR |= RCC_AHB2Periph;
000002  4a06              LDR      r2,|L6.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L6.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L6.24|
                  |L6.14|
;;;1697     }
;;;1698     else
;;;1699     {
;;;1700       RCC->AHB2RSTR &= ~RCC_AHB2Periph;
00000e  4a03              LDR      r2,|L6.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L6.28|
000016  601a              STR      r2,[r3,#0]
                  |L6.24|
;;;1701     }
;;;1702   }
000018  4770              BX       lr
;;;1703   
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0x40023814

                          AREA ||i.RCC_AHB3PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphClockCmd PROC
;;;1519     */
;;;1520   void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L7.14|
;;;1521   {
;;;1522     /* Check the parameters */
;;;1523     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
;;;1524     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1525   
;;;1526     if (NewState != DISABLE)
;;;1527     {
;;;1528       RCC->AHB3ENR |= RCC_AHB3Periph;
000002  4a06              LDR      r2,|L7.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L7.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L7.24|
                  |L7.14|
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       RCC->AHB3ENR &= ~RCC_AHB3Periph;
00000e  4a03              LDR      r2,|L7.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L7.28|
000016  601a              STR      r2,[r3,#0]
                  |L7.24|
;;;1533     }
;;;1534   }
000018  4770              BX       lr
;;;1535   
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      0x40023838

                          AREA ||i.RCC_AHB3PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphClockLPModeCmd PROC
;;;1911     */
;;;1912   void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L8.14|
;;;1913   {
;;;1914     /* Check the parameters */
;;;1915     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
;;;1916     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1917     if (NewState != DISABLE)
;;;1918     {
;;;1919       RCC->AHB3LPENR |= RCC_AHB3Periph;
000002  4a06              LDR      r2,|L8.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L8.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L8.24|
                  |L8.14|
;;;1920     }
;;;1921     else
;;;1922     {
;;;1923       RCC->AHB3LPENR &= ~RCC_AHB3Periph;
00000e  4a03              LDR      r2,|L8.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L8.28|
000016  601a              STR      r2,[r3,#0]
                  |L8.24|
;;;1924     }
;;;1925   }
000018  4770              BX       lr
;;;1926   
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x40023858

                          AREA ||i.RCC_AHB3PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHB3PeriphResetCmd PROC
;;;1712     */
;;;1713   void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L9.14|
;;;1714   {
;;;1715     /* Check the parameters */
;;;1716     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
;;;1717     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1718   
;;;1719     if (NewState != DISABLE)
;;;1720     {
;;;1721       RCC->AHB3RSTR |= RCC_AHB3Periph;
000002  4a06              LDR      r2,|L9.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L9.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L9.24|
                  |L9.14|
;;;1722     }
;;;1723     else
;;;1724     {
;;;1725       RCC->AHB3RSTR &= ~RCC_AHB3Periph;
00000e  4a03              LDR      r2,|L9.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L9.28|
000016  601a              STR      r2,[r3,#0]
                  |L9.24|
;;;1726     }
;;;1727   }
000018  4770              BX       lr
;;;1728   
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x40023818

                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockCmd PROC
;;;1571     */
;;;1572   void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L10.14|
;;;1573   {
;;;1574     /* Check the parameters */
;;;1575     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
;;;1576     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1577   
;;;1578     if (NewState != DISABLE)
;;;1579     {
;;;1580       RCC->APB1ENR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L10.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L10.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L10.24|
                  |L10.14|
;;;1581     }
;;;1582     else
;;;1583     {
;;;1584       RCC->APB1ENR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L10.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L10.28|
000016  601a              STR      r2,[r3,#0]
                  |L10.24|
;;;1585     }
;;;1586   }
000018  4770              BX       lr
;;;1587   
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x40023840

                          AREA ||i.RCC_APB1PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockLPModeCmd PROC
;;;1963     */
;;;1964   void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L11.14|
;;;1965   {
;;;1966     /* Check the parameters */
;;;1967     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1968     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1969     if (NewState != DISABLE)
;;;1970     {
;;;1971       RCC->APB1LPENR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L11.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L11.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L11.24|
                  |L11.14|
;;;1972     }
;;;1973     else
;;;1974     {
;;;1975       RCC->APB1LPENR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L11.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L11.28|
000016  601a              STR      r2,[r3,#0]
                  |L11.24|
;;;1976     }
;;;1977   }
000018  4770              BX       lr
;;;1978   
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0x40023860

                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphResetCmd PROC
;;;1761     */
;;;1762   void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L12.14|
;;;1763   {
;;;1764     /* Check the parameters */
;;;1765     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1766     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1767     if (NewState != DISABLE)
;;;1768     {
;;;1769       RCC->APB1RSTR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L12.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L12.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L12.24|
                  |L12.14|
;;;1770     }
;;;1771     else
;;;1772     {
;;;1773       RCC->APB1RSTR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L12.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L12.28|
000016  601a              STR      r2,[r3,#0]
                  |L12.24|
;;;1774     }
;;;1775   }
000018  4770              BX       lr
;;;1776   
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x40023820

                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockCmd PROC
;;;1616     */
;;;1617   void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L13.14|
;;;1618   {
;;;1619     /* Check the parameters */
;;;1620     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1621     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1622   
;;;1623     if (NewState != DISABLE)
;;;1624     {
;;;1625       RCC->APB2ENR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L13.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L13.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L13.24|
                  |L13.14|
;;;1626     }
;;;1627     else
;;;1628     {
;;;1629       RCC->APB2ENR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L13.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L13.28|
000016  601a              STR      r2,[r3,#0]
                  |L13.24|
;;;1630     }
;;;1631   }
000018  4770              BX       lr
;;;1632   
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      0x40023844

                          AREA ||i.RCC_APB2PeriphClockLPModeCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockLPModeCmd PROC
;;;2008     */
;;;2009   void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L14.14|
;;;2010   {
;;;2011     /* Check the parameters */
;;;2012     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;2013     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2014     if (NewState != DISABLE)
;;;2015     {
;;;2016       RCC->APB2LPENR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L14.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L14.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L14.24|
                  |L14.14|
;;;2017     }
;;;2018     else
;;;2019     {
;;;2020       RCC->APB2LPENR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L14.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L14.28|
000016  601a              STR      r2,[r3,#0]
                  |L14.24|
;;;2021     }
;;;2022   }
000018  4770              BX       lr
;;;2023   
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      0x40023864

                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphResetCmd PROC
;;;1802     */
;;;1803   void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L15.14|
;;;1804   {
;;;1805     /* Check the parameters */
;;;1806     assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
;;;1807     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1808     if (NewState != DISABLE)
;;;1809     {
;;;1810       RCC->APB2RSTR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L15.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L15.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L15.24|
                  |L15.14|
;;;1811     }
;;;1812     else
;;;1813     {
;;;1814       RCC->APB2RSTR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L15.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L15.28|
000016  601a              STR      r2,[r3,#0]
                  |L15.24|
;;;1815     }
;;;1816   }
000018  4770              BX       lr
;;;1817   
                          ENDP

00001a  0000              DCW      0x0000
                  |L15.28|
                          DCD      0x40023824

                          AREA ||i.RCC_AdjustHSICalibrationValue||, CODE, READONLY, ALIGN=2

                  RCC_AdjustHSICalibrationValue PROC
;;;318      */
;;;319    void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
000000  4601              MOV      r1,r0
;;;320    {
;;;321      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;322      /* Check the parameters */
;;;323      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;324    
;;;325      tmpreg = RCC->CR;
000004  4a03              LDR      r2,|L16.20|
000006  6810              LDR      r0,[r2,#0]
;;;326    
;;;327      /* Clear HSITRIM[4:0] bits */
;;;328      tmpreg &= ~RCC_CR_HSITRIM;
000008  f02000f8          BIC      r0,r0,#0xf8
;;;329    
;;;330      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;331      tmpreg |= (uint32_t)HSICalibrationValue << 3;
00000c  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;332    
;;;333      /* Store the new value */
;;;334      RCC->CR = tmpreg;
000010  6010              STR      r0,[r2,#0]
;;;335    }
000012  4770              BX       lr
;;;336    
                          ENDP

                  |L16.20|
                          DCD      0x40023800

                          AREA ||i.RCC_BackupResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_BackupResetCmd PROC
;;;1204     */
;;;1205   void RCC_BackupResetCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L17.8|
;;;1206   {
;;;1207     /* Check the parameters */
;;;1208     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1209     *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;1210   }
000004  4770              BX       lr
;;;1211   
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x42470e40

                          AREA ||i.RCC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RCC_ClearFlag PROC
;;;2136     */
;;;2137   void RCC_ClearFlag(void)
000000  4803              LDR      r0,|L18.16|
;;;2138   {
;;;2139     /* Set RMVF bit to clear the reset flags */
;;;2140     RCC->CSR |= RCC_CSR_RMVF;
000002  6800              LDR      r0,[r0,#0]
000004  f0407080          ORR      r0,r0,#0x1000000
000008  4901              LDR      r1,|L18.16|
00000a  6008              STR      r0,[r1,#0]
;;;2141   }
00000c  4770              BX       lr
;;;2142   
                          ENDP

00000e  0000              DCW      0x0000
                  |L18.16|
                          DCD      0x40023874

                          AREA ||i.RCC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RCC_ClearITPendingBit PROC
;;;2190     */
;;;2191   void RCC_ClearITPendingBit(uint8_t RCC_IT)
000000  4901              LDR      r1,|L19.8|
;;;2192   {
;;;2193     /* Check the parameters */
;;;2194     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;2195   
;;;2196     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;2197        pending bits */
;;;2198     *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
000002  7008              STRB     r0,[r1,#0]
;;;2199   }
000004  4770              BX       lr
;;;2200   
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      0x4002380e

                          AREA ||i.RCC_ClockSecuritySystemCmd||, CODE, READONLY, ALIGN=2

                  RCC_ClockSecuritySystemCmd PROC
;;;633      */
;;;634    void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L20.8|
;;;635    {
;;;636      /* Check the parameters */
;;;637      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;638      *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
000002  64c8              STR      r0,[r1,#0x4c]
;;;639    }
000004  4770              BX       lr
;;;640    
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      0x42470000

                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;212      */
;;;213    void RCC_DeInit(void)
000000  4814              LDR      r0,|L21.84|
;;;214    {
;;;215      /* Set HSION bit */
;;;216      RCC->CR |= (uint32_t)0x00000001;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4912              LDR      r1,|L21.84|
00000a  6008              STR      r0,[r1,#0]
;;;217    
;;;218      /* Reset CFGR register */
;;;219      RCC->CFGR = 0x00000000;
00000c  2000              MOVS     r0,#0
00000e  4911              LDR      r1,|L21.84|
000010  3108              ADDS     r1,r1,#8
000012  6008              STR      r0,[r1,#0]
;;;220    
;;;221      /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
;;;222      RCC->CR &= (uint32_t)0xEAF6FFFF;
000014  480f              LDR      r0,|L21.84|
000016  6800              LDR      r0,[r0,#0]
000018  490f              LDR      r1,|L21.88|
00001a  4008              ANDS     r0,r0,r1
00001c  490d              LDR      r1,|L21.84|
00001e  6008              STR      r0,[r1,#0]
;;;223    
;;;224      /* Reset PLLCFGR register */
;;;225      RCC->PLLCFGR = 0x24003010;
000020  480e              LDR      r0,|L21.92|
000022  1d09              ADDS     r1,r1,#4
000024  6008              STR      r0,[r1,#0]
;;;226    
;;;227      /* Reset PLLI2SCFGR register */
;;;228      RCC->PLLI2SCFGR = 0x20003000;
000026  480e              LDR      r0,|L21.96|
000028  490a              LDR      r1,|L21.84|
00002a  3184              ADDS     r1,r1,#0x84
00002c  6008              STR      r0,[r1,#0]
;;;229    
;;;230      /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
;;;231      RCC->PLLSAICFGR = 0x24003000;
00002e  480b              LDR      r0,|L21.92|
000030  3810              SUBS     r0,r0,#0x10
000032  1d09              ADDS     r1,r1,#4
000034  6008              STR      r0,[r1,#0]
;;;232     
;;;233      /* Reset HSEBYP bit */
;;;234      RCC->CR &= (uint32_t)0xFFFBFFFF;
000036  4807              LDR      r0,|L21.84|
000038  6800              LDR      r0,[r0,#0]
00003a  f4202080          BIC      r0,r0,#0x40000
00003e  4905              LDR      r1,|L21.84|
000040  6008              STR      r0,[r1,#0]
;;;235    
;;;236      /* Disable all interrupts */
;;;237      RCC->CIR = 0x00000000;
000042  2000              MOVS     r0,#0
000044  4903              LDR      r1,|L21.84|
000046  310c              ADDS     r1,r1,#0xc
000048  6008              STR      r0,[r1,#0]
;;;238    
;;;239      /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
;;;240      RCC->DCKCFGR = 0x00000000; 
00004a  4902              LDR      r1,|L21.84|
00004c  318c              ADDS     r1,r1,#0x8c
00004e  6008              STR      r0,[r1,#0]
;;;241    
;;;242    }
000050  4770              BX       lr
;;;243    
                          ENDP

000052  0000              DCW      0x0000
                  |L21.84|
                          DCD      0x40023800
                  |L21.88|
                          DCD      0xeaf6ffff
                  |L21.92|
                          DCD      0x24003010
                  |L21.96|
                          DCD      0x20003000

                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2

                  RCC_GetClocksFreq PROC
;;;1030     */
;;;1031   void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1032   {
;;;1033     uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2400              MOVS     r4,#0
000008  2502              MOVS     r5,#2
00000a  2600              MOVS     r6,#0
00000c  2302              MOVS     r3,#2
;;;1034   
;;;1035     /* Get SYSCLK source -------------------------------------------------------*/
;;;1036     tmp = RCC->CFGR & RCC_CFGR_SWS;
00000e  4f32              LDR      r7,|L22.216|
000010  683f              LDR      r7,[r7,#0]
000012  f007010c          AND      r1,r7,#0xc
;;;1037   
;;;1038     switch (tmp)
000016  b121              CBZ      r1,|L22.34|
000018  2904              CMP      r1,#4
00001a  d005              BEQ      |L22.40|
00001c  2908              CMP      r1,#8
00001e  d137              BNE      |L22.144|
000020  e005              B        |L22.46|
                  |L22.34|
;;;1039     {
;;;1040       case 0x00:  /* HSI used as system clock source */
;;;1041         RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
000022  4f2e              LDR      r7,|L22.220|
000024  6007              STR      r7,[r0,#0]
;;;1042         break;
000026  e036              B        |L22.150|
                  |L22.40|
;;;1043       case 0x04:  /* HSE used as system clock  source */
;;;1044         RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
000028  4f2d              LDR      r7,|L22.224|
00002a  6007              STR      r7,[r0,#0]
;;;1045         break;
00002c  e033              B        |L22.150|
                  |L22.46|
;;;1046       case 0x08:  /* PLL used as system clock  source */
;;;1047   
;;;1048         /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;1049            SYSCLK = PLL_VCO / PLLP
;;;1050            */    
;;;1051         pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
00002e  4f2a              LDR      r7,|L22.216|
000030  1f3f              SUBS     r7,r7,#4
000032  683f              LDR      r7,[r7,#0]
000034  f3c75680          UBFX     r6,r7,#22,#1
;;;1052         pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
000038  4f27              LDR      r7,|L22.216|
00003a  1f3f              SUBS     r7,r7,#4
00003c  683f              LDR      r7,[r7,#0]
00003e  f007033f          AND      r3,r7,#0x3f
;;;1053         
;;;1054         if (pllsource != 0)
000042  b16e              CBZ      r6,|L22.96|
;;;1055         {
;;;1056           /* HSE used as PLL clock source */
;;;1057           pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000044  4f26              LDR      r7,|L22.224|
000046  fbb7f7f3          UDIV     r7,r7,r3
00004a  f8dfc08c          LDR      r12,|L22.216|
00004e  f1ac0c04          SUB      r12,r12,#4
000052  f8dcc000          LDR      r12,[r12,#0]
000056  f3cc1c88          UBFX     r12,r12,#6,#9
00005a  fb07f40c          MUL      r4,r7,r12
00005e  e00c              B        |L22.122|
                  |L22.96|
;;;1058         }
;;;1059         else
;;;1060         {
;;;1061           /* HSI used as PLL clock source */
;;;1062           pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
000060  4f1e              LDR      r7,|L22.220|
000062  fbb7f7f3          UDIV     r7,r7,r3
000066  f8dfc070          LDR      r12,|L22.216|
00006a  f1ac0c04          SUB      r12,r12,#4
00006e  f8dcc000          LDR      r12,[r12,#0]
000072  f3cc1c88          UBFX     r12,r12,#6,#9
000076  fb07f40c          MUL      r4,r7,r12
                  |L22.122|
;;;1063         }
;;;1064   
;;;1065         pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
00007a  4f17              LDR      r7,|L22.216|
00007c  1f3f              SUBS     r7,r7,#4
00007e  683f              LDR      r7,[r7,#0]
000080  f3c74701          UBFX     r7,r7,#16,#2
000084  1c7f              ADDS     r7,r7,#1
000086  007d              LSLS     r5,r7,#1
;;;1066         RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
000088  fbb4f7f5          UDIV     r7,r4,r5
00008c  6007              STR      r7,[r0,#0]
;;;1067         break;
00008e  e002              B        |L22.150|
                  |L22.144|
;;;1068       default:
;;;1069         RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
000090  4f12              LDR      r7,|L22.220|
000092  6007              STR      r7,[r0,#0]
;;;1070         break;
000094  bf00              NOP      
                  |L22.150|
000096  bf00              NOP                            ;1042
;;;1071     }
;;;1072     /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
;;;1073   
;;;1074     /* Get HCLK prescaler */
;;;1075     tmp = RCC->CFGR & RCC_CFGR_HPRE;
000098  4f0f              LDR      r7,|L22.216|
00009a  683f              LDR      r7,[r7,#0]
00009c  f00701f0          AND      r1,r7,#0xf0
;;;1076     tmp = tmp >> 4;
0000a0  0909              LSRS     r1,r1,#4
;;;1077     presc = APBAHBPrescTable[tmp];
0000a2  4f10              LDR      r7,|L22.228|
0000a4  5c7a              LDRB     r2,[r7,r1]
;;;1078     /* HCLK clock frequency */
;;;1079     RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
0000a6  6807              LDR      r7,[r0,#0]
0000a8  40d7              LSRS     r7,r7,r2
0000aa  6047              STR      r7,[r0,#4]
;;;1080   
;;;1081     /* Get PCLK1 prescaler */
;;;1082     tmp = RCC->CFGR & RCC_CFGR_PPRE1;
0000ac  4f0a              LDR      r7,|L22.216|
0000ae  683f              LDR      r7,[r7,#0]
0000b0  f40751e0          AND      r1,r7,#0x1c00
;;;1083     tmp = tmp >> 10;
0000b4  0a89              LSRS     r1,r1,#10
;;;1084     presc = APBAHBPrescTable[tmp];
0000b6  4f0b              LDR      r7,|L22.228|
0000b8  5c7a              LDRB     r2,[r7,r1]
;;;1085     /* PCLK1 clock frequency */
;;;1086     RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
0000ba  6847              LDR      r7,[r0,#4]
0000bc  40d7              LSRS     r7,r7,r2
0000be  6087              STR      r7,[r0,#8]
;;;1087   
;;;1088     /* Get PCLK2 prescaler */
;;;1089     tmp = RCC->CFGR & RCC_CFGR_PPRE2;
0000c0  4f05              LDR      r7,|L22.216|
0000c2  683f              LDR      r7,[r7,#0]
0000c4  f4074160          AND      r1,r7,#0xe000
;;;1090     tmp = tmp >> 13;
0000c8  0b49              LSRS     r1,r1,#13
;;;1091     presc = APBAHBPrescTable[tmp];
0000ca  4f06              LDR      r7,|L22.228|
0000cc  5c7a              LDRB     r2,[r7,r1]
;;;1092     /* PCLK2 clock frequency */
;;;1093     RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
0000ce  6847              LDR      r7,[r0,#4]
0000d0  40d7              LSRS     r7,r7,r2
0000d2  60c7              STR      r7,[r0,#0xc]
;;;1094   }
0000d4  bdf0              POP      {r4-r7,pc}
;;;1095   
                          ENDP

0000d6  0000              DCW      0x0000
                  |L22.216|
                          DCD      0x40023808
                  |L22.220|
                          DCD      0x00f42400
                  |L22.224|
                          DCD      0x017d7840
                  |L22.228|
                          DCD      APBAHBPrescTable

                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetFlagStatus PROC
;;;2091     */
;;;2092   FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
000000  b510              PUSH     {r4,lr}
;;;2093   {
000002  4601              MOV      r1,r0
;;;2094     uint32_t tmp = 0;
000004  2200              MOVS     r2,#0
;;;2095     uint32_t statusreg = 0;
000006  2300              MOVS     r3,#0
;;;2096     FlagStatus bitstatus = RESET;
000008  2000              MOVS     r0,#0
;;;2097   
;;;2098     /* Check the parameters */
;;;2099     assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;2100   
;;;2101     /* Get the RCC register index */
;;;2102     tmp = RCC_FLAG >> 5;
00000a  114a              ASRS     r2,r1,#5
;;;2103     if (tmp == 1)               /* The flag to check is in CR register */
00000c  2a01              CMP      r2,#1
00000e  d102              BNE      |L23.22|
;;;2104     {
;;;2105       statusreg = RCC->CR;
000010  4c0a              LDR      r4,|L23.60|
000012  6823              LDR      r3,[r4,#0]
000014  e008              B        |L23.40|
                  |L23.22|
;;;2106     }
;;;2107     else if (tmp == 2)          /* The flag to check is in BDCR register */
000016  2a02              CMP      r2,#2
000018  d103              BNE      |L23.34|
;;;2108     {
;;;2109       statusreg = RCC->BDCR;
00001a  4c08              LDR      r4,|L23.60|
00001c  3470              ADDS     r4,r4,#0x70
00001e  6823              LDR      r3,[r4,#0]
000020  e002              B        |L23.40|
                  |L23.34|
;;;2110     }
;;;2111     else                       /* The flag to check is in CSR register */
;;;2112     {
;;;2113       statusreg = RCC->CSR;
000022  4c06              LDR      r4,|L23.60|
000024  3474              ADDS     r4,r4,#0x74
000026  6823              LDR      r3,[r4,#0]
                  |L23.40|
;;;2114     }
;;;2115   
;;;2116     /* Get the flag position */
;;;2117     tmp = RCC_FLAG & FLAG_MASK;
000028  f001021f          AND      r2,r1,#0x1f
;;;2118     if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
00002c  2401              MOVS     r4,#1
00002e  4094              LSLS     r4,r4,r2
000030  401c              ANDS     r4,r4,r3
000032  b10c              CBZ      r4,|L23.56|
;;;2119     {
;;;2120       bitstatus = SET;
000034  2001              MOVS     r0,#1
000036  e000              B        |L23.58|
                  |L23.56|
;;;2121     }
;;;2122     else
;;;2123     {
;;;2124       bitstatus = RESET;
000038  2000              MOVS     r0,#0
                  |L23.58|
;;;2125     }
;;;2126     /* Return the flag status */
;;;2127     return bitstatus;
;;;2128   }
00003a  bd10              POP      {r4,pc}
;;;2129   
                          ENDP

                  |L23.60|
                          DCD      0x40023800

                          AREA ||i.RCC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetITStatus PROC
;;;2156     */
;;;2157   ITStatus RCC_GetITStatus(uint8_t RCC_IT)
000000  4601              MOV      r1,r0
;;;2158   {
;;;2159     ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;2160   
;;;2161     /* Check the parameters */
;;;2162     assert_param(IS_RCC_GET_IT(RCC_IT));
;;;2163   
;;;2164     /* Check the status of the specified RCC interrupt */
;;;2165     if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L24.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L24.16|
;;;2166     {
;;;2167       bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L24.18|
                  |L24.16|
;;;2168     }
;;;2169     else
;;;2170     {
;;;2171       bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L24.18|
;;;2172     }
;;;2173     /* Return the RCC_IT status */
;;;2174     return  bitstatus;
;;;2175   }
000012  4770              BX       lr
;;;2176   
                          ENDP

                  |L24.20|
                          DCD      0x4002380c

                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2

                  RCC_GetSYSCLKSource PROC
;;;890      */
;;;891    uint8_t RCC_GetSYSCLKSource(void)
000000  4802              LDR      r0,|L25.12|
;;;892    {
;;;893      return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
000002  6800              LDR      r0,[r0,#0]
000004  f000000c          AND      r0,r0,#0xc
;;;894    }
000008  4770              BX       lr
;;;895    
                          ENDP

00000a  0000              DCW      0x0000
                  |L25.12|
                          DCD      0x40023808

                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_HCLKConfig PROC
;;;915      */
;;;916    void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
000000  4601              MOV      r1,r0
;;;917    {
;;;918      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;919      
;;;920      /* Check the parameters */
;;;921      assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;922    
;;;923      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L26.20|
000006  6810              LDR      r0,[r2,#0]
;;;924    
;;;925      /* Clear HPRE[3:0] bits */
;;;926      tmpreg &= ~RCC_CFGR_HPRE;
000008  f02000f0          BIC      r0,r0,#0xf0
;;;927    
;;;928      /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;929      tmpreg |= RCC_SYSCLK;
00000c  4308              ORRS     r0,r0,r1
;;;930    
;;;931      /* Store the new value */
;;;932      RCC->CFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;933    }
000010  4770              BX       lr
;;;934    
                          ENDP

000012  0000              DCW      0x0000
                  |L26.20|
                          DCD      0x40023808

                          AREA ||i.RCC_HSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_HSEConfig PROC
;;;263      */
;;;264    void RCC_HSEConfig(uint8_t RCC_HSE)
000000  2100              MOVS     r1,#0
;;;265    {
;;;266      /* Check the parameters */
;;;267      assert_param(IS_RCC_HSE(RCC_HSE));
;;;268    
;;;269      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;270      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
000002  4a02              LDR      r2,|L27.12|
000004  7011              STRB     r1,[r2,#0]
;;;271    
;;;272      /* Set the new HSE configuration -------------------------------------------*/
;;;273      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
000006  4611              MOV      r1,r2
000008  7008              STRB     r0,[r1,#0]
;;;274    }
00000a  4770              BX       lr
;;;275    
                          ENDP

                  |L27.12|
                          DCD      0x40023802

                          AREA ||i.RCC_HSICmd||, CODE, READONLY, ALIGN=2

                  RCC_HSICmd PROC
;;;354      */
;;;355    void RCC_HSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;356    {
;;;357      /* Check the parameters */
;;;358      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;359    
;;;360      *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;361    }
000004  4770              BX       lr
;;;362    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x42470000

                          AREA ||i.RCC_I2SCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_I2SCLKConfig PROC
;;;1221     */
;;;1222   void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
000000  4901              LDR      r1,|L29.8|
;;;1223   {
;;;1224     /* Check the parameters */
;;;1225     assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
;;;1226   
;;;1227     *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
000002  6008              STR      r0,[r1,#0]
;;;1228   }
000004  4770              BX       lr
;;;1229   
                          ENDP

000006  0000              DCW      0x0000
                  |L29.8|
                          DCD      0x4247015c

                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2

                  RCC_ITConfig PROC
;;;2054     */
;;;2055   void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L30.14|
;;;2056   {
;;;2057     /* Check the parameters */
;;;2058     assert_param(IS_RCC_IT(RCC_IT));
;;;2059     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2060     if (NewState != DISABLE)
;;;2061     {
;;;2062       /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
;;;2063       *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
000002  4a06              LDR      r2,|L30.28|
000004  7812              LDRB     r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L30.28|
00000a  701a              STRB     r2,[r3,#0]
00000c  e004              B        |L30.24|
                  |L30.14|
;;;2064     }
;;;2065     else
;;;2066     {
;;;2067       /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
;;;2068       *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
00000e  4a03              LDR      r2,|L30.28|
000010  7812              LDRB     r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L30.28|
000016  701a              STRB     r2,[r3,#0]
                  |L30.24|
;;;2069     }
;;;2070   }
000018  4770              BX       lr
;;;2071   
                          ENDP

00001a  0000              DCW      0x0000
                  |L30.28|
                          DCD      0x4002380d

                          AREA ||i.RCC_LSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_LSEConfig PROC
;;;379      */
;;;380    void RCC_LSEConfig(uint8_t RCC_LSE)
000000  2100              MOVS     r1,#0
;;;381    {
;;;382      /* Check the parameters */
;;;383      assert_param(IS_RCC_LSE(RCC_LSE));
;;;384    
;;;385      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;386      /* Reset LSEON bit */
;;;387      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000002  4a09              LDR      r2,|L31.40|
000004  7011              STRB     r1,[r2,#0]
;;;388    
;;;389      /* Reset LSEBYP bit */
;;;390      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
000006  7011              STRB     r1,[r2,#0]
;;;391    
;;;392      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;393      switch (RCC_LSE)
000008  2801              CMP      r0,#1
00000a  d002              BEQ      |L31.18|
00000c  2804              CMP      r0,#4
00000e  d108              BNE      |L31.34|
000010  e003              B        |L31.26|
                  |L31.18|
;;;394      {
;;;395        case RCC_LSE_ON:
;;;396          /* Set LSEON bit */
;;;397          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
000012  2101              MOVS     r1,#1
000014  4a04              LDR      r2,|L31.40|
000016  7011              STRB     r1,[r2,#0]
;;;398          break;
000018  e004              B        |L31.36|
                  |L31.26|
;;;399        case RCC_LSE_Bypass:
;;;400          /* Set LSEBYP and LSEON bits */
;;;401          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
00001a  2105              MOVS     r1,#5
00001c  4a02              LDR      r2,|L31.40|
00001e  7011              STRB     r1,[r2,#0]
;;;402          break;
000020  e000              B        |L31.36|
                  |L31.34|
;;;403        default:
;;;404          break;
000022  bf00              NOP      
                  |L31.36|
000024  bf00              NOP                            ;398
;;;405      }
;;;406    }
000026  4770              BX       lr
;;;407    
                          ENDP

                  |L31.40|
                          DCD      0x40023870

                          AREA ||i.RCC_LSICmd||, CODE, READONLY, ALIGN=2

                  RCC_LSICmd PROC
;;;419      */
;;;420    void RCC_LSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L32.8|
;;;421    {
;;;422      /* Check the parameters */
;;;423      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;424    
;;;425      *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;426    }
000004  4770              BX       lr
;;;427    
                          ENDP

000006  0000              DCW      0x0000
                  |L32.8|
                          DCD      0x42470e80

                          AREA ||i.RCC_LTDCCLKDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_LTDCCLKDivConfig PROC
;;;1379     */
;;;1380   void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
000000  4601              MOV      r1,r0
;;;1381   {
;;;1382     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1383     
;;;1384     /* Check the parameters */
;;;1385     assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
;;;1386     
;;;1387     tmpreg = RCC->DCKCFGR;
000004  4a03              LDR      r2,|L33.20|
000006  6810              LDR      r0,[r2,#0]
;;;1388   
;;;1389     /* Clear PLLSAIDIVR[2:0] bits */
;;;1390     tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
000008  f4203040          BIC      r0,r0,#0x30000
;;;1391   
;;;1392     /* Set PLLSAIDIVR values */
;;;1393     tmpreg |= RCC_PLLSAIDivR;
00000c  4308              ORRS     r0,r0,r1
;;;1394   
;;;1395     /* Store the new value */
;;;1396     RCC->DCKCFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;1397   }
000010  4770              BX       lr
;;;1398   
                          ENDP

000012  0000              DCW      0x0000
                  |L33.20|
                          DCD      0x4002388c

                          AREA ||i.RCC_MCO1Config||, CODE, READONLY, ALIGN=2

                  RCC_MCO1Config PROC
;;;658      */
;;;659    void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
000000  4602              MOV      r2,r0
;;;660    {
;;;661      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;662      
;;;663      /* Check the parameters */
;;;664      assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
;;;665      assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
;;;666    
;;;667      tmpreg = RCC->CFGR;
000004  4b04              LDR      r3,|L34.24|
000006  6818              LDR      r0,[r3,#0]
;;;668    
;;;669      /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
;;;670      tmpreg &= CFGR_MCO1_RESET_MASK;
000008  f02060ec          BIC      r0,r0,#0x7600000
;;;671    
;;;672      /* Select MCO1 clock source and prescaler */
;;;673      tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
00000c  ea420301          ORR      r3,r2,r1
000010  4318              ORRS     r0,r0,r3
;;;674    
;;;675      /* Store the new value */
;;;676      RCC->CFGR = tmpreg;  
000012  4b01              LDR      r3,|L34.24|
000014  6018              STR      r0,[r3,#0]
;;;677    }
000016  4770              BX       lr
;;;678    
                          ENDP

                  |L34.24|
                          DCD      0x40023808

                          AREA ||i.RCC_MCO2Config||, CODE, READONLY, ALIGN=2

                  RCC_MCO2Config PROC
;;;696      */
;;;697    void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
000000  4602              MOV      r2,r0
;;;698    {
;;;699      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;700      
;;;701      /* Check the parameters */
;;;702      assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
;;;703      assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
;;;704      
;;;705      tmpreg = RCC->CFGR;
000004  4b04              LDR      r3,|L35.24|
000006  6818              LDR      r0,[r3,#0]
;;;706      
;;;707      /* Clear MCO2 and MCO2PRE[2:0] bits */
;;;708      tmpreg &= CFGR_MCO2_RESET_MASK;
000008  f0204078          BIC      r0,r0,#0xf8000000
;;;709    
;;;710      /* Select MCO2 clock source and prescaler */
;;;711      tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
00000c  ea420301          ORR      r3,r2,r1
000010  4318              ORRS     r0,r0,r3
;;;712    
;;;713      /* Store the new value */
;;;714      RCC->CFGR = tmpreg;  
000012  4b01              LDR      r3,|L35.24|
000014  6018              STR      r0,[r3,#0]
;;;715    }
000016  4770              BX       lr
;;;716    
                          ENDP

                  |L35.24|
                          DCD      0x40023808

                          AREA ||i.RCC_PCLK1Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK1Config PROC
;;;947      */
;;;948    void RCC_PCLK1Config(uint32_t RCC_HCLK)
000000  4601              MOV      r1,r0
;;;949    {
;;;950      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;951    
;;;952      /* Check the parameters */
;;;953      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;954    
;;;955      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L36.20|
000006  6810              LDR      r0,[r2,#0]
;;;956    
;;;957      /* Clear PPRE1[2:0] bits */
;;;958      tmpreg &= ~RCC_CFGR_PPRE1;
000008  f42050e0          BIC      r0,r0,#0x1c00
;;;959    
;;;960      /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;961      tmpreg |= RCC_HCLK;
00000c  4308              ORRS     r0,r0,r1
;;;962    
;;;963      /* Store the new value */
;;;964      RCC->CFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;965    }
000010  4770              BX       lr
;;;966    
                          ENDP

000012  0000              DCW      0x0000
                  |L36.20|
                          DCD      0x40023808

                          AREA ||i.RCC_PCLK2Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK2Config PROC
;;;978      */
;;;979    void RCC_PCLK2Config(uint32_t RCC_HCLK)
000000  4601              MOV      r1,r0
;;;980    {
;;;981      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;982    
;;;983      /* Check the parameters */
;;;984      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;985    
;;;986      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L37.20|
000006  6810              LDR      r0,[r2,#0]
;;;987    
;;;988      /* Clear PPRE2[2:0] bits */
;;;989      tmpreg &= ~RCC_CFGR_PPRE2;
000008  f4204060          BIC      r0,r0,#0xe000
;;;990    
;;;991      /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;992      tmpreg |= RCC_HCLK << 3;
00000c  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;993    
;;;994      /* Store the new value */
;;;995      RCC->CFGR = tmpreg;
000010  6010              STR      r0,[r2,#0]
;;;996    }
000012  4770              BX       lr
;;;997    
                          ENDP

                  |L37.20|
                          DCD      0x40023808

                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLCmd PROC
;;;485      */
;;;486    void RCC_PLLCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L38.8|
;;;487    {
;;;488      /* Check the parameters */
;;;489      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;490      *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
000002  6608              STR      r0,[r1,#0x60]
;;;491    }
000004  4770              BX       lr
;;;492    
                          ENDP

000006  0000              DCW      0x0000
                  |L38.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLConfig PROC
;;;462      */
;;;463    void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
000000  b570              PUSH     {r4-r6,lr}
;;;464    {
000002  9c04              LDR      r4,[sp,#0x10]
;;;465      /* Check the parameters */
;;;466      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;467      assert_param(IS_RCC_PLLM_VALUE(PLLM));
;;;468      assert_param(IS_RCC_PLLN_VALUE(PLLN));
;;;469      assert_param(IS_RCC_PLLP_VALUE(PLLP));
;;;470      assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
;;;471    
;;;472      RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
000004  ea411582          ORR      r5,r1,r2,LSL #6
000008  2601              MOVS     r6,#1
00000a  ebc60653          RSB      r6,r6,r3,LSR #1
00000e  ea454506          ORR      r5,r5,r6,LSL #16
000012  4305              ORRS     r5,r5,r0
000014  ea456504          ORR      r5,r5,r4,LSL #24
000018  4e01              LDR      r6,|L39.32|
00001a  6035              STR      r5,[r6,#0]
;;;473                     (PLLQ << 24);
;;;474    }
00001c  bd70              POP      {r4-r6,pc}
;;;475    
                          ENDP

00001e  0000              DCW      0x0000
                  |L39.32|
                          DCD      0x40023804

                          AREA ||i.RCC_PLLI2SCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLI2SCmd PROC
;;;568      */
;;;569    void RCC_PLLI2SCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L40.8|
;;;570    {
;;;571      /* Check the parameters */
;;;572      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;573      *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
000002  6688              STR      r0,[r1,#0x68]
;;;574    }
000004  4770              BX       lr
;;;575    
                          ENDP

000006  0000              DCW      0x0000
                  |L40.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLI2SConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLI2SConfig PROC
;;;515      */
;;;516    void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
000000  0182              LSLS     r2,r0,#6
;;;517    {
;;;518      /* Check the parameters */
;;;519      assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
;;;520      assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
;;;521    
;;;522      RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
000002  ea427201          ORR      r2,r2,r1,LSL #28
000006  4b01              LDR      r3,|L41.12|
000008  601a              STR      r2,[r3,#0]
;;;523    }
00000a  4770              BX       lr
;;;524    #endif /* STM32F40_41xxx || STM32F401xx */
                          ENDP

                  |L41.12|
                          DCD      0x40023884

                          AREA ||i.RCC_PLLSAICmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLSAICmd PROC
;;;615      */
;;;616    void RCC_PLLSAICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L42.8|
;;;617    {
;;;618      /* Check the parameters */
;;;619      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;620      *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
000002  6708              STR      r0,[r1,#0x70]
;;;621    }
000004  4770              BX       lr
;;;622    
                          ENDP

000006  0000              DCW      0x0000
                  |L42.8|
                          DCD      0x42470000

                          AREA ||i.RCC_PLLSAIConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLSAIConfig PROC
;;;597      */
;;;598    void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
000000  b510              PUSH     {r4,lr}
;;;599    {
;;;600      /* Check the parameters */
;;;601      assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
;;;602      assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
;;;603    
;;;604      RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
000002  0183              LSLS     r3,r0,#6
000004  ea436301          ORR      r3,r3,r1,LSL #24
000008  ea437302          ORR      r3,r3,r2,LSL #28
00000c  4c01              LDR      r4,|L43.20|
00000e  6023              STR      r3,[r4,#0]
;;;605    }
000010  bd10              POP      {r4,pc}
;;;606    
                          ENDP

000012  0000              DCW      0x0000
                  |L43.20|
                          DCD      0x40023888

                          AREA ||i.RCC_RTCCLKCmd||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKCmd PROC
;;;1187     */
;;;1188   void RCC_RTCCLKCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L44.8|
;;;1189   {
;;;1190     /* Check the parameters */
;;;1191     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1192   
;;;1193     *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;1194   }
000004  4770              BX       lr
;;;1195   
                          ENDP

000006  0000              DCW      0x0000
                  |L44.8|
                          DCD      0x42470e3c

                          AREA ||i.RCC_RTCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKConfig PROC
;;;1155     */
;;;1156   void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
000000  2100              MOVS     r1,#0
;;;1157   {
;;;1158     uint32_t tmpreg = 0;
;;;1159   
;;;1160     /* Check the parameters */
;;;1161     assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;1162   
;;;1163     if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
000002  f4007240          AND      r2,r0,#0x300
000006  f5b27f40          CMP      r2,#0x300
00000a  d108              BNE      |L45.30|
;;;1164     { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
;;;1165       tmpreg = RCC->CFGR;
00000c  4a09              LDR      r2,|L45.52|
00000e  6811              LDR      r1,[r2,#0]
;;;1166   
;;;1167       /* Clear RTCPRE[4:0] bits */
;;;1168       tmpreg &= ~RCC_CFGR_RTCPRE;
000010  f42111f8          BIC      r1,r1,#0x1f0000
;;;1169   
;;;1170       /* Configure HSE division factor for RTC clock */
;;;1171       tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
000014  4a08              LDR      r2,|L45.56|
000016  4002              ANDS     r2,r2,r0
000018  4311              ORRS     r1,r1,r2
;;;1172   
;;;1173       /* Store the new value */
;;;1174       RCC->CFGR = tmpreg;
00001a  4a06              LDR      r2,|L45.52|
00001c  6011              STR      r1,[r2,#0]
                  |L45.30|
;;;1175     }
;;;1176       
;;;1177     /* Select the RTC clock source */
;;;1178     RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
00001e  4a05              LDR      r2,|L45.52|
000020  3268              ADDS     r2,r2,#0x68
000022  6812              LDR      r2,[r2,#0]
000024  f3c0030b          UBFX     r3,r0,#0,#12
000028  431a              ORRS     r2,r2,r3
00002a  4b02              LDR      r3,|L45.52|
00002c  3368              ADDS     r3,r3,#0x68
00002e  601a              STR      r2,[r3,#0]
;;;1179   }
000030  4770              BX       lr
;;;1180   
                          ENDP

000032  0000              DCW      0x0000
                  |L45.52|
                          DCD      0x40023808
                  |L45.56|
                          DCD      0x0ffffcff

                          AREA ||i.RCC_SAIBlockACLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIBlockACLKConfig PROC
;;;1310     */
;;;1311   void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
000000  4601              MOV      r1,r0
;;;1312   {
;;;1313     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1314     
;;;1315     /* Check the parameters */
;;;1316     assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
;;;1317     
;;;1318     tmpreg = RCC->DCKCFGR;
000004  4a03              LDR      r2,|L46.20|
000006  6810              LDR      r0,[r2,#0]
;;;1319   
;;;1320     /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
;;;1321     tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
000008  f4201040          BIC      r0,r0,#0x300000
;;;1322   
;;;1323     /* Set SAI Block A source selection value */
;;;1324     tmpreg |= RCC_SAIBlockACLKSource;
00000c  4308              ORRS     r0,r0,r1
;;;1325   
;;;1326     /* Store the new value */
;;;1327     RCC->DCKCFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;1328   }
000010  4770              BX       lr
;;;1329   
                          ENDP

000012  0000              DCW      0x0000
                  |L46.20|
                          DCD      0x4002388c

                          AREA ||i.RCC_SAIBlockBCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIBlockBCLKConfig PROC
;;;1346     */
;;;1347   void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
000000  4601              MOV      r1,r0
;;;1348   {
;;;1349     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1350     
;;;1351     /* Check the parameters */
;;;1352     assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
;;;1353     
;;;1354     tmpreg = RCC->DCKCFGR;
000004  4a03              LDR      r2,|L47.20|
000006  6810              LDR      r0,[r2,#0]
;;;1355   
;;;1356     /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
;;;1357     tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
000008  f4200040          BIC      r0,r0,#0xc00000
;;;1358   
;;;1359     /* Set SAI Block B source selection value */
;;;1360     tmpreg |= RCC_SAIBlockBCLKSource;
00000c  4308              ORRS     r0,r0,r1
;;;1361   
;;;1362     /* Store the new value */
;;;1363     RCC->DCKCFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;1364   }
000010  4770              BX       lr
;;;1365   
                          ENDP

000012  0000              DCW      0x0000
                  |L47.20|
                          DCD      0x4002388c

                          AREA ||i.RCC_SAIPLLI2SClkDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIPLLI2SClkDivConfig PROC
;;;1242     */
;;;1243   void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
000000  4601              MOV      r1,r0
;;;1244   {
;;;1245     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1246     
;;;1247     /* Check the parameters */
;;;1248     assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
;;;1249     
;;;1250     tmpreg = RCC->DCKCFGR;
000004  4a04              LDR      r2,|L48.24|
000006  6810              LDR      r0,[r2,#0]
;;;1251   
;;;1252     /* Clear PLLI2SDIVQ[4:0] bits */
;;;1253     tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
000008  f020001f          BIC      r0,r0,#0x1f
;;;1254   
;;;1255     /* Set PLLI2SDIVQ values */
;;;1256     tmpreg |= (RCC_PLLI2SDivQ - 1);
00000c  1e4a              SUBS     r2,r1,#1
00000e  4310              ORRS     r0,r0,r2
;;;1257   
;;;1258     /* Store the new value */
;;;1259     RCC->DCKCFGR = tmpreg;
000010  4a01              LDR      r2,|L48.24|
000012  6010              STR      r0,[r2,#0]
;;;1260   }
000014  4770              BX       lr
;;;1261   
                          ENDP

000016  0000              DCW      0x0000
                  |L48.24|
                          DCD      0x4002388c

                          AREA ||i.RCC_SAIPLLSAIClkDivConfig||, CODE, READONLY, ALIGN=2

                  RCC_SAIPLLSAIClkDivConfig PROC
;;;1274     */
;;;1275   void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
000000  4601              MOV      r1,r0
;;;1276   {
;;;1277     uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;1278     
;;;1279     /* Check the parameters */
;;;1280     assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
;;;1281     
;;;1282     tmpreg = RCC->DCKCFGR;
000004  4a04              LDR      r2,|L49.24|
000006  6810              LDR      r0,[r2,#0]
;;;1283   
;;;1284     /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
;;;1285     tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
000008  f42050f8          BIC      r0,r0,#0x1f00
;;;1286   
;;;1287     /* Set PLLSAIDIVQ values */
;;;1288     tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
00000c  1e4a              SUBS     r2,r1,#1
00000e  ea402002          ORR      r0,r0,r2,LSL #8
;;;1289   
;;;1290     /* Store the new value */
;;;1291     RCC->DCKCFGR = tmpreg;
000012  4a01              LDR      r2,|L49.24|
000014  6010              STR      r0,[r2,#0]
;;;1292   }
000016  4770              BX       lr
;;;1293   
                          ENDP

                  |L49.24|
                          DCD      0x4002388c

                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SYSCLKConfig PROC
;;;862      */
;;;863    void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
000000  4601              MOV      r1,r0
;;;864    {
;;;865      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;866    
;;;867      /* Check the parameters */
;;;868      assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;869    
;;;870      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L50.20|
000006  6810              LDR      r0,[r2,#0]
;;;871    
;;;872      /* Clear SW[1:0] bits */
;;;873      tmpreg &= ~RCC_CFGR_SW;
000008  f0200003          BIC      r0,r0,#3
;;;874    
;;;875      /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;876      tmpreg |= RCC_SYSCLKSource;
00000c  4308              ORRS     r0,r0,r1
;;;877    
;;;878      /* Store the new value */
;;;879      RCC->CFGR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;880    }
000010  4770              BX       lr
;;;881    
                          ENDP

000012  0000              DCW      0x0000
                  |L50.20|
                          DCD      0x40023808

                          AREA ||i.RCC_TIMCLKPresConfig||, CODE, READONLY, ALIGN=2

                  RCC_TIMCLKPresConfig PROC
;;;1416     */
;;;1417   void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
000000  4901              LDR      r1,|L51.8|
;;;1418   {
;;;1419     /* Check the parameters */
;;;1420     assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
;;;1421   
;;;1422     *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
000002  6008              STR      r0,[r1,#0]
;;;1423     
;;;1424   }
000004  4770              BX       lr
;;;1425   
                          ENDP

000006  0000              DCW      0x0000
                  |L51.8|
                          DCD      0x424711e0

                          AREA ||i.RCC_WaitForHSEStartUp||, CODE, READONLY, ALIGN=1

                  RCC_WaitForHSEStartUp PROC
;;;287      */
;;;288    ErrorStatus RCC_WaitForHSEStartUp(void)
000000  b538              PUSH     {r3-r5,lr}
;;;289    {
;;;290      __IO uint32_t startupcounter = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;291      ErrorStatus status = ERROR;
000006  2400              MOVS     r4,#0
;;;292      FlagStatus hsestatus = RESET;
000008  2500              MOVS     r5,#0
;;;293      /* Wait till HSE is ready and if Time out is reached exit */
;;;294      do
00000a  bf00              NOP      
                  |L52.12|
;;;295      {
;;;296        hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
00000c  2031              MOVS     r0,#0x31
00000e  f7fffffe          BL       RCC_GetFlagStatus
000012  4605              MOV      r5,r0
;;;297        startupcounter++;
000014  9800              LDR      r0,[sp,#0]
000016  1c40              ADDS     r0,r0,#1
000018  9000              STR      r0,[sp,#0]
;;;298      } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
00001a  9800              LDR      r0,[sp,#0]
00001c  f5b04fa0          CMP      r0,#0x5000
000020  d001              BEQ      |L52.38|
000022  2d00              CMP      r5,#0
000024  d0f2              BEQ      |L52.12|
                  |L52.38|
;;;299    
;;;300      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
000026  2031              MOVS     r0,#0x31
000028  f7fffffe          BL       RCC_GetFlagStatus
00002c  b108              CBZ      r0,|L52.50|
;;;301      {
;;;302        status = SUCCESS;
00002e  2401              MOVS     r4,#1
000030  e000              B        |L52.52|
                  |L52.50|
;;;303      }
;;;304      else
;;;305      {
;;;306        status = ERROR;
000032  2400              MOVS     r4,#0
                  |L52.52|
;;;307      }
;;;308      return (status);
000034  4620              MOV      r0,r4
;;;309    }
000036  bd38              POP      {r3-r5,pc}
;;;310    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\stm32LIB\\src\\stm32f4xx_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REV16|
#line 388 "..\\stm32LIB\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_stm32f4xx_rcc_c_49e27980____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REVSH|
#line 402
|__asm___15_stm32f4xx_rcc_c_49e27980____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____RRX|
#line 587
|__asm___15_stm32f4xx_rcc_c_49e27980____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
