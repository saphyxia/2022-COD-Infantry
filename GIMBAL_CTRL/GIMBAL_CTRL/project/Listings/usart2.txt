; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\usart2.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usart2.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\stm32LIB\inc -I..\stm32LIB\CMSIS\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\user\_Dsp\Include -I..\user\_Algorithms -I..\user\_Bsp -I..\user\_Device -I..\user\_Task -I..\system -I..\stm32LIB\CMSIS -I..\system -I..\FreeRTOS -I..\user -I.\RTE\_COD_Gimbal_Task -IC:\keil_v5_project\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM4 -D__FPU_PRESENT --omf_browse=.\objects\usart2.crf ..\user\_Bsp\usart2.c]
                          THUMB

                          AREA ||i.JY901_Data_Realize||, CODE, READONLY, ALIGN=2

                  JY901_Data_Realize PROC
;;;88     
;;;89     void JY901_Data_Realize(unsigned char ucData)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  ed2d8b04          VPUSH    {d8-d9}
000006  4604              MOV      r4,r0
;;;91         static unsigned char ucRxBuffer[250];
;;;92         static unsigned char ucRxCnt = 0;	
;;;93         ucRxBuffer[ucRxCnt++]=ucData;
000008  48a0              LDR      r0,|L1.652|
00000a  7801              LDRB     r1,[r0,#0]  ; ucRxCnt
00000c  7800              LDRB     r0,[r0,#0]  ; ucRxCnt
00000e  1c40              ADDS     r0,r0,#1
000010  4a9e              LDR      r2,|L1.652|
000012  7010              STRB     r0,[r2,#0]
000014  489e              LDR      r0,|L1.656|
000016  5444              STRB     r4,[r0,r1]
;;;94         if (ucRxBuffer[0]!=0x55) //数据头不对，则重新开始寻找0x55数据头
000018  7800              LDRB     r0,[r0,#0]  ; ucRxBuffer
00001a  2855              CMP      r0,#0x55
00001c  d005              BEQ      |L1.42|
;;;95         {
;;;96             ucRxCnt=0;
00001e  2000              MOVS     r0,#0
000020  4611              MOV      r1,r2
000022  7008              STRB     r0,[r1,#0]
                  |L1.36|
;;;97             return;
;;;98         }
;;;99         if (ucRxCnt<11) {return;}//数据不满11个，则返回
;;;100        else{
;;;101            switch(ucRxBuffer[1])
;;;102            {
;;;103                case 0x50:	memcpy(&stcTime,&ucRxBuffer[2],8);break;
;;;104                case 0x51:	memcpy(&stcAcc,&ucRxBuffer[2],8);break;
;;;105                case 0x52:	memcpy(&stcGyro,&ucRxBuffer[2],8);break;
;;;106                case 0x53:  memcpy(&stcAngle,&ucRxBuffer[2],8); 
;;;107                pitch_Angle = (float)stcAngle.Angle[0]/32768*180;
;;;108                roll_Angle = (float)stcAngle.Angle[1]/32768*180;
;;;109                yaw_Angle = (float)stcAngle.Angle[2]/32768*180;
;;;110    
;;;111                if(yaw_Angle>=0) yaw_sign=1;
;;;112                if(yaw_Angle<0)  yaw_sign=0; 
;;;113                yaw_int=ABS((int)yaw_Angle);
;;;114                yaw_decimal=ABS((int)(yaw_Angle*100)%100);
;;;115    
;;;116                if(pitch_Angle>=0) pitch_sign=1;
;;;117                if(pitch_Angle<0)  pitch_sign=0; 
;;;118                pitch_int=0;//ABS((int)yaw_angle);
;;;119                pitch_decimal=0;//ABS((int)(yaw_angle*100)%100);
;;;120    
;;;121    
;;;122                roll_Gyro=(double)stcGyro.w[0]/32768*1000;	//X轴角速度
;;;123                pitch_Gyro=(double)stcGyro.w[1]/32768*1000;	//Y轴角速度
;;;124                yaw_Gyro=(double)stcGyro.w[2]/32768*1000;	//Z轴角速度
;;;125                break;
;;;126            }
;;;127            ucRxCnt=0;
;;;128        }
;;;129    }
000024  ecbd8b04          VPOP     {d8-d9}
000028  bd10              POP      {r4,pc}
                  |L1.42|
00002a  4898              LDR      r0,|L1.652|
00002c  7800              LDRB     r0,[r0,#0]            ;99  ; ucRxCnt
00002e  280b              CMP      r0,#0xb               ;99
000030  da00              BGE      |L1.52|
000032  e7f7              B        |L1.36|
                  |L1.52|
000034  4896              LDR      r0,|L1.656|
000036  7840              LDRB     r0,[r0,#1]            ;101  ; ucRxBuffer
000038  2850              CMP      r0,#0x50              ;101
00003a  d006              BEQ      |L1.74|
00003c  2851              CMP      r0,#0x51              ;101
00003e  d00c              BEQ      |L1.90|
000040  2852              CMP      r0,#0x52              ;101
000042  d012              BEQ      |L1.106|
000044  2853              CMP      r0,#0x53              ;101
000046  d107              BNE      |L1.88|
000048  e017              B        |L1.122|
                  |L1.74|
00004a  4892              LDR      r0,|L1.660|
00004c  4990              LDR      r1,|L1.656|
00004e  1c89              ADDS     r1,r1,#2              ;103
000050  680a              LDR      r2,[r1,#0]            ;103  ; ucRxBuffer
000052  6002              STR      r2,[r0,#0]            ;103  ; stcTime
000054  6849              LDR      r1,[r1,#4]            ;103  ; ucRxBuffer
000056  6041              STR      r1,[r0,#4]            ;103  ; stcTime
                  |L1.88|
000058  e111              B        |L1.638|
                  |L1.90|
00005a  488f              LDR      r0,|L1.664|
00005c  498c              LDR      r1,|L1.656|
00005e  1c89              ADDS     r1,r1,#2              ;104
000060  680a              LDR      r2,[r1,#0]            ;104  ; ucRxBuffer
000062  6002              STR      r2,[r0,#0]            ;104  ; stcAcc
000064  6849              LDR      r1,[r1,#4]            ;104  ; ucRxBuffer
000066  6041              STR      r1,[r0,#4]            ;104  ; stcAcc
000068  e109              B        |L1.638|
                  |L1.106|
00006a  488c              LDR      r0,|L1.668|
00006c  4988              LDR      r1,|L1.656|
00006e  1c89              ADDS     r1,r1,#2              ;105
000070  680a              LDR      r2,[r1,#0]            ;105  ; ucRxBuffer
000072  6002              STR      r2,[r0,#0]            ;105  ; stcGyro
000074  6849              LDR      r1,[r1,#4]            ;105  ; ucRxBuffer
000076  6041              STR      r1,[r0,#4]            ;105  ; stcGyro
000078  e101              B        |L1.638|
                  |L1.122|
00007a  4889              LDR      r0,|L1.672|
00007c  4984              LDR      r1,|L1.656|
00007e  1c89              ADDS     r1,r1,#2              ;106
000080  680a              LDR      r2,[r1,#0]            ;106  ; ucRxBuffer
000082  6002              STR      r2,[r0,#0]            ;106  ; stcAngle
000084  6849              LDR      r1,[r1,#4]            ;106  ; ucRxBuffer
000086  6041              STR      r1,[r0,#4]            ;106  ; stcAngle
000088  f9b00000          LDRSH    r0,[r0,#0]            ;107  ; stcAngle
00008c  ee000a10          VMOV     s0,r0                 ;107
000090  eeb80ac0          VCVT.F32.S32 s0,s0                 ;107
000094  eddf0a83          VLDR     s1,|L1.676|
000098  ee801a20          VDIV.F32 s2,s0,s1              ;107
00009c  ed9f0a82          VLDR     s0,|L1.680|
0000a0  ee210a00          VMUL.F32 s0,s2,s0              ;107
0000a4  4881              LDR      r0,|L1.684|
0000a6  ed800a00          VSTR     s0,[r0,#0]            ;107
0000aa  487d              LDR      r0,|L1.672|
0000ac  f9b00002          LDRSH    r0,[r0,#2]            ;108  ; stcAngle
0000b0  ee000a10          VMOV     s0,r0                 ;108
0000b4  eef80ac0          VCVT.F32.S32 s1,s0                 ;108
0000b8  ed9f1a7a          VLDR     s2,|L1.676|
0000bc  ee800a81          VDIV.F32 s0,s1,s2              ;108
0000c0  eddf0a79          VLDR     s1,|L1.680|
0000c4  ee200a20          VMUL.F32 s0,s0,s1              ;108
0000c8  4879              LDR      r0,|L1.688|
0000ca  ed800a00          VSTR     s0,[r0,#0]            ;108
0000ce  4874              LDR      r0,|L1.672|
0000d0  f9b00004          LDRSH    r0,[r0,#4]            ;109  ; stcAngle
0000d4  ee000a10          VMOV     s0,r0                 ;109
0000d8  eeb80ac0          VCVT.F32.S32 s0,s0                 ;109
0000dc  eddf0a71          VLDR     s1,|L1.676|
0000e0  ee801a20          VDIV.F32 s2,s0,s1              ;109
0000e4  ed9f0a70          VLDR     s0,|L1.680|
0000e8  ee210a00          VMUL.F32 s0,s2,s0              ;109
0000ec  4871              LDR      r0,|L1.692|
0000ee  ed800a00          VSTR     s0,[r0,#0]            ;109
0000f2  ed900a00          VLDR     s0,[r0,#0]            ;111
0000f6  eeb50ac0          VCMPE.F32 s0,#0.0               ;111
0000fa  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;111
0000fe  db02              BLT      |L1.262|
000100  2001              MOVS     r0,#1                 ;111
000102  496d              LDR      r1,|L1.696|
000104  6008              STR      r0,[r1,#0]            ;111  ; yaw_sign
                  |L1.262|
000106  486b              LDR      r0,|L1.692|
000108  ed900a00          VLDR     s0,[r0,#0]            ;112
00010c  eeb50ac0          VCMPE.F32 s0,#0.0               ;112
000110  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;112
000114  d202              BCS      |L1.284|
000116  2000              MOVS     r0,#0                 ;112
000118  4967              LDR      r1,|L1.696|
00011a  6008              STR      r0,[r1,#0]            ;112  ; yaw_sign
                  |L1.284|
00011c  4865              LDR      r0,|L1.692|
00011e  ed900a00          VLDR     s0,[r0,#0]            ;113
000122  eebd0ac0          VCVT.S32.F32 s0,s0                 ;113
000126  ee100a10          VMOV     r0,s0                 ;113
00012a  2800              CMP      r0,#0                 ;113
00012c  dd07              BLE      |L1.318|
00012e  4861              LDR      r0,|L1.692|
000130  ed900a00          VLDR     s0,[r0,#0]            ;113
000134  eebd0ac0          VCVT.S32.F32 s0,s0                 ;113
000138  ee100a10          VMOV     r0,s0                 ;113
00013c  e007              B        |L1.334|
                  |L1.318|
00013e  485d              LDR      r0,|L1.692|
000140  ed900a00          VLDR     s0,[r0,#0]            ;113
000144  eebd0ac0          VCVT.S32.F32 s0,s0                 ;113
000148  ee100a10          VMOV     r0,s0                 ;113
00014c  4240              RSBS     r0,r0,#0              ;113
                  |L1.334|
00014e  495b              LDR      r1,|L1.700|
000150  6008              STR      r0,[r1,#0]            ;113  ; yaw_int
000152  4858              LDR      r0,|L1.692|
000154  ed900a00          VLDR     s0,[r0,#0]            ;114
000158  eddf0a59          VLDR     s1,|L1.704|
00015c  ee200a20          VMUL.F32 s0,s0,s1              ;114
000160  eebd0ac0          VCVT.S32.F32 s0,s0                 ;114
000164  ee100a10          VMOV     r0,s0                 ;114
000168  2164              MOVS     r1,#0x64              ;114
00016a  fb90f2f1          SDIV     r2,r0,r1              ;114
00016e  fb010012          MLS      r0,r1,r2,r0           ;114
000172  2800              CMP      r0,#0                 ;114
000174  dd0f              BLE      |L1.406|
000176  484f              LDR      r0,|L1.692|
000178  ed900a00          VLDR     s0,[r0,#0]            ;114
00017c  eddf0a50          VLDR     s1,|L1.704|
000180  ee200a20          VMUL.F32 s0,s0,s1              ;114
000184  eebd0ac0          VCVT.S32.F32 s0,s0                 ;114
000188  ee100a10          VMOV     r0,s0                 ;114
00018c  fb90f2f1          SDIV     r2,r0,r1              ;114
000190  fb010012          MLS      r0,r1,r2,r0           ;114
000194  e010              B        |L1.440|
                  |L1.406|
000196  4847              LDR      r0,|L1.692|
000198  ed900a00          VLDR     s0,[r0,#0]            ;114
00019c  eddf0a48          VLDR     s1,|L1.704|
0001a0  ee200a20          VMUL.F32 s0,s0,s1              ;114
0001a4  eebd0ac0          VCVT.S32.F32 s0,s0                 ;114
0001a8  ee100a10          VMOV     r0,s0                 ;114
0001ac  2164              MOVS     r1,#0x64              ;114
0001ae  fb90f2f1          SDIV     r2,r0,r1              ;114
0001b2  fb010012          MLS      r0,r1,r2,r0           ;114
0001b6  4240              RSBS     r0,r0,#0              ;114
                  |L1.440|
0001b8  4942              LDR      r1,|L1.708|
0001ba  6008              STR      r0,[r1,#0]            ;114  ; yaw_decimal
0001bc  483b              LDR      r0,|L1.684|
0001be  ed900a00          VLDR     s0,[r0,#0]            ;116
0001c2  eeb50ac0          VCMPE.F32 s0,#0.0               ;116
0001c6  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;116
0001ca  db02              BLT      |L1.466|
0001cc  2001              MOVS     r0,#1                 ;116
0001ce  493e              LDR      r1,|L1.712|
0001d0  6008              STR      r0,[r1,#0]            ;116  ; pitch_sign
                  |L1.466|
0001d2  4836              LDR      r0,|L1.684|
0001d4  ed900a00          VLDR     s0,[r0,#0]            ;117
0001d8  eeb50ac0          VCMPE.F32 s0,#0.0               ;117
0001dc  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;117
0001e0  d202              BCS      |L1.488|
0001e2  2000              MOVS     r0,#0                 ;117
0001e4  4938              LDR      r1,|L1.712|
0001e6  6008              STR      r0,[r1,#0]            ;117  ; pitch_sign
                  |L1.488|
0001e8  2000              MOVS     r0,#0                 ;118
0001ea  4938              LDR      r1,|L1.716|
0001ec  6008              STR      r0,[r1,#0]            ;118  ; pitch_int
0001ee  4938              LDR      r1,|L1.720|
0001f0  6008              STR      r0,[r1,#0]            ;119  ; pitch_decimal
0001f2  492a              LDR      r1,|L1.668|
0001f4  f9b10000          LDRSH    r0,[r1,#0]            ;122  ; stcGyro
0001f8  f7fffffe          BL       __aeabi_i2d
0001fc  ec410b19          VMOV     d9,r0,r1              ;122
000200  ed9f0b34          VLDR     d0,|L1.724|
000204  ec532b10          VMOV     r2,r3,d0              ;122
000208  f7fffffe          BL       __aeabi_ddiv
00020c  ec410b18          VMOV     d8,r0,r1              ;122
000210  ed9f0b32          VLDR     d0,|L1.732|
000214  ec532b10          VMOV     r2,r3,d0              ;122
000218  f7fffffe          BL       __aeabi_dmul
00021c  4a31              LDR      r2,|L1.740|
00021e  c203              STM      r2!,{r0,r1}           ;122
000220  491e              LDR      r1,|L1.668|
000222  f9b10002          LDRSH    r0,[r1,#2]            ;123  ; stcGyro
000226  f7fffffe          BL       __aeabi_i2d
00022a  ec410b19          VMOV     d9,r0,r1              ;123
00022e  ed9f0b29          VLDR     d0,|L1.724|
000232  ec532b10          VMOV     r2,r3,d0              ;123
000236  f7fffffe          BL       __aeabi_ddiv
00023a  ec410b18          VMOV     d8,r0,r1              ;123
00023e  ed9f0b27          VLDR     d0,|L1.732|
000242  ec532b10          VMOV     r2,r3,d0              ;123
000246  f7fffffe          BL       __aeabi_dmul
00024a  4a27              LDR      r2,|L1.744|
00024c  c203              STM      r2!,{r0,r1}           ;123
00024e  4913              LDR      r1,|L1.668|
000250  f9b10004          LDRSH    r0,[r1,#4]            ;124  ; stcGyro
000254  f7fffffe          BL       __aeabi_i2d
000258  ec410b19          VMOV     d9,r0,r1              ;124
00025c  ed9f0b1d          VLDR     d0,|L1.724|
000260  ec532b10          VMOV     r2,r3,d0              ;124
000264  f7fffffe          BL       __aeabi_ddiv
000268  ec410b18          VMOV     d8,r0,r1              ;124
00026c  ed9f0b1b          VLDR     d0,|L1.732|
000270  ec532b10          VMOV     r2,r3,d0              ;124
000274  f7fffffe          BL       __aeabi_dmul
000278  4a1c              LDR      r2,|L1.748|
00027a  c203              STM      r2!,{r0,r1}           ;124
00027c  bf00              NOP                            ;125
                  |L1.638|
00027e  bf00              NOP                            ;103
000280  2000              MOVS     r0,#0                 ;127
000282  4902              LDR      r1,|L1.652|
000284  7008              STRB     r0,[r1,#0]            ;127
000286  bf00              NOP      
000288  e6cc              B        |L1.36|
;;;130    
                          ENDP

00028a  0000              DCW      0x0000
                  |L1.652|
                          DCD      ucRxCnt
                  |L1.656|
                          DCD      ucRxBuffer
                  |L1.660|
                          DCD      stcTime
                  |L1.664|
                          DCD      stcAcc
                  |L1.668|
                          DCD      stcGyro
                  |L1.672|
                          DCD      stcAngle
                  |L1.676|
0002a4  47000000          DCFS     0x47000000 ; 32768
                  |L1.680|
0002a8  43340000          DCFS     0x43340000 ; 180
                  |L1.684|
                          DCD      pitch_Angle
                  |L1.688|
                          DCD      roll_Angle
                  |L1.692|
                          DCD      yaw_Angle
                  |L1.696|
                          DCD      yaw_sign
                  |L1.700|
                          DCD      yaw_int
                  |L1.704|
0002c0  42c80000          DCFS     0x42c80000 ; 100
                  |L1.708|
                          DCD      yaw_decimal
                  |L1.712|
                          DCD      pitch_sign
                  |L1.716|
                          DCD      pitch_int
                  |L1.720|
                          DCD      pitch_decimal
                  |L1.724|
0002d4  00000000          DCFD     0x40e0000000000000 ; 32768
0002d8  40e00000
                  |L1.732|
0002dc  00000000          DCFD     0x408f400000000000 ; 1000
0002e0  408f4000
                  |L1.740|
                          DCD      roll_Gyro
                  |L1.744|
                          DCD      pitch_Gyro
                  |L1.748|
                          DCD      yaw_Gyro

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;67     //串口中断
;;;68     void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;69     {
;;;70     	
;;;71         if(USART_GetITStatus(USART6, USART_IT_TXE) != RESET)
000002  f2407127          MOV      r1,#0x727
000006  481c              LDR      r0,|L2.120|
000008  f7fffffe          BL       USART_GetITStatus
00000c  b1e0              CBZ      r0,|L2.72|
;;;72         {   
;;;73             USART_SendData(USART6, TxBuffer[TxCounter++]); 
00000e  481b              LDR      r0,|L2.124|
000010  7802              LDRB     r2,[r0,#0]  ; TxCounter
000012  7800              LDRB     r0,[r0,#0]  ; TxCounter
000014  1c40              ADDS     r0,r0,#1
000016  4b19              LDR      r3,|L2.124|
000018  7018              STRB     r0,[r3,#0]
00001a  4819              LDR      r0,|L2.128|
00001c  5c81              LDRB     r1,[r0,r2]
00001e  4816              LDR      r0,|L2.120|
000020  f7fffffe          BL       USART_SendData
;;;74             USART_ClearITPendingBit(USART6, USART_IT_TXE);
000024  f2407127          MOV      r1,#0x727
000028  4813              LDR      r0,|L2.120|
00002a  f7fffffe          BL       USART_ClearITPendingBit
;;;75             if(TxCounter == count) USART_ITConfig(USART6, USART_IT_TXE, DISABLE);
00002e  4813              LDR      r0,|L2.124|
000030  7800              LDRB     r0,[r0,#0]  ; TxCounter
000032  4914              LDR      r1,|L2.132|
000034  7809              LDRB     r1,[r1,#0]  ; count
000036  4288              CMP      r0,r1
000038  d117              BNE      |L2.106|
00003a  2200              MOVS     r2,#0
00003c  f2407127          MOV      r1,#0x727
000040  480d              LDR      r0,|L2.120|
000042  f7fffffe          BL       USART_ITConfig
000046  e010              B        |L2.106|
                  |L2.72|
;;;76         }
;;;77         else if(USART_GetITStatus(USART6, USART_IT_RXNE) != RESET)
000048  f2405125          MOV      r1,#0x525
00004c  480a              LDR      r0,|L2.120|
00004e  f7fffffe          BL       USART_GetITStatus
000052  b150              CBZ      r0,|L2.106|
;;;78         {
;;;79             JY901_Data_Realize((unsigned char)USART6->DR);
000054  4908              LDR      r1,|L2.120|
000056  1d09              ADDS     r1,r1,#4
000058  8809              LDRH     r1,[r1,#0]
00005a  b2c8              UXTB     r0,r1
00005c  f7fffffe          BL       JY901_Data_Realize
;;;80             USART_ClearITPendingBit(USART6, USART_IT_RXNE);
000060  f2405125          MOV      r1,#0x525
000064  4804              LDR      r0,|L2.120|
000066  f7fffffe          BL       USART_ClearITPendingBit
                  |L2.106|
;;;81         }
;;;82     
;;;83         USART_ClearITPendingBit(USART6,USART_IT_ORE);
00006a  f44f7158          MOV      r1,#0x360
00006e  4802              LDR      r0,|L2.120|
000070  f7fffffe          BL       USART_ClearITPendingBit
;;;84     
;;;85     }
000074  bd10              POP      {r4,pc}
;;;86     
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
                          DCD      0x40011400
                  |L2.124|
                          DCD      TxCounter
                  |L2.128|
                          DCD      TxBuffer
                  |L2.132|
                          DCD      count

                          AREA ||i.usart2_Init||, CODE, READONLY, ALIGN=2

                  usart2_Init PROC
;;;22     
;;;23     void usart2_Init(u32 bound)
000000  b510              PUSH     {r4,lr}
;;;24     {
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;25         //GPIO端口设置
;;;26         GPIO_InitTypeDef GPIO_InitStructure;
;;;27         USART_InitTypeDef USART_InitStructure;
;;;28         NVIC_InitTypeDef NVIC_InitStructure;
;;;29     
;;;30         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
000006  2101              MOVS     r1,#1
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;31         RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
00000e  2101              MOVS     r1,#1
000010  0448              LSLS     r0,r1,#17
000012  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;32     
;;;33         //串口2对应引脚复用映射
;;;34         GPIO_PinAFConfig(GPIOA,GPIO_PinSource2,GPIO_AF_USART2); 
000016  2207              MOVS     r2,#7
000018  2102              MOVS     r1,#2
00001a  4824              LDR      r0,|L3.172|
00001c  f7fffffe          BL       GPIO_PinAFConfig
;;;35         GPIO_PinAFConfig(GPIOA,GPIO_PinSource3,GPIO_AF_USART2); 
000020  2207              MOVS     r2,#7
000022  2103              MOVS     r1,#3
000024  4821              LDR      r0,|L3.172|
000026  f7fffffe          BL       GPIO_PinAFConfig
;;;36     
;;;37         //USART2口配置
;;;38         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3; 
00002a  200c              MOVS     r0,#0xc
00002c  9006              STR      r0,[sp,#0x18]
;;;39         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00002e  2002              MOVS     r0,#2
000030  f88d001c          STRB     r0,[sp,#0x1c]
;;;40         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000034  2003              MOVS     r0,#3
000036  f88d001d          STRB     r0,[sp,#0x1d]
;;;41         GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00003a  2000              MOVS     r0,#0
00003c  f88d001e          STRB     r0,[sp,#0x1e]
;;;42         GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000040  2001              MOVS     r0,#1
000042  f88d001f          STRB     r0,[sp,#0x1f]
;;;43         GPIO_Init(GPIOA,&GPIO_InitStructure);
000046  a906              ADD      r1,sp,#0x18
000048  4818              LDR      r0,|L3.172|
00004a  f7fffffe          BL       GPIO_Init
;;;44     
;;;45         //USART2初始化设置
;;;46         USART_InitStructure.USART_BaudRate = bound;
00004e  9402              STR      r4,[sp,#8]
;;;47         USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000050  2000              MOVS     r0,#0
000052  f8ad000c          STRH     r0,[sp,#0xc]
;;;48         USART_InitStructure.USART_StopBits = USART_StopBits_1;
000056  f8ad000e          STRH     r0,[sp,#0xe]
;;;49         USART_InitStructure.USART_Parity = USART_Parity_No;
00005a  f8ad0010          STRH     r0,[sp,#0x10]
;;;50         USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00005e  f8ad0014          STRH     r0,[sp,#0x14]
;;;51         USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000062  200c              MOVS     r0,#0xc
000064  f8ad0012          STRH     r0,[sp,#0x12]
;;;52         USART_Init(USART2, &USART_InitStructure);
000068  a902              ADD      r1,sp,#8
00006a  4811              LDR      r0,|L3.176|
00006c  f7fffffe          BL       USART_Init
;;;53     
;;;54         USART_ClearFlag(USART2, USART_FLAG_TC);
000070  2140              MOVS     r1,#0x40
000072  480f              LDR      r0,|L3.176|
000074  f7fffffe          BL       USART_ClearFlag
;;;55         USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
000078  2201              MOVS     r2,#1
00007a  f2405125          MOV      r1,#0x525
00007e  480c              LDR      r0,|L3.176|
000080  f7fffffe          BL       USART_ITConfig
;;;56         USART_Cmd(USART2, ENABLE);
000084  2101              MOVS     r1,#1
000086  480a              LDR      r0,|L3.176|
000088  f7fffffe          BL       USART_Cmd
;;;57         
;;;58     
;;;59         //USART6 NVIC 配置
;;;60         NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
00008c  2026              MOVS     r0,#0x26
00008e  f88d0004          STRB     r0,[sp,#4]
;;;61         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0;
000092  2000              MOVS     r0,#0
000094  f88d0005          STRB     r0,[sp,#5]
;;;62         NVIC_InitStructure.NVIC_IRQChannelSubPriority =0;
000098  f88d0006          STRB     r0,[sp,#6]
;;;63         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00009c  2001              MOVS     r0,#1
00009e  f88d0007          STRB     r0,[sp,#7]
;;;64         NVIC_Init(&NVIC_InitStructure);
0000a2  a801              ADD      r0,sp,#4
0000a4  f7fffffe          BL       NVIC_Init
;;;65     }
0000a8  b008              ADD      sp,sp,#0x20
0000aa  bd10              POP      {r4,pc}
;;;66     
                          ENDP

                  |L3.172|
                          DCD      0x40020000
                  |L3.176|
                          DCD      0x40004400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  a
                          %        12
                  w_xyz
                          %        12
                  TxBuffer
                          %        256
                  ucRxBuffer
                          %        250

                          AREA ||.data||, DATA, ALIGN=3

                  stcTime
                          %        8
                  stcAcc
                          %        8
                  stcGyro
                          %        8
                  stcAngle
                          %        8
                  stcMag
                          %        8
                  stcDStatus
                          %        8
                  stcPress
                          %        8
                  stcLonLat
                          %        8
                  stcGPSV
                          %        8
                  yaw_sign
                          DCD      0x00000000
                  yaw_int
                          DCD      0x00000000
                  yaw_decimal
                          DCD      0x00000000
                  pitch_sign
                          DCD      0x00000000
                  pitch_int
                          DCD      0x00000000
                  pitch_decimal
                          DCD      0x00000000
                  T
                          DCD      0x00000000
                  roll_Angle
                          DCD      0x00000000
                  pitch_Angle
                          DCD      0x00000000
                  yaw_Angle
                          DCD      0x00000000
                  roll_Gyro
                          %        8
                  pitch_Gyro
                          %        8
                  yaw_Gyro
                          %        8
                  TxCounter
000088  00                DCB      0x00
                  count
000089  00                DCB      0x00
                  ucRxCnt
00008a  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\user\\_Bsp\\usart2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_usart2_c_f035ec1e____REV16|
#line 388 "..\\stm32LIB\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_usart2_c_f035ec1e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_usart2_c_f035ec1e____REVSH|
#line 402
|__asm___8_usart2_c_f035ec1e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_usart2_c_f035ec1e____RRX|
#line 587
|__asm___8_usart2_c_f035ec1e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
