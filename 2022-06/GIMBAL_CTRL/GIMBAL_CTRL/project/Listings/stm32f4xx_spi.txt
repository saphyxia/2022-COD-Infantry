; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\stm32f4xx_spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_spi.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\stm32LIB\inc -I..\stm32LIB\CMSIS\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\user\_Dsp\Include -I..\user\_Algorithms -I..\user\_Bsp -I..\user\_Device -I..\user\_Task -I..\system -I..\stm32LIB\CMSIS -I..\system -I..\FreeRTOS -I..\user -I.\RTE\_COD_Gimbal_Task -IC:\keil_v5_project\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM4 -D__FPU_PRESENT --omf_browse=.\objects\stm32f4xx_spi.crf ..\stm32LIB\src\stm32f4xx_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;561      */
;;;562    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L1.12|
;;;563    {
;;;564      /* Check the parameters */
;;;565      assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
;;;566      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;567      
;;;568      if (NewState != DISABLE)
;;;569      {
;;;570        /* Enable the selected SPI peripheral (in I2S mode) */
;;;571        SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
000002  8b82              LDRH     r2,[r0,#0x1c]
000004  f4426280          ORR      r2,r2,#0x400
000008  8382              STRH     r2,[r0,#0x1c]
00000a  e004              B        |L1.22|
                  |L1.12|
;;;572      }
;;;573      else
;;;574      {
;;;575        /* Disable the selected SPI peripheral in I2S mode */
;;;576        SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
00000c  8b82              LDRH     r2,[r0,#0x1c]
00000e  f64f33ff          MOV      r3,#0xfbff
000012  401a              ANDS     r2,r2,r3
000014  8382              STRH     r2,[r0,#0x1c]
                  |L1.22|
;;;577      }
;;;578    }
000016  4770              BX       lr
;;;579    
                          ENDP


                          AREA ||i.I2S_FullDuplexConfig||, CODE, READONLY, ALIGN=1

                  I2S_FullDuplexConfig PROC
;;;726      */
;;;727    void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;728    {
;;;729      uint16_t tmpreg = 0, tmp = 0;
000002  2200              MOVS     r2,#0
000004  2300              MOVS     r3,#0
;;;730      
;;;731      /* Check the I2S parameters */
;;;732      assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
;;;733      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;734      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;735      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;736      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;737    
;;;738    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;739      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;740      I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
000006  8b84              LDRH     r4,[r0,#0x1c]
000008  f24f0540          MOV      r5,#0xf040
00000c  402c              ANDS     r4,r4,r5
00000e  8384              STRH     r4,[r0,#0x1c]
;;;741      I2Sxext->I2SPR = 0x0002;
000010  2402              MOVS     r4,#2
000012  8404              STRH     r4,[r0,#0x20]
;;;742      
;;;743      /* Get the I2SCFGR register value */
;;;744      tmpreg = I2Sxext->I2SCFGR;
000014  8b82              LDRH     r2,[r0,#0x1c]
;;;745      
;;;746      /* Get the mode to be configured for the extended I2S */
;;;747      if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
000016  880c              LDRH     r4,[r1,#0]
000018  f5b47f00          CMP      r4,#0x200
00001c  d001              BEQ      |L2.34|
00001e  880c              LDRH     r4,[r1,#0]
000020  b914              CBNZ     r4,|L2.40|
                  |L2.34|
;;;748      {
;;;749        tmp = I2S_Mode_SlaveRx;
000022  f44f7380          MOV      r3,#0x100
000026  e008              B        |L2.58|
                  |L2.40|
;;;750      }
;;;751      else
;;;752      {
;;;753        if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
000028  880c              LDRH     r4,[r1,#0]
00002a  f5b47f40          CMP      r4,#0x300
00002e  d003              BEQ      |L2.56|
000030  880c              LDRH     r4,[r1,#0]
000032  f5b47f80          CMP      r4,#0x100
000036  d100              BNE      |L2.58|
                  |L2.56|
;;;754        {
;;;755          tmp = I2S_Mode_SlaveTx;
000038  2300              MOVS     r3,#0
                  |L2.58|
;;;756        }
;;;757      }
;;;758    
;;;759     
;;;760      /* Configure the I2S with the SPI_InitStruct values */
;;;761      tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
00003a  888c              LDRH     r4,[r1,#4]
00003c  898d              LDRH     r5,[r1,#0xc]
00003e  432c              ORRS     r4,r4,r5
000040  884d              LDRH     r5,[r1,#2]
000042  432c              ORRS     r4,r4,r5
000044  431c              ORRS     r4,r4,r3
000046  f4446400          ORR      r4,r4,#0x800
00004a  4322              ORRS     r2,r2,r4
;;;762                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;763                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;764     
;;;765      /* Write to SPIx I2SCFGR */  
;;;766      I2Sxext->I2SCFGR = tmpreg;
00004c  8382              STRH     r2,[r0,#0x1c]
;;;767    }
00004e  bd30              POP      {r4,r5,pc}
;;;768    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=2

                  I2S_Init PROC
;;;347      */
;;;348    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;349    {
;;;350      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
000004  2500              MOVS     r5,#0
000006  2302              MOVS     r3,#2
000008  2400              MOVS     r4,#0
00000a  2701              MOVS     r7,#1
;;;351      uint32_t tmp = 0, i2sclk = 0;
00000c  2200              MOVS     r2,#0
00000e  2600              MOVS     r6,#0
;;;352    #ifndef I2S_EXTERNAL_CLOCK_VAL
;;;353      uint32_t pllm = 0, plln = 0, pllr = 0;
000010  4694              MOV      r12,r2
000012  4690              MOV      r8,r2
000014  4691              MOV      r9,r2
;;;354    #endif /* I2S_EXTERNAL_CLOCK_VAL */
;;;355      
;;;356      /* Check the I2S parameters */
;;;357      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;358      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;359      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;360      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;361      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;362      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;363      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;364    
;;;365    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;366      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;367      SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
000016  f8b0a01c          LDRH     r10,[r0,#0x1c]
00001a  f24f0b40          MOV      r11,#0xf040
00001e  ea0a0a0b          AND      r10,r10,r11
000022  f8a0a01c          STRH     r10,[r0,#0x1c]
;;;368      SPIx->I2SPR = 0x0002;
000026  f04f0a02          MOV      r10,#2
00002a  f8a0a020          STRH     r10,[r0,#0x20]
;;;369      
;;;370      /* Get the I2SCFGR register value */
;;;371      tmpreg = SPIx->I2SCFGR;
00002e  8b85              LDRH     r5,[r0,#0x1c]
;;;372      
;;;373      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;374      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
000030  f8d1a008          LDR      r10,[r1,#8]
000034  f1ba0f02          CMP      r10,#2
000038  d101              BNE      |L3.62|
;;;375      {
;;;376        i2sodd = (uint16_t)0;
00003a  bf00              NOP      
;;;377        i2sdiv = (uint16_t)2;   
00003c  e06c              B        |L3.280|
                  |L3.62|
;;;378      }
;;;379      /* If the requested audio frequency is not the default, compute the prescaler */
;;;380      else
;;;381      {
;;;382        /* Check the frame length (For the Prescaler computing) *******************/
;;;383        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
00003e  f8b1a004          LDRH     r10,[r1,#4]
000042  f1ba0f00          CMP      r10,#0
000046  d101              BNE      |L3.76|
;;;384        {
;;;385          /* Packet length is 16 bits */
;;;386          packetlength = 1;
000048  2701              MOVS     r7,#1
00004a  e000              B        |L3.78|
                  |L3.76|
;;;387        }
;;;388        else
;;;389        {
;;;390          /* Packet length is 32 bits */
;;;391          packetlength = 2;
00004c  2702              MOVS     r7,#2
                  |L3.78|
;;;392        }
;;;393    
;;;394        /* Get I2S source Clock frequency  ****************************************/
;;;395          
;;;396        /* If an external I2S clock has to be used, this define should be set  
;;;397           in the project configuration or in the stm32f4xx_conf.h file */
;;;398      #ifdef I2S_EXTERNAL_CLOCK_VAL     
;;;399        /* Set external clock as I2S clock source */
;;;400        if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
;;;401        {
;;;402          RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
;;;403        }
;;;404        
;;;405        /* Set the I2S clock to the external clock  value */
;;;406        i2sclk = I2S_EXTERNAL_CLOCK_VAL;
;;;407    
;;;408      #else /* There is no define for External I2S clock source */
;;;409        /* Set PLLI2S as I2S clock source */
;;;410        if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
00004e  f8dfa110          LDR      r10,|L3.352|
000052  f8daa000          LDR      r10,[r10,#0]
000056  f40a0a00          AND      r10,r10,#0x800000
00005a  f1ba0f00          CMP      r10,#0
00005e  d009              BEQ      |L3.116|
;;;411        {
;;;412          RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
000060  f8dfa0fc          LDR      r10,|L3.352|
000064  f8daa000          LDR      r10,[r10,#0]
000068  f42a0a00          BIC      r10,r10,#0x800000
00006c  f8dfb0f0          LDR      r11,|L3.352|
000070  f8cba000          STR      r10,[r11,#0]
                  |L3.116|
;;;413        }    
;;;414        
;;;415        /* Get the PLLI2SN value */
;;;416        plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
000074  f8dfa0e8          LDR      r10,|L3.352|
000078  f10a0a7c          ADD      r10,r10,#0x7c
00007c  f8daa000          LDR      r10,[r10,#0]
000080  f3ca1888          UBFX     r8,r10,#6,#9
;;;417                          (RCC_PLLI2SCFGR_PLLI2SN >> 6));
;;;418        
;;;419        /* Get the PLLI2SR value */
;;;420        pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
000084  f8dfa0d8          LDR      r10,|L3.352|
000088  f10a0a7c          ADD      r10,r10,#0x7c
00008c  f8daa000          LDR      r10,[r10,#0]
000090  f3ca7902          UBFX     r9,r10,#28,#3
;;;421                          (RCC_PLLI2SCFGR_PLLI2SR >> 28));
;;;422        
;;;423        /* Get the PLLM value */
;;;424        pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
000094  f8dfa0c8          LDR      r10,|L3.352|
000098  f1aa0a04          SUB      r10,r10,#4
00009c  f8daa000          LDR      r10,[r10,#0]
0000a0  f00a0c3f          AND      r12,r10,#0x3f
;;;425    
;;;426        /* Get the I2S source clock value */
;;;427        i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
0000a4  f8dfa0bc          LDR      r10,|L3.356|
0000a8  fbbafafc          UDIV     r10,r10,r12
0000ac  fb0afa08          MUL      r10,r10,r8
0000b0  fbbaf6f9          UDIV     r6,r10,r9
;;;428      #endif /* I2S_EXTERNAL_CLOCK_VAL */
;;;429        
;;;430        /* Compute the Real divider depending on the MCLK output state, with a floating point */
;;;431        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
0000b4  f8b1a006          LDRH     r10,[r1,#6]
0000b8  f5ba7f00          CMP      r10,#0x200
0000bc  d10e              BNE      |L3.220|
;;;432        {
;;;433          /* MCLK output is enabled */
;;;434          tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
0000be  ea4f2a16          LSR      r10,r6,#8
0000c2  eb0a0a8a          ADD      r10,r10,r10,LSL #2
0000c6  ea4f0a4a          LSL      r10,r10,#1
0000ca  f8d1b008          LDR      r11,[r1,#8]
0000ce  fbbafafb          UDIV     r10,r10,r11
0000d2  f10a0a05          ADD      r10,r10,#5
0000d6  fa1ff28a          UXTH     r2,r10
0000da  e00f              B        |L3.252|
                  |L3.220|
;;;435        }
;;;436        else
;;;437        {
;;;438          /* MCLK output is disabled */
;;;439          tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
0000dc  ea4f1a47          LSL      r10,r7,#5
0000e0  fbb6fafa          UDIV     r10,r6,r10
0000e4  eb0a0a8a          ADD      r10,r10,r10,LSL #2
0000e8  ea4f0a4a          LSL      r10,r10,#1
0000ec  f8d1b008          LDR      r11,[r1,#8]
0000f0  fbbafafb          UDIV     r10,r10,r11
0000f4  f10a0a05          ADD      r10,r10,#5
0000f8  fa1ff28a          UXTH     r2,r10
                  |L3.252|
;;;440        }
;;;441        
;;;442        /* Remove the flatting point */
;;;443        tmp = tmp / 10;  
0000fc  f04f0a0a          MOV      r10,#0xa
000100  fbb2f2fa          UDIV     r2,r2,r10
;;;444          
;;;445        /* Check the parity of the divider */
;;;446        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
000104  f0020401          AND      r4,r2,#1
;;;447       
;;;448        /* Compute the i2sdiv prescaler */
;;;449        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
000108  eba20a04          SUB      r10,r2,r4
00010c  f3ca034f          UBFX     r3,r10,#1,#16
;;;450       
;;;451        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;452        i2sodd = (uint16_t) (i2sodd << 8);
000110  f64f7aff          MOV      r10,#0xffff
000114  ea0a2404          AND      r4,r10,r4,LSL #8
                  |L3.280|
;;;453      }
;;;454    
;;;455      /* Test if the divider is 1 or 0 or greater than 0xFF */
;;;456      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
000118  2b02              CMP      r3,#2
00011a  db01              BLT      |L3.288|
00011c  2bff              CMP      r3,#0xff
00011e  dd01              BLE      |L3.292|
                  |L3.288|
;;;457      {
;;;458        /* Set the default values */
;;;459        i2sdiv = 2;
000120  2302              MOVS     r3,#2
;;;460        i2sodd = 0;
000122  2400              MOVS     r4,#0
                  |L3.292|
;;;461      }
;;;462    
;;;463      /* Write to SPIx I2SPR register the computed value */
;;;464      SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
000124  f8b1a006          LDRH     r10,[r1,#6]
000128  ea4a0a04          ORR      r10,r10,r4
00012c  ea4a0a03          ORR      r10,r10,r3
000130  f8a0a020          STRH     r10,[r0,#0x20]
;;;465     
;;;466      /* Configure the I2S with the SPI_InitStruct values */
;;;467      tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
000134  f8b1a004          LDRH     r10,[r1,#4]
000138  f8b1b00c          LDRH     r11,[r1,#0xc]
00013c  ea4a0a0b          ORR      r10,r10,r11
000140  f8b1b002          LDRH     r11,[r1,#2]
000144  ea4a0a0b          ORR      r10,r10,r11
000148  f8b1b000          LDRH     r11,[r1,#0]
00014c  ea4a0a0b          ORR      r10,r10,r11
000150  f44a6a00          ORR      r10,r10,#0x800
000154  ea4a0505          ORR      r5,r10,r5
;;;468                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;469                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;470     
;;;471      /* Write to SPIx I2SCFGR */  
;;;472      SPIx->I2SCFGR = tmpreg;
000158  8385              STRH     r5,[r0,#0x1c]
;;;473    }
00015a  e8bd8ff0          POP      {r4-r11,pc}
;;;474    
                          ENDP

00015e  0000              DCW      0x0000
                  |L3.352|
                          DCD      0x40023808
                  |L3.356|
                          DCD      0x017d7840

                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;507      */
;;;508    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;509    {
;;;510    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;511      /* Initialize the I2S_Mode member */
;;;512      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;513      
;;;514      /* Initialize the I2S_Standard member */
;;;515      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;516      
;;;517      /* Initialize the I2S_DataFormat member */
;;;518      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;519      
;;;520      /* Initialize the I2S_MCLKOutput member */
;;;521      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;522      
;;;523      /* Initialize the I2S_AudioFreq member */
;;;524      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2102              MOVS     r1,#2
00000c  6081              STR      r1,[r0,#8]
;;;525      
;;;526      /* Initialize the I2S_CPOL member */
;;;527      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000e  2100              MOVS     r1,#0
000010  8181              STRH     r1,[r0,#0xc]
;;;528    }
000012  4770              BX       lr
;;;529    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;608      */
;;;609    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;610    {
;;;611      /* Check the parameters */
;;;612      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;613      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;614      if (SPI_Direction == SPI_Direction_Tx)
000004  d104              BNE      |L5.16|
;;;615      {
;;;616        /* Set the Tx only mode */
;;;617        SPIx->CR1 |= SPI_Direction_Tx;
000006  8802              LDRH     r2,[r0,#0]
000008  f4424280          ORR      r2,r2,#0x4000
00000c  8002              STRH     r2,[r0,#0]
00000e  e004              B        |L5.26|
                  |L5.16|
;;;618      }
;;;619      else
;;;620      {
;;;621        /* Set the Rx only mode */
;;;622        SPIx->CR1 &= SPI_Direction_Rx;
000010  8802              LDRH     r2,[r0,#0]
000012  f64b73ff          MOV      r3,#0xbfff
000016  401a              ANDS     r2,r2,r3
000018  8002              STRH     r2,[r0,#0]
                  |L5.26|
;;;623      }
;;;624    }
00001a  4770              BX       lr
;;;625    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;906      */
;;;907    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L6.12|
;;;908    {
;;;909      /* Check the parameters */
;;;910      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;911      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;912      if (NewState != DISABLE)
;;;913      {
;;;914        /* Enable the selected SPI CRC calculation */
;;;915        SPIx->CR1 |= SPI_CR1_CRCEN;
000002  8802              LDRH     r2,[r0,#0]
000004  f4425200          ORR      r2,r2,#0x2000
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L6.22|
                  |L6.12|
;;;916      }
;;;917      else
;;;918      {
;;;919        /* Disable the selected SPI CRC calculation */
;;;920        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64d73ff          MOV      r3,#0xdfff
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L6.22|
;;;921      }
;;;922    }
000016  4770              BX       lr
;;;923    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;536      */
;;;537    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L7.12|
;;;538    {
;;;539      /* Check the parameters */
;;;540      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;541      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;542      if (NewState != DISABLE)
;;;543      {
;;;544        /* Enable the selected SPI peripheral */
;;;545        SPIx->CR1 |= SPI_CR1_SPE;
000002  8802              LDRH     r2,[r0,#0]
000004  f0420240          ORR      r2,r2,#0x40
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L7.22|
                  |L7.12|
;;;546      }
;;;547      else
;;;548      {
;;;549        /* Disable the selected SPI peripheral */
;;;550        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64f73bf          MOV      r3,#0xffbf
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L7.22|
;;;551      }
;;;552    }
000016  4770              BX       lr
;;;553    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;588      */
;;;589    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;590    {
;;;591      /* Check the parameters */
;;;592      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;593      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;594      /* Clear DFF bit */
;;;595      SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
000002  f24f73ff          MOV      r3,#0xf7ff
000006  401a              ANDS     r2,r2,r3
000008  8002              STRH     r2,[r0,#0]
;;;596      /* Set new DFF bit value */
;;;597      SPIx->CR1 |= SPI_DataSize;
00000a  8802              LDRH     r2,[r0,#0]
00000c  430a              ORRS     r2,r2,r1
00000e  8002              STRH     r2,[r0,#0]
;;;598    }
000010  4770              BX       lr
;;;599    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;946      */
;;;947    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  4602              MOV      r2,r0
;;;948    {
;;;949      uint16_t crcreg = 0;
000002  2000              MOVS     r0,#0
;;;950      /* Check the parameters */
;;;951      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;952      assert_param(IS_SPI_CRC(SPI_CRC));
;;;953      if (SPI_CRC != SPI_CRC_Rx)
000004  2901              CMP      r1,#1
000006  d001              BEQ      |L9.12|
;;;954      {
;;;955        /* Get the Tx CRC register */
;;;956        crcreg = SPIx->TXCRCR;
000008  8b10              LDRH     r0,[r2,#0x18]
00000a  e000              B        |L9.14|
                  |L9.12|
;;;957      }
;;;958      else
;;;959      {
;;;960        /* Get the Rx CRC register */
;;;961        crcreg = SPIx->RXCRCR;
00000c  8a90              LDRH     r0,[r2,#0x14]
                  |L9.14|
;;;962      }
;;;963      /* Return the selected CRC register */
;;;964      return crcreg;
;;;965    }
00000e  4770              BX       lr
;;;966    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;971      */
;;;972    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;973    {
;;;974      /* Check the parameters */
;;;975      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;976      
;;;977      /* Return the CRC polynomial register */
;;;978      return SPIx->CRCPR;
000002  8a08              LDRH     r0,[r1,#0x10]
;;;979    }
000004  4770              BX       lr
;;;980    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;1201     */
;;;1202   void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  43ca              MVNS     r2,r1
;;;1203   {
;;;1204     /* Check the parameters */
;;;1205     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1206     assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;1207       
;;;1208     /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;1209     SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000002  8102              STRH     r2,[r0,#8]
;;;1210   }
000004  4770              BX       lr
;;;1211   
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;1281     */
;;;1282   void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;1283   {
;;;1284     uint16_t itpos = 0;
000002  2200              MOVS     r2,#0
;;;1285     /* Check the parameters */
;;;1286     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1287     assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;1288   
;;;1289     /* Get the SPI_I2S IT index */
;;;1290     itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000004  f001040f          AND      r4,r1,#0xf
000008  2301              MOVS     r3,#1
00000a  40a3              LSLS     r3,r3,r4
00000c  b29a              UXTH     r2,r3
;;;1291   
;;;1292     /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
;;;1293     SPIx->SR = (uint16_t)~itpos;
00000e  43d3              MVNS     r3,r2
000010  8103              STRH     r3,[r0,#8]
;;;1294   }
000012  bd10              POP      {r4,pc}
;;;1295   
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;1008     */
;;;1009   void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  b11a              CBZ      r2,|L13.10|
;;;1010   {
;;;1011     /* Check the parameters */
;;;1012     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1013     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1014     assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;1015   
;;;1016     if (NewState != DISABLE)
;;;1017     {
;;;1018       /* Enable the selected SPI DMA requests */
;;;1019       SPIx->CR2 |= SPI_I2S_DMAReq;
000002  8883              LDRH     r3,[r0,#4]
000004  430b              ORRS     r3,r3,r1
000006  8083              STRH     r3,[r0,#4]
000008  e002              B        |L13.16|
                  |L13.10|
;;;1020     }
;;;1021     else
;;;1022     {
;;;1023       /* Disable the selected SPI DMA requests */
;;;1024       SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
00000a  8883              LDRH     r3,[r0,#4]
00000c  438b              BICS     r3,r3,r1
00000e  8083              STRH     r3,[r0,#4]
                  |L13.16|
;;;1025     }
;;;1026   }
000010  4770              BX       lr
;;;1027   
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;223      */
;;;224    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;225    {
000002  4604              MOV      r4,r0
;;;226      /* Check the parameters */
;;;227      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;228    
;;;229      if (SPIx == SPI1)
000004  4824              LDR      r0,|L14.152|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L14.28|
;;;230      {
;;;231        /* Enable SPI1 reset state */
;;;232        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  1480              ASRS     r0,r0,#18
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;233        /* Release SPI1 from reset state */
;;;234        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
000012  2100              MOVS     r1,#0
000014  14a0              ASRS     r0,r4,#18
000016  f7fffffe          BL       RCC_APB2PeriphResetCmd
00001a  e03c              B        |L14.150|
                  |L14.28|
;;;235      }
;;;236      else if (SPIx == SPI2)
00001c  481f              LDR      r0,|L14.156|
00001e  4284              CMP      r4,r0
000020  d108              BNE      |L14.52|
;;;237      {
;;;238        /* Enable SPI2 reset state */
;;;239        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
000022  2101              MOVS     r1,#1
000024  1400              ASRS     r0,r0,#16
000026  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;240        /* Release SPI2 from reset state */
;;;241        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
00002a  2100              MOVS     r1,#0
00002c  1420              ASRS     r0,r4,#16
00002e  f7fffffe          BL       RCC_APB1PeriphResetCmd
000032  e030              B        |L14.150|
                  |L14.52|
;;;242      }
;;;243      else if (SPIx == SPI3)
000034  481a              LDR      r0,|L14.160|
000036  4284              CMP      r4,r0
000038  d108              BNE      |L14.76|
;;;244      {
;;;245        /* Enable SPI3 reset state */
;;;246        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  13c0              ASRS     r0,r0,#15
00003e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;247        /* Release SPI3 from reset state */
;;;248        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
000042  2100              MOVS     r1,#0
000044  13e0              ASRS     r0,r4,#15
000046  f7fffffe          BL       RCC_APB1PeriphResetCmd
00004a  e024              B        |L14.150|
                  |L14.76|
;;;249      }
;;;250      else if (SPIx == SPI4)
00004c  4815              LDR      r0,|L14.164|
00004e  4284              CMP      r4,r0
000050  d108              BNE      |L14.100|
;;;251      {
;;;252        /* Enable SPI4 reset state */
;;;253        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
000052  2101              MOVS     r1,#1
000054  1440              ASRS     r0,r0,#17
000056  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;254        /* Release SPI4 from reset state */
;;;255        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
00005a  2100              MOVS     r1,#0
00005c  1460              ASRS     r0,r4,#17
00005e  f7fffffe          BL       RCC_APB2PeriphResetCmd
000062  e018              B        |L14.150|
                  |L14.100|
;;;256      }
;;;257      else if (SPIx == SPI5)
000064  4810              LDR      r0,|L14.168|
000066  4284              CMP      r4,r0
000068  d109              BNE      |L14.126|
;;;258      {
;;;259        /* Enable SPI5 reset state */
;;;260        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
00006a  2101              MOVS     r1,#1
00006c  0508              LSLS     r0,r1,#20
00006e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;261        /* Release SPI5 from reset state */
;;;262        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
000072  2100              MOVS     r1,#0
000074  f44f1080          MOV      r0,#0x100000
000078  f7fffffe          BL       RCC_APB2PeriphResetCmd
00007c  e00b              B        |L14.150|
                  |L14.126|
;;;263      }
;;;264      else 
;;;265      {
;;;266        if (SPIx == SPI6)
00007e  480b              LDR      r0,|L14.172|
000080  4284              CMP      r4,r0
000082  d108              BNE      |L14.150|
;;;267        {
;;;268          /* Enable SPI6 reset state */
;;;269          RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
000084  2101              MOVS     r1,#1
000086  0548              LSLS     r0,r1,#21
000088  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;270          /* Release SPI6 from reset state */
;;;271          RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
00008c  2100              MOVS     r1,#0
00008e  f44f1000          MOV      r0,#0x200000
000092  f7fffffe          BL       RCC_APB2PeriphResetCmd
                  |L14.150|
;;;272        }
;;;273      }
;;;274    }
000096  bd10              POP      {r4,pc}
;;;275    
                          ENDP

                  |L14.152|
                          DCD      0x40013000
                  |L14.156|
                          DCD      0x40003800
                  |L14.160|
                          DCD      0x40003c00
                  |L14.164|
                          DCD      0x40013400
                  |L14.168|
                          DCD      0x40015000
                  |L14.172|
                          DCD      0x40015400

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;1160     */
;;;1161   FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;1162   {
;;;1163     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1164     /* Check the parameters */
;;;1165     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1166     assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;1167     
;;;1168     /* Check the status of the specified SPI flag */
;;;1169     if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000004  8913              LDRH     r3,[r2,#8]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L15.14|
;;;1170     {
;;;1171       /* SPI_I2S_FLAG is set */
;;;1172       bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L15.16|
                  |L15.14|
;;;1173     }
;;;1174     else
;;;1175     {
;;;1176       /* SPI_I2S_FLAG is reset */
;;;1177       bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L15.16|
;;;1178     }
;;;1179     /* Return the SPI_I2S_FLAG status */
;;;1180     return  bitstatus;
;;;1181   }
000010  4770              BX       lr
;;;1182   
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;1226     */
;;;1227   ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1228   {
000002  4602              MOV      r2,r0
;;;1229     ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1230     uint16_t itpos = 0, itmask = 0, enablestatus = 0;
000006  2400              MOVS     r4,#0
000008  2300              MOVS     r3,#0
00000a  2500              MOVS     r5,#0
;;;1231   
;;;1232     /* Check the parameters */
;;;1233     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1234     assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;1235   
;;;1236     /* Get the SPI_I2S_IT index */
;;;1237     itpos = 0x01 << (SPI_I2S_IT & 0x0F);
00000c  f001070f          AND      r7,r1,#0xf
000010  2601              MOVS     r6,#1
000012  40be              LSLS     r6,r6,r7
000014  b2b4              UXTH     r4,r6
;;;1238   
;;;1239     /* Get the SPI_I2S_IT IT mask */
;;;1240     itmask = SPI_I2S_IT >> 4;
000016  110b              ASRS     r3,r1,#4
;;;1241   
;;;1242     /* Set the IT mask */
;;;1243     itmask = 0x01 << itmask;
000018  2601              MOVS     r6,#1
00001a  409e              LSLS     r6,r6,r3
00001c  b2b3              UXTH     r3,r6
;;;1244   
;;;1245     /* Get the SPI_I2S_IT enable bit status */
;;;1246     enablestatus = (SPIx->CR2 & itmask) ;
00001e  8896              LDRH     r6,[r2,#4]
000020  ea060503          AND      r5,r6,r3
;;;1247   
;;;1248     /* Check the status of the specified SPI interrupt */
;;;1249     if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
000024  8916              LDRH     r6,[r2,#8]
000026  4026              ANDS     r6,r6,r4
000028  b116              CBZ      r6,|L16.48|
00002a  b10d              CBZ      r5,|L16.48|
;;;1250     {
;;;1251       /* SPI_I2S_IT is set */
;;;1252       bitstatus = SET;
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L16.50|
                  |L16.48|
;;;1253     }
;;;1254     else
;;;1255     {
;;;1256       /* SPI_I2S_IT is reset */
;;;1257       bitstatus = RESET;
000030  2000              MOVS     r0,#0
                  |L16.50|
;;;1258     }
;;;1259     /* Return the SPI_I2S_IT status */
;;;1260     return bitstatus;
;;;1261   }
000032  bdf0              POP      {r4-r7,pc}
;;;1262   
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;1116     */
;;;1117   void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;1118   {
;;;1119     uint16_t itpos = 0, itmask = 0 ;
000002  2400              MOVS     r4,#0
000004  2300              MOVS     r3,#0
;;;1120     
;;;1121     /* Check the parameters */
;;;1122     assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;1123     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1124     assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;1125   
;;;1126     /* Get the SPI IT index */
;;;1127     itpos = SPI_I2S_IT >> 4;
000006  110c              ASRS     r4,r1,#4
;;;1128   
;;;1129     /* Set the IT mask */
;;;1130     itmask = (uint16_t)1 << (uint16_t)itpos;
000008  2501              MOVS     r5,#1
00000a  40a5              LSLS     r5,r5,r4
00000c  b2ab              UXTH     r3,r5
;;;1131   
;;;1132     if (NewState != DISABLE)
00000e  b11a              CBZ      r2,|L17.24|
;;;1133     {
;;;1134       /* Enable the selected SPI interrupt */
;;;1135       SPIx->CR2 |= itmask;
000010  8885              LDRH     r5,[r0,#4]
000012  431d              ORRS     r5,r5,r3
000014  8085              STRH     r5,[r0,#4]
000016  e002              B        |L17.30|
                  |L17.24|
;;;1136     }
;;;1137     else
;;;1138     {
;;;1139       /* Disable the selected SPI interrupt */
;;;1140       SPIx->CR2 &= (uint16_t)~itmask;
000018  8885              LDRH     r5,[r0,#4]
00001a  439d              BICS     r5,r5,r3
00001c  8085              STRH     r5,[r0,#4]
                  |L17.30|
;;;1141     }
;;;1142   }
00001e  bd30              POP      {r4,r5,pc}
;;;1143   
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;800      */
;;;801    uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;802    {
;;;803      /* Check the parameters */
;;;804      assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;805      
;;;806      /* Return the data in the DR register */
;;;807      return SPIx->DR;
000002  8988              LDRH     r0,[r1,#0xc]
;;;808    }
000004  4770              BX       lr
;;;809    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;816      */
;;;817    void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;818    {
;;;819      /* Check the parameters */
;;;820      assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
;;;821      
;;;822      /* Write in the DR register the data to be sent */
;;;823      SPIx->DR = Data;
;;;824    }
000002  4770              BX       lr
;;;825    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;283      */
;;;284    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;285    {
;;;286      uint16_t tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;287      
;;;288      /* check the parameters */
;;;289      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;290      
;;;291      /* Check the SPI parameters */
;;;292      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;293      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;294      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;295      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;296      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;297      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;298      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;299      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;300      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;301    
;;;302    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;303      /* Get the SPIx CR1 value */
;;;304      tmpreg = SPIx->CR1;
000004  8802              LDRH     r2,[r0,#0]
;;;305      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;306      tmpreg &= CR1_CLEAR_MASK;
000006  f4025241          AND      r2,r2,#0x3040
;;;307      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;308         master/salve mode, CPOL and CPHA */
;;;309      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;310      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;311      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;312      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;313      /* Set CPOL bit according to SPI_CPOL value */
;;;314      /* Set CPHA bit according to SPI_CPHA value */
;;;315      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
00000a  880b              LDRH     r3,[r1,#0]
00000c  884c              LDRH     r4,[r1,#2]
00000e  4323              ORRS     r3,r3,r4
000010  888c              LDRH     r4,[r1,#4]
000012  4323              ORRS     r3,r3,r4
000014  88cc              LDRH     r4,[r1,#6]
000016  4323              ORRS     r3,r3,r4
000018  890c              LDRH     r4,[r1,#8]
00001a  4323              ORRS     r3,r3,r4
00001c  894c              LDRH     r4,[r1,#0xa]
00001e  4323              ORRS     r3,r3,r4
000020  898c              LDRH     r4,[r1,#0xc]
000022  4323              ORRS     r3,r3,r4
000024  89cc              LDRH     r4,[r1,#0xe]
000026  4323              ORRS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
;;;316                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;317                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;318                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;319      /* Write to SPIx CR1 */
;;;320      SPIx->CR1 = tmpreg;
00002a  8002              STRH     r2,[r0,#0]
;;;321    
;;;322      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;323      SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
00002c  8b83              LDRH     r3,[r0,#0x1c]
00002e  f24f74ff          MOV      r4,#0xf7ff
000032  4023              ANDS     r3,r3,r4
000034  8383              STRH     r3,[r0,#0x1c]
;;;324    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;325      /* Write to SPIx CRCPOLY */
;;;326      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000036  8a0b              LDRH     r3,[r1,#0x10]
000038  8203              STRH     r3,[r0,#0x10]
;;;327    }
00003a  bd10              POP      {r4,pc}
;;;328    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;634      */
;;;635    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  f64f62ff          MOV      r2,#0xfeff
;;;636    {
;;;637      /* Check the parameters */
;;;638      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;639      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;640      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
000004  4291              CMP      r1,r2
000006  d004              BEQ      |L21.18|
;;;641      {
;;;642        /* Set NSS pin internally by software */
;;;643        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
000008  8802              LDRH     r2,[r0,#0]
00000a  f4427280          ORR      r2,r2,#0x100
00000e  8002              STRH     r2,[r0,#0]
000010  e004              B        |L21.28|
                  |L21.18|
;;;644      }
;;;645      else
;;;646      {
;;;647        /* Reset NSS pin internally by software */
;;;648        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000012  8802              LDRH     r2,[r0,#0]
000014  f64f63ff          MOV      r3,#0xfeff
000018  401a              ANDS     r2,r2,r3
00001a  8002              STRH     r2,[r0,#0]
                  |L21.28|
;;;649      }
;;;650    }
00001c  4770              BX       lr
;;;651    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;658      */
;;;659    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L22.12|
;;;660    {
;;;661      /* Check the parameters */
;;;662      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;663      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;664      if (NewState != DISABLE)
;;;665      {
;;;666        /* Enable the selected SPI SS output */
;;;667        SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
000002  8882              LDRH     r2,[r0,#4]
000004  f0420204          ORR      r2,r2,#4
000008  8082              STRH     r2,[r0,#4]
00000a  e004              B        |L22.22|
                  |L22.12|
;;;668      }
;;;669      else
;;;670      {
;;;671        /* Disable the selected SPI SS output */
;;;672        SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
00000c  8882              LDRH     r2,[r0,#4]
00000e  f64f73fb          MOV      r3,#0xfffb
000012  401a              ANDS     r2,r2,r3
000014  8082              STRH     r2,[r0,#4]
                  |L22.22|
;;;673      }
;;;674    }
000016  4770              BX       lr
;;;675    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;479      */
;;;480    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;481    {
;;;482    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;483      /* Initialize the SPI_Direction member */
;;;484      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;485      /* initialize the SPI_Mode member */
;;;486      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;487      /* initialize the SPI_DataSize member */
;;;488      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;489      /* Initialize the SPI_CPOL member */
;;;490      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;491      /* Initialize the SPI_CPHA member */
;;;492      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;493      /* Initialize the SPI_NSS member */
;;;494      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;495      /* Initialize the SPI_BaudRatePrescaler member */
;;;496      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;497      /* Initialize the SPI_FirstBit member */
;;;498      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;499      /* Initialize the SPI_CRCPolynomial member */
;;;500      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;501    }
000016  4770              BX       lr
;;;502    
                          ENDP


                          AREA ||i.SPI_TIModeCmd||, CODE, READONLY, ALIGN=1

                  SPI_TIModeCmd PROC
;;;689      */
;;;690    void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L24.12|
;;;691    {
;;;692      /* Check the parameters */
;;;693      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;694      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;695    
;;;696      if (NewState != DISABLE)
;;;697      {
;;;698        /* Enable the TI mode for the selected SPI peripheral */
;;;699        SPIx->CR2 |= SPI_CR2_FRF;
000002  8882              LDRH     r2,[r0,#4]
000004  f0420210          ORR      r2,r2,#0x10
000008  8082              STRH     r2,[r0,#4]
00000a  e004              B        |L24.22|
                  |L24.12|
;;;700      }
;;;701      else
;;;702      {
;;;703        /* Disable the TI mode for the selected SPI peripheral */
;;;704        SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
00000c  8882              LDRH     r2,[r0,#4]
00000e  f64f73ef          MOV      r3,#0xffef
000012  401a              ANDS     r2,r2,r3
000014  8082              STRH     r2,[r0,#4]
                  |L24.22|
;;;705      }
;;;706    }
000016  4770              BX       lr
;;;707    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;928      */
;;;929    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;930    {
;;;931      /* Check the parameters */
;;;932      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;933      
;;;934      /* Enable the selected SPI CRC transmission */
;;;935      SPIx->CR1 |= SPI_CR1_CRCNEXT;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;936    }
000008  4770              BX       lr
;;;937    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32LIB\\src\\stm32f4xx_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_spi_c_2b928927____REV16|
#line 388 "..\\stm32LIB\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_stm32f4xx_spi_c_2b928927____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_spi_c_2b928927____REVSH|
#line 402
|__asm___15_stm32f4xx_spi_c_2b928927____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_spi_c_2b928927____RRX|
#line 587
|__asm___15_stm32f4xx_spi_c_2b928927____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
