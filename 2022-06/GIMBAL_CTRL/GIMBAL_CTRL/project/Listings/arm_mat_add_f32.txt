; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\arm_mat_add_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mat_add_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\stm32LIB\inc -I..\stm32LIB\CMSIS\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\user\_Dsp\Include -I..\user\_Algorithms -I..\user\_Bsp -I..\user\_Device -I..\user\_Task -I..\system -I..\stm32LIB\CMSIS -I..\system -I..\FreeRTOS -I..\user -I.\RTE\_COD_Gimbal_Task -IC:\keil_v5_project\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM4 -D__FPU_PRESENT --omf_browse=.\objects\arm_mat_add_f32.crf ..\stm32LIB\Device\arm_mat_add_f32.c]
                          THUMB

                          AREA ||i.arm_mat_add_f32||, CODE, READONLY, ALIGN=1

                  arm_mat_add_f32 PROC
;;;72     
;;;73     arm_status arm_mat_add_f32(
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;74       const arm_matrix_instance_f32 * pSrcA,
;;;75       const arm_matrix_instance_f32 * pSrcB,
;;;76       arm_matrix_instance_f32 * pDst)
;;;77     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;78       float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
00000a  6861              LDR      r1,[r4,#4]
;;;79       float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
00000c  6872              LDR      r2,[r6,#4]
;;;80       float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
00000e  687b              LDR      r3,[r7,#4]
;;;81     
;;;82     #ifndef ARM_MATH_CM0_FAMILY
;;;83     
;;;84       float32_t inA1, inA2, inB1, inB2, out1, out2;  /* temporary variables */
;;;85     
;;;86     #endif //      #ifndef ARM_MATH_CM0_FAMILY
;;;87     
;;;88       uint32_t numSamples;                           /* total number of elements in the matrix  */
;;;89       uint32_t blkCnt;                               /* loop counters */
;;;90       arm_status status;                             /* status of matrix addition */
;;;91     
;;;92     #ifdef ARM_MATH_MATRIX_CHECK
;;;93       /* Check for matrix mismatch condition */
;;;94       if((pSrcA->numRows != pSrcB->numRows) ||
;;;95          (pSrcA->numCols != pSrcB->numCols) ||
;;;96          (pSrcA->numRows != pDst->numRows) || (pSrcA->numCols != pDst->numCols))
;;;97       {
;;;98         /* Set status as ARM_MATH_SIZE_MISMATCH */
;;;99         status = ARM_MATH_SIZE_MISMATCH;
;;;100      }
;;;101      else
;;;102    #endif
;;;103      {
;;;104    
;;;105        /* Total number of samples in the input matrix */
;;;106        numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
000010  f8b48000          LDRH     r8,[r4,#0]
000014  f8b49002          LDRH     r9,[r4,#2]
000018  fb08fc09          MUL      r12,r8,r9
;;;107    
;;;108    #ifndef ARM_MATH_CM0_FAMILY
;;;109    
;;;110        /* Loop unrolling */
;;;111        blkCnt = numSamples >> 2u;
00001c  ea4f059c          LSR      r5,r12,#2
;;;112    
;;;113        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;114         ** a second loop below computes the remaining 1 to 3 samples. */
;;;115        while(blkCnt > 0u)
000020  e03b              B        |L1.154|
                  |L1.34|
;;;116        {
;;;117          /* C(m,n) = A(m,n) + B(m,n) */
;;;118          /* Add and then store the results in the destination buffer. */
;;;119          /* Read values from source A */
;;;120          inA1 = pIn1[0];
000022  ed913a00          VLDR     s6,[r1,#0]
000026  eeb00a43          VMOV.F32 s0,s6
;;;121    
;;;122          /* Read values from source B */
;;;123          inB1 = pIn2[0];
00002a  ed923a00          VLDR     s6,[r2,#0]
00002e  eeb01a43          VMOV.F32 s2,s6
;;;124    
;;;125          /* Read values from source A */
;;;126          inA2 = pIn1[1];
000032  ed913a01          VLDR     s6,[r1,#4]
000036  eef00a43          VMOV.F32 s1,s6
;;;127    
;;;128          /* out = sourceA + sourceB */
;;;129          out1 = inA1 + inB1;
00003a  ee303a01          VADD.F32 s6,s0,s2
00003e  eeb02a43          VMOV.F32 s4,s6
;;;130    
;;;131          /* Read values from source B */
;;;132          inB2 = pIn2[1];
000042  ed923a01          VLDR     s6,[r2,#4]
000046  eef01a43          VMOV.F32 s3,s6
;;;133    
;;;134          /* Read values from source A */
;;;135          inA1 = pIn1[2];
00004a  ed913a02          VLDR     s6,[r1,#8]
00004e  eeb00a43          VMOV.F32 s0,s6
;;;136    
;;;137          /* out = sourceA + sourceB */
;;;138          out2 = inA2 + inB2;
000052  ee303aa1          VADD.F32 s6,s1,s3
000056  eef02a43          VMOV.F32 s5,s6
;;;139    
;;;140          /* Read values from source B */
;;;141          inB1 = pIn2[2];
00005a  ed923a02          VLDR     s6,[r2,#8]
00005e  eeb01a43          VMOV.F32 s2,s6
;;;142    
;;;143          /* Store result in destination */
;;;144          pOut[0] = out1;
000062  ed832a00          VSTR     s4,[r3,#0]
;;;145          pOut[1] = out2;
000066  edc32a01          VSTR     s5,[r3,#4]
;;;146    
;;;147          /* Read values from source A */
;;;148          inA2 = pIn1[3];
00006a  ed913a03          VLDR     s6,[r1,#0xc]
00006e  eef00a43          VMOV.F32 s1,s6
;;;149    
;;;150          /* Read values from source B */
;;;151          inB2 = pIn2[3];
000072  ed923a03          VLDR     s6,[r2,#0xc]
000076  eef01a43          VMOV.F32 s3,s6
;;;152    
;;;153          /* out = sourceA + sourceB */
;;;154          out1 = inA1 + inB1;
00007a  ee303a01          VADD.F32 s6,s0,s2
00007e  eeb02a43          VMOV.F32 s4,s6
;;;155    
;;;156          /* out = sourceA + sourceB */
;;;157          out2 = inA2 + inB2;
000082  ee303aa1          VADD.F32 s6,s1,s3
000086  eef02a43          VMOV.F32 s5,s6
;;;158    
;;;159          /* Store result in destination */
;;;160          pOut[2] = out1;
00008a  ed832a02          VSTR     s4,[r3,#8]
;;;161    
;;;162          /* Store result in destination */
;;;163          pOut[3] = out2;
00008e  edc32a03          VSTR     s5,[r3,#0xc]
;;;164    
;;;165    
;;;166          /* update pointers to process next sampels */
;;;167          pIn1 += 4u;
000092  3110              ADDS     r1,r1,#0x10
;;;168          pIn2 += 4u;
000094  3210              ADDS     r2,r2,#0x10
;;;169          pOut += 4u;
000096  3310              ADDS     r3,r3,#0x10
;;;170          /* Decrement the loop counter */
;;;171          blkCnt--;
000098  1e6d              SUBS     r5,r5,#1
                  |L1.154|
00009a  2d00              CMP      r5,#0                 ;115
00009c  d1c1              BNE      |L1.34|
;;;172        }
;;;173    
;;;174        /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;175         ** No loop unrolling is used. */
;;;176        blkCnt = numSamples % 0x4u;
00009e  f00c0503          AND      r5,r12,#3
;;;177    
;;;178    #else
;;;179    
;;;180        /* Run the below code for Cortex-M0 */
;;;181    
;;;182        /* Initialize blkCnt with number of samples */
;;;183        blkCnt = numSamples;
;;;184    
;;;185    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;186    
;;;187        while(blkCnt > 0u)
0000a2  e008              B        |L1.182|
                  |L1.164|
;;;188        {
;;;189          /* C(m,n) = A(m,n) + B(m,n) */
;;;190          /* Add and then store the results in the destination buffer. */
;;;191          *pOut++ = (*pIn1++) + (*pIn2++);
0000a4  ecb13a01          VLDM     r1!,{s6}
0000a8  ecf23a01          VLDM     r2!,{s7}
0000ac  ee333a23          VADD.F32 s6,s6,s7
0000b0  eca33a01          VSTM     r3!,{s6}
;;;192    
;;;193          /* Decrement the loop counter */
;;;194          blkCnt--;
0000b4  1e6d              SUBS     r5,r5,#1
                  |L1.182|
0000b6  2d00              CMP      r5,#0                 ;187
0000b8  d1f4              BNE      |L1.164|
;;;195        }
;;;196    
;;;197        /* set status as ARM_MATH_SUCCESS */
;;;198        status = ARM_MATH_SUCCESS;
0000ba  2000              MOVS     r0,#0
;;;199    
;;;200      }
;;;201    
;;;202      /* Return to application */
;;;203      return (status);
;;;204    }
0000bc  e8bd83f0          POP      {r4-r9,pc}
;;;205    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32LIB\\Device\\arm_mat_add_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_add_f32_c_959515dd____REV16|
#line 388 "..\\stm32LIB\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___17_arm_mat_add_f32_c_959515dd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_add_f32_c_959515dd____REVSH|
#line 402
|__asm___17_arm_mat_add_f32_c_959515dd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_arm_mat_add_f32_c_959515dd____RRX|
#line 587
|__asm___17_arm_mat_add_f32_c_959515dd____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
