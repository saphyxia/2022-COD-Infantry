; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\stm32f4xx_flash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f4xx_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\stm32LIB\inc -I..\stm32LIB\CMSIS\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\user\_Dsp\Include -I..\user\_Algorithms -I..\user\_Bsp -I..\user\_Device -I..\user\_Task -I..\system -I..\stm32LIB\CMSIS -I..\system -I..\FreeRTOS -I..\user -I.\RTE\_COD_Gimbal_Task -IC:\keil_v5_project\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM4 -D__FPU_PRESENT --omf_browse=.\objects\stm32f4xx_flash.crf ..\stm32LIB\src\stm32f4xx_flash.c]
                          THUMB

                          AREA ||i.FLASH_ClearFlag||, CODE, READONLY, ALIGN=2

                  FLASH_ClearFlag PROC
;;;1480     */
;;;1481   void FLASH_ClearFlag(uint32_t FLASH_FLAG)
000000  4901              LDR      r1,|L1.8|
;;;1482   {
;;;1483     /* Check the parameters */
;;;1484     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
;;;1485     
;;;1486     /* Clear the flags */
;;;1487     FLASH->SR = FLASH_FLAG;
000002  6008              STR      r0,[r1,#0]
;;;1488   }
000004  4770              BX       lr
;;;1489   
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x40023c0c

                          AREA ||i.FLASH_DataCacheCmd||, CODE, READONLY, ALIGN=2

                  FLASH_DataCacheCmd PROC
;;;305      */
;;;306    void FLASH_DataCacheCmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L2.16|
;;;307    {
;;;308      /* Check the parameters */
;;;309      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;310      
;;;311      if(NewState != DISABLE)
;;;312      {
;;;313        FLASH->ACR |= FLASH_ACR_DCEN;
000002  4907              LDR      r1,|L2.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4416180          ORR      r1,r1,#0x400
00000a  4a05              LDR      r2,|L2.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L2.28|
                  |L2.16|
;;;314      }
;;;315      else
;;;316      {
;;;317        FLASH->ACR &= (~FLASH_ACR_DCEN);
000010  4903              LDR      r1,|L2.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4216180          BIC      r1,r1,#0x400
000018  4a01              LDR      r2,|L2.32|
00001a  6011              STR      r1,[r2,#0]
                  |L2.28|
;;;318      }
;;;319    }
00001c  4770              BX       lr
;;;320    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0x40023c00

                          AREA ||i.FLASH_DataCacheReset||, CODE, READONLY, ALIGN=2

                  FLASH_DataCacheReset PROC
;;;337      */
;;;338    void FLASH_DataCacheReset(void)
000000  4803              LDR      r0,|L3.16|
;;;339    {
;;;340      FLASH->ACR |= FLASH_ACR_DCRST;
000002  6800              LDR      r0,[r0,#0]
000004  f4405080          ORR      r0,r0,#0x1000
000008  4901              LDR      r1,|L3.16|
00000a  6008              STR      r0,[r1,#0]
;;;341    }
00000c  4770              BX       lr
;;;342    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40023c00

                          AREA ||i.FLASH_EraseAllBank1Sectors||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllBank1Sectors PROC
;;;585      */
;;;586    FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
000000  b530              PUSH     {r4,r5,lr}
;;;587    {
000002  4602              MOV      r2,r0
;;;588      uint32_t tmp_psize = 0x0;
000004  2500              MOVS     r5,#0
;;;589      FLASH_Status status = FLASH_COMPLETE;
000006  2409              MOVS     r4,#9
;;;590      
;;;591      /* Wait for last operation to be completed */
;;;592      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4604              MOV      r4,r0
;;;593      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;594      
;;;595      if(VoltageRange == VoltageRange_1)
00000e  b902              CBNZ     r2,|L4.18|
;;;596      {
;;;597         tmp_psize = FLASH_PSIZE_BYTE;
000010  e009              B        |L4.38|
                  |L4.18|
;;;598      }
;;;599      else if(VoltageRange == VoltageRange_2)
000012  2a01              CMP      r2,#1
000014  d101              BNE      |L4.26|
;;;600      {
;;;601        tmp_psize = FLASH_PSIZE_HALF_WORD;
000016  0215              LSLS     r5,r2,#8
000018  e005              B        |L4.38|
                  |L4.26|
;;;602      }
;;;603      else if(VoltageRange == VoltageRange_3)
00001a  2a02              CMP      r2,#2
00001c  d101              BNE      |L4.34|
;;;604      {
;;;605        tmp_psize = FLASH_PSIZE_WORD;
00001e  0215              LSLS     r5,r2,#8
000020  e001              B        |L4.38|
                  |L4.34|
;;;606      }
;;;607      else
;;;608      {
;;;609        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
000022  f44f7540          MOV      r5,#0x300
                  |L4.38|
;;;610      }  
;;;611      if(status == FLASH_COMPLETE)
000026  2c09              CMP      r4,#9
000028  d11c              BNE      |L4.100|
;;;612      {
;;;613        /* if the previous operation is completed, proceed to erase all sectors */
;;;614         FLASH->CR &= CR_PSIZE_MASK;
00002a  480f              LDR      r0,|L4.104|
00002c  6800              LDR      r0,[r0,#0]
00002e  f4207040          BIC      r0,r0,#0x300
000032  490d              LDR      r1,|L4.104|
000034  6008              STR      r0,[r1,#0]
;;;615         FLASH->CR |= tmp_psize;
000036  4608              MOV      r0,r1
000038  6800              LDR      r0,[r0,#0]
00003a  4328              ORRS     r0,r0,r5
00003c  6008              STR      r0,[r1,#0]
;;;616         FLASH->CR |= FLASH_CR_MER1;
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]
000042  f0400004          ORR      r0,r0,#4
000046  6008              STR      r0,[r1,#0]
;;;617         FLASH->CR |= FLASH_CR_STRT;
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]
00004c  f4403080          ORR      r0,r0,#0x10000
000050  6008              STR      r0,[r1,#0]
;;;618        
;;;619        /* Wait for last operation to be completed */
;;;620        status = FLASH_WaitForLastOperation();
000052  f7fffffe          BL       FLASH_WaitForLastOperation
000056  4604              MOV      r4,r0
;;;621    
;;;622        /* if the erase operation is completed, disable the MER Bit */
;;;623        FLASH->CR &= (~FLASH_CR_MER1);
000058  4803              LDR      r0,|L4.104|
00005a  6800              LDR      r0,[r0,#0]
00005c  f0200004          BIC      r0,r0,#4
000060  4901              LDR      r1,|L4.104|
000062  6008              STR      r0,[r1,#0]
                  |L4.100|
;;;624    
;;;625      }   
;;;626      /* Return the Erase Status */
;;;627      return status;
000064  4620              MOV      r0,r4
;;;628    }
000066  bd30              POP      {r4,r5,pc}
;;;629    
                          ENDP

                  |L4.104|
                          DCD      0x40023c10

                          AREA ||i.FLASH_EraseAllBank2Sectors||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllBank2Sectors PROC
;;;652      */
;;;653    FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
000000  b530              PUSH     {r4,r5,lr}
;;;654    {
000002  4602              MOV      r2,r0
;;;655      uint32_t tmp_psize = 0x0;
000004  2500              MOVS     r5,#0
;;;656      FLASH_Status status = FLASH_COMPLETE;
000006  2409              MOVS     r4,#9
;;;657      
;;;658      /* Wait for last operation to be completed */
;;;659      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4604              MOV      r4,r0
;;;660      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;661      
;;;662      if(VoltageRange == VoltageRange_1)
00000e  b902              CBNZ     r2,|L5.18|
;;;663      {
;;;664         tmp_psize = FLASH_PSIZE_BYTE;
000010  e009              B        |L5.38|
                  |L5.18|
;;;665      }
;;;666      else if(VoltageRange == VoltageRange_2)
000012  2a01              CMP      r2,#1
000014  d101              BNE      |L5.26|
;;;667      {
;;;668        tmp_psize = FLASH_PSIZE_HALF_WORD;
000016  0215              LSLS     r5,r2,#8
000018  e005              B        |L5.38|
                  |L5.26|
;;;669      }
;;;670      else if(VoltageRange == VoltageRange_3)
00001a  2a02              CMP      r2,#2
00001c  d101              BNE      |L5.34|
;;;671      {
;;;672        tmp_psize = FLASH_PSIZE_WORD;
00001e  0215              LSLS     r5,r2,#8
000020  e001              B        |L5.38|
                  |L5.34|
;;;673      }
;;;674      else
;;;675      {
;;;676        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
000022  f44f7540          MOV      r5,#0x300
                  |L5.38|
;;;677      }  
;;;678      if(status == FLASH_COMPLETE)
000026  2c09              CMP      r4,#9
000028  d11c              BNE      |L5.100|
;;;679      {
;;;680        /* if the previous operation is completed, proceed to erase all sectors */
;;;681         FLASH->CR &= CR_PSIZE_MASK;
00002a  480f              LDR      r0,|L5.104|
00002c  6800              LDR      r0,[r0,#0]
00002e  f4207040          BIC      r0,r0,#0x300
000032  490d              LDR      r1,|L5.104|
000034  6008              STR      r0,[r1,#0]
;;;682         FLASH->CR |= tmp_psize;
000036  4608              MOV      r0,r1
000038  6800              LDR      r0,[r0,#0]
00003a  4328              ORRS     r0,r0,r5
00003c  6008              STR      r0,[r1,#0]
;;;683         FLASH->CR |= FLASH_CR_MER2;
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]
000042  f4404000          ORR      r0,r0,#0x8000
000046  6008              STR      r0,[r1,#0]
;;;684         FLASH->CR |= FLASH_CR_STRT;
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]
00004c  f4403080          ORR      r0,r0,#0x10000
000050  6008              STR      r0,[r1,#0]
;;;685        
;;;686        /* Wait for last operation to be completed */
;;;687        status = FLASH_WaitForLastOperation();
000052  f7fffffe          BL       FLASH_WaitForLastOperation
000056  4604              MOV      r4,r0
;;;688    
;;;689        /* if the erase operation is completed, disable the MER Bit */
;;;690        FLASH->CR &= (~FLASH_CR_MER2);
000058  4803              LDR      r0,|L5.104|
00005a  6800              LDR      r0,[r0,#0]
00005c  f4204000          BIC      r0,r0,#0x8000
000060  4901              LDR      r1,|L5.104|
000062  6008              STR      r0,[r1,#0]
                  |L5.100|
;;;691    
;;;692      }   
;;;693      /* Return the Erase Status */
;;;694      return status;
000064  4620              MOV      r0,r4
;;;695    }
000066  bd30              POP      {r4,r5,pc}
;;;696    
                          ENDP

                  |L5.104|
                          DCD      0x40023c10

                          AREA ||i.FLASH_EraseAllSectors||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllSectors PROC
;;;504      */
;;;505    FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
000000  b530              PUSH     {r4,r5,lr}
;;;506    {
000002  4602              MOV      r2,r0
;;;507      uint32_t tmp_psize = 0x0;
000004  2500              MOVS     r5,#0
;;;508      FLASH_Status status = FLASH_COMPLETE;
000006  2409              MOVS     r4,#9
;;;509      
;;;510      /* Wait for last operation to be completed */
;;;511      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4604              MOV      r4,r0
;;;512      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;513      
;;;514      if(VoltageRange == VoltageRange_1)
00000e  b902              CBNZ     r2,|L6.18|
;;;515      {
;;;516         tmp_psize = FLASH_PSIZE_BYTE;
000010  e009              B        |L6.38|
                  |L6.18|
;;;517      }
;;;518      else if(VoltageRange == VoltageRange_2)
000012  2a01              CMP      r2,#1
000014  d101              BNE      |L6.26|
;;;519      {
;;;520        tmp_psize = FLASH_PSIZE_HALF_WORD;
000016  0215              LSLS     r5,r2,#8
000018  e005              B        |L6.38|
                  |L6.26|
;;;521      }
;;;522      else if(VoltageRange == VoltageRange_3)
00001a  2a02              CMP      r2,#2
00001c  d101              BNE      |L6.34|
;;;523      {
;;;524        tmp_psize = FLASH_PSIZE_WORD;
00001e  0215              LSLS     r5,r2,#8
000020  e001              B        |L6.38|
                  |L6.34|
;;;525      }
;;;526      else
;;;527      {
;;;528        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
000022  f44f7540          MOV      r5,#0x300
                  |L6.38|
;;;529      }  
;;;530      if(status == FLASH_COMPLETE)
000026  2c09              CMP      r4,#9
000028  d11c              BNE      |L6.100|
;;;531      {
;;;532        /* if the previous operation is completed, proceed to erase all sectors */
;;;533    #if defined (STM32F427_437xx) || defined (STM32F429_439xx)    
;;;534        FLASH->CR &= CR_PSIZE_MASK;
;;;535        FLASH->CR |= tmp_psize;
;;;536        FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
;;;537        FLASH->CR |= FLASH_CR_STRT;
;;;538        
;;;539        /* Wait for last operation to be completed */
;;;540        status = FLASH_WaitForLastOperation();
;;;541    
;;;542        /* if the erase operation is completed, disable the MER Bit */
;;;543        FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
;;;544    #endif /* STM32F427_437xx ||  STM32F429_439xx */
;;;545    
;;;546    #if defined (STM32F40_41xxx) || defined (STM32F401xx) 
;;;547        FLASH->CR &= CR_PSIZE_MASK;
00002a  480f              LDR      r0,|L6.104|
00002c  6800              LDR      r0,[r0,#0]
00002e  f4207040          BIC      r0,r0,#0x300
000032  490d              LDR      r1,|L6.104|
000034  6008              STR      r0,[r1,#0]
;;;548        FLASH->CR |= tmp_psize;
000036  4608              MOV      r0,r1
000038  6800              LDR      r0,[r0,#0]
00003a  4328              ORRS     r0,r0,r5
00003c  6008              STR      r0,[r1,#0]
;;;549        FLASH->CR |= FLASH_CR_MER;
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]
000042  f0400004          ORR      r0,r0,#4
000046  6008              STR      r0,[r1,#0]
;;;550        FLASH->CR |= FLASH_CR_STRT;
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]
00004c  f4403080          ORR      r0,r0,#0x10000
000050  6008              STR      r0,[r1,#0]
;;;551        
;;;552        /* Wait for last operation to be completed */
;;;553        status = FLASH_WaitForLastOperation();
000052  f7fffffe          BL       FLASH_WaitForLastOperation
000056  4604              MOV      r4,r0
;;;554    
;;;555        /* if the erase operation is completed, disable the MER Bit */
;;;556        FLASH->CR &= (~FLASH_CR_MER);
000058  4803              LDR      r0,|L6.104|
00005a  6800              LDR      r0,[r0,#0]
00005c  f0200004          BIC      r0,r0,#4
000060  4901              LDR      r1,|L6.104|
000062  6008              STR      r0,[r1,#0]
                  |L6.100|
;;;557    #endif /* STM32F40_41xxx || STM32F401xx */
;;;558    
;;;559      }   
;;;560      /* Return the Erase Status */
;;;561      return status;
000064  4620              MOV      r0,r4
;;;562    }
000066  bd30              POP      {r4,r5,pc}
;;;563    
                          ENDP

                  |L6.104|
                          DCD      0x40023c10

                          AREA ||i.FLASH_EraseSector||, CODE, READONLY, ALIGN=2

                  FLASH_EraseSector PROC
;;;436      */
;;;437    FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
000000  b570              PUSH     {r4-r6,lr}
;;;438    {
000002  4604              MOV      r4,r0
000004  460a              MOV      r2,r1
;;;439      uint32_t tmp_psize = 0x0;
000006  2600              MOVS     r6,#0
;;;440      FLASH_Status status = FLASH_COMPLETE;
000008  2509              MOVS     r5,#9
;;;441    
;;;442      /* Check the parameters */
;;;443      assert_param(IS_FLASH_SECTOR(FLASH_Sector));
;;;444      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;445      
;;;446      if(VoltageRange == VoltageRange_1)
00000a  b902              CBNZ     r2,|L7.14|
;;;447      {
;;;448         tmp_psize = FLASH_PSIZE_BYTE;
00000c  e009              B        |L7.34|
                  |L7.14|
;;;449      }
;;;450      else if(VoltageRange == VoltageRange_2)
00000e  2a01              CMP      r2,#1
000010  d101              BNE      |L7.22|
;;;451      {
;;;452        tmp_psize = FLASH_PSIZE_HALF_WORD;
000012  0216              LSLS     r6,r2,#8
000014  e005              B        |L7.34|
                  |L7.22|
;;;453      }
;;;454      else if(VoltageRange == VoltageRange_3)
000016  2a02              CMP      r2,#2
000018  d101              BNE      |L7.30|
;;;455      {
;;;456        tmp_psize = FLASH_PSIZE_WORD;
00001a  0216              LSLS     r6,r2,#8
00001c  e001              B        |L7.34|
                  |L7.30|
;;;457      }
;;;458      else
;;;459      {
;;;460        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
00001e  f44f7640          MOV      r6,#0x300
                  |L7.34|
;;;461      }
;;;462      /* Wait for last operation to be completed */
;;;463      status = FLASH_WaitForLastOperation();
000022  f7fffffe          BL       FLASH_WaitForLastOperation
000026  4605              MOV      r5,r0
;;;464      
;;;465      if(status == FLASH_COMPLETE)
000028  2d09              CMP      r5,#9
00002a  d128              BNE      |L7.126|
;;;466      { 
;;;467        /* if the previous operation is completed, proceed to erase the sector */
;;;468        FLASH->CR &= CR_PSIZE_MASK;
00002c  4815              LDR      r0,|L7.132|
00002e  6800              LDR      r0,[r0,#0]
000030  f4207040          BIC      r0,r0,#0x300
000034  4913              LDR      r1,|L7.132|
000036  6008              STR      r0,[r1,#0]
;;;469        FLASH->CR |= tmp_psize;
000038  4608              MOV      r0,r1
00003a  6800              LDR      r0,[r0,#0]
00003c  4330              ORRS     r0,r0,r6
00003e  6008              STR      r0,[r1,#0]
;;;470        FLASH->CR &= SECTOR_MASK;
000040  4608              MOV      r0,r1
000042  6800              LDR      r0,[r0,#0]
000044  f02000f8          BIC      r0,r0,#0xf8
000048  6008              STR      r0,[r1,#0]
;;;471        FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
00004a  4608              MOV      r0,r1
00004c  6800              LDR      r0,[r0,#0]
00004e  f0440102          ORR      r1,r4,#2
000052  4308              ORRS     r0,r0,r1
000054  490b              LDR      r1,|L7.132|
000056  6008              STR      r0,[r1,#0]
;;;472        FLASH->CR |= FLASH_CR_STRT;
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]
00005c  f4403080          ORR      r0,r0,#0x10000
000060  6008              STR      r0,[r1,#0]
;;;473        
;;;474        /* Wait for last operation to be completed */
;;;475        status = FLASH_WaitForLastOperation();
000062  f7fffffe          BL       FLASH_WaitForLastOperation
000066  4605              MOV      r5,r0
;;;476        
;;;477        /* if the erase operation is completed, disable the SER Bit */
;;;478        FLASH->CR &= (~FLASH_CR_SER);
000068  4806              LDR      r0,|L7.132|
00006a  6800              LDR      r0,[r0,#0]
00006c  f0200002          BIC      r0,r0,#2
000070  4904              LDR      r1,|L7.132|
000072  6008              STR      r0,[r1,#0]
;;;479        FLASH->CR &= SECTOR_MASK; 
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f02000f8          BIC      r0,r0,#0xf8
00007c  6008              STR      r0,[r1,#0]
                  |L7.126|
;;;480      }
;;;481      /* Return the Erase Status */
;;;482      return status;
00007e  4628              MOV      r0,r5
;;;483    }
000080  bd70              POP      {r4-r6,pc}
;;;484    
                          ENDP

000082  0000              DCW      0x0000
                  |L7.132|
                          DCD      0x40023c10

                          AREA ||i.FLASH_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetFlagStatus PROC
;;;1449     */
;;;1450   FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000000  4601              MOV      r1,r0
;;;1451   {
;;;1452     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1453     /* Check the parameters */
;;;1454     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
;;;1455   
;;;1456     if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L8.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L8.16|
;;;1457     {
;;;1458       bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L8.18|
                  |L8.16|
;;;1459     }
;;;1460     else
;;;1461     {
;;;1462       bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L8.18|
;;;1463     }
;;;1464     /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;1465     return bitstatus; 
;;;1466   }
000012  4770              BX       lr
;;;1467   
                          ENDP

                  |L8.20|
                          DCD      0x40023c0c

                          AREA ||i.FLASH_GetStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetStatus PROC
;;;1495     */
;;;1496   FLASH_Status FLASH_GetStatus(void)
000000  2009              MOVS     r0,#9
;;;1497   {
;;;1498     FLASH_Status flashstatus = FLASH_COMPLETE;
;;;1499     
;;;1500     if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
000002  4913              LDR      r1,|L9.80|
000004  6809              LDR      r1,[r1,#0]
000006  f4013180          AND      r1,r1,#0x10000
00000a  f5b13f80          CMP      r1,#0x10000
00000e  d101              BNE      |L9.20|
;;;1501     {
;;;1502       flashstatus = FLASH_BUSY;
000010  2001              MOVS     r0,#1
000012  e01c              B        |L9.78|
                  |L9.20|
;;;1503     }
;;;1504     else 
;;;1505     {  
;;;1506       if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
000014  490e              LDR      r1,|L9.80|
000016  6809              LDR      r1,[r1,#0]
000018  f0010110          AND      r1,r1,#0x10
00001c  b109              CBZ      r1,|L9.34|
;;;1507       { 
;;;1508         flashstatus = FLASH_ERROR_WRP;
00001e  2006              MOVS     r0,#6
000020  e015              B        |L9.78|
                  |L9.34|
;;;1509       }
;;;1510       else
;;;1511       {
;;;1512         if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
000022  490b              LDR      r1,|L9.80|
000024  6809              LDR      r1,[r1,#0]
000026  f4017180          AND      r1,r1,#0x100
00002a  b109              CBZ      r1,|L9.48|
;;;1513         { 
;;;1514           flashstatus = FLASH_ERROR_RD;
00002c  2002              MOVS     r0,#2
00002e  e00e              B        |L9.78|
                  |L9.48|
;;;1515         } 
;;;1516         else 
;;;1517         {
;;;1518           if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
000030  4907              LDR      r1,|L9.80|
000032  6809              LDR      r1,[r1,#0]
000034  f00101ef          AND      r1,r1,#0xef
000038  b109              CBZ      r1,|L9.62|
;;;1519           {
;;;1520             flashstatus = FLASH_ERROR_PROGRAM; 
00003a  2007              MOVS     r0,#7
00003c  e007              B        |L9.78|
                  |L9.62|
;;;1521           }
;;;1522           else
;;;1523           {
;;;1524             if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
00003e  4904              LDR      r1,|L9.80|
000040  6809              LDR      r1,[r1,#0]
000042  f0010102          AND      r1,r1,#2
000046  b109              CBZ      r1,|L9.76|
;;;1525             {
;;;1526               flashstatus = FLASH_ERROR_OPERATION;
000048  2008              MOVS     r0,#8
00004a  e000              B        |L9.78|
                  |L9.76|
;;;1527             }
;;;1528             else
;;;1529             {
;;;1530               flashstatus = FLASH_COMPLETE;
00004c  2009              MOVS     r0,#9
                  |L9.78|
;;;1531             }
;;;1532           }
;;;1533         }
;;;1534       }
;;;1535     }
;;;1536     /* Return the FLASH Status */
;;;1537     return flashstatus;
;;;1538   }
00004e  4770              BX       lr
;;;1539   
                          ENDP

                  |L9.80|
                          DCD      0x40023c0c

                          AREA ||i.FLASH_ITConfig||, CODE, READONLY, ALIGN=2

                  FLASH_ITConfig PROC
;;;1417     */
;;;1418   void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L10.14|
;;;1419   {
;;;1420     /* Check the parameters */
;;;1421     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1422     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1423   
;;;1424     if(NewState != DISABLE)
;;;1425     {
;;;1426       /* Enable the interrupt sources */
;;;1427       FLASH->CR |= FLASH_IT;
000002  4a06              LDR      r2,|L10.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L10.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L10.24|
                  |L10.14|
;;;1428     }
;;;1429     else
;;;1430     {
;;;1431       /* Disable the interrupt sources */
;;;1432       FLASH->CR &= ~(uint32_t)FLASH_IT;
00000e  4a03              LDR      r2,|L10.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L10.28|
000016  601a              STR      r2,[r3,#0]
                  |L10.24|
;;;1433     }
;;;1434   }
000018  4770              BX       lr
;;;1435   
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x40023c10

                          AREA ||i.FLASH_InstructionCacheCmd||, CODE, READONLY, ALIGN=2

                  FLASH_InstructionCacheCmd PROC
;;;284      */
;;;285    void FLASH_InstructionCacheCmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L11.16|
;;;286    {
;;;287      /* Check the parameters */
;;;288      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;289      
;;;290      if(NewState != DISABLE)
;;;291      {
;;;292        FLASH->ACR |= FLASH_ACR_ICEN;
000002  4907              LDR      r1,|L11.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4417100          ORR      r1,r1,#0x200
00000a  4a05              LDR      r2,|L11.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L11.28|
                  |L11.16|
;;;293      }
;;;294      else
;;;295      {
;;;296        FLASH->ACR &= (~FLASH_ACR_ICEN);
000010  4903              LDR      r1,|L11.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4217100          BIC      r1,r1,#0x200
000018  4a01              LDR      r2,|L11.32|
00001a  6011              STR      r1,[r2,#0]
                  |L11.28|
;;;297      }
;;;298    }
00001c  4770              BX       lr
;;;299    
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
                          DCD      0x40023c00

                          AREA ||i.FLASH_InstructionCacheReset||, CODE, READONLY, ALIGN=2

                  FLASH_InstructionCacheReset PROC
;;;326      */
;;;327    void FLASH_InstructionCacheReset(void)
000000  4803              LDR      r0,|L12.16|
;;;328    {
;;;329      FLASH->ACR |= FLASH_ACR_ICRST;
000002  6800              LDR      r0,[r0,#0]
000004  f4406000          ORR      r0,r0,#0x800
000008  4901              LDR      r1,|L12.16|
00000a  6008              STR      r0,[r1,#0]
;;;330    }
00000c  4770              BX       lr
;;;331    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0x40023c00

                          AREA ||i.FLASH_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_Lock PROC
;;;399      */
;;;400    void FLASH_Lock(void)
000000  4803              LDR      r0,|L13.16|
;;;401    {
;;;402      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;403      FLASH->CR |= FLASH_CR_LOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0404000          ORR      r0,r0,#0x80000000
000008  4901              LDR      r1,|L13.16|
00000a  6008              STR      r0,[r1,#0]
;;;404    }
00000c  4770              BX       lr
;;;405    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      0x40023c10

                          AREA ||i.FLASH_OB_BORConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_BORConfig PROC
;;;1262     */
;;;1263   void FLASH_OB_BORConfig(uint8_t OB_BOR)
000000  4905              LDR      r1,|L14.24|
;;;1264   {
;;;1265     /* Check the parameters */
;;;1266     assert_param(IS_OB_BOR(OB_BOR));
;;;1267   
;;;1268     /* Set the BOR Level */
;;;1269     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
000002  7809              LDRB     r1,[r1,#0]
000004  f021010c          BIC      r1,r1,#0xc
000008  4a03              LDR      r2,|L14.24|
00000a  7011              STRB     r1,[r2,#0]
;;;1270     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
00000c  4611              MOV      r1,r2
00000e  7809              LDRB     r1,[r1,#0]
000010  4301              ORRS     r1,r1,r0
000012  7011              STRB     r1,[r2,#0]
;;;1271   
;;;1272   }
000014  4770              BX       lr
;;;1273   
                          ENDP

000016  0000              DCW      0x0000
                  |L14.24|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_BootConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_BootConfig PROC
;;;1241     */
;;;1242   void FLASH_OB_BootConfig(uint8_t OB_BOOT)
000000  4905              LDR      r1,|L15.24|
;;;1243   {
;;;1244     /* Check the parameters */
;;;1245     assert_param(IS_OB_BOOT(OB_BOOT));
;;;1246   
;;;1247     /* Set Dual Bank Boot */
;;;1248     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
000002  7809              LDRB     r1,[r1,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  4a03              LDR      r2,|L15.24|
00000a  7011              STRB     r1,[r2,#0]
;;;1249     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
00000c  4611              MOV      r1,r2
00000e  7809              LDRB     r1,[r1,#0]
000010  4301              ORRS     r1,r1,r0
000012  7011              STRB     r1,[r2,#0]
;;;1250   
;;;1251   }
000014  4770              BX       lr
;;;1252   
                          ENDP

000016  0000              DCW      0x0000
                  |L15.24|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_GetBOR||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetBOR PROC
;;;1388     */
;;;1389   uint8_t FLASH_OB_GetBOR(void)
000000  4802              LDR      r0,|L16.12|
;;;1390   {
;;;1391     /* Return the FLASH BOR level */
;;;1392     return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
000002  7800              LDRB     r0,[r0,#0]
000004  f000000c          AND      r0,r0,#0xc
;;;1393   }
000008  4770              BX       lr
;;;1394   
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_GetPCROP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetPCROP PROC
;;;1337     */
;;;1338   uint16_t FLASH_OB_GetPCROP(void)
000000  4801              LDR      r0,|L17.8|
;;;1339   {
;;;1340     /* Return the FLASH PC Read/write protection Register value */
;;;1341     return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
000002  8800              LDRH     r0,[r0,#0]
;;;1342   }
000004  4770              BX       lr
;;;1343   
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x40023c16

                          AREA ||i.FLASH_OB_GetPCROP1||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetPCROP1 PROC
;;;1351     */
;;;1352   uint16_t FLASH_OB_GetPCROP1(void)
000000  4801              LDR      r0,|L18.8|
;;;1353   {
;;;1354     /* Return the FLASH write protection Register value */
;;;1355     return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
000002  8800              LDRH     r0,[r0,#0]
;;;1356   }
000004  4770              BX       lr
;;;1357   
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      0x40023c1a

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;1364     */
;;;1365   FlagStatus FLASH_OB_GetRDP(void)
000000  2000              MOVS     r0,#0
;;;1366   {
;;;1367     FlagStatus readstatus = RESET;
;;;1368   
;;;1369     if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
000002  4904              LDR      r1,|L19.20|
000004  7809              LDRB     r1,[r1,#0]
000006  29aa              CMP      r1,#0xaa
000008  d001              BEQ      |L19.14|
;;;1370     {
;;;1371       readstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L19.16|
                  |L19.14|
;;;1372     }
;;;1373     else
;;;1374     {
;;;1375       readstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L19.16|
;;;1376     }
;;;1377     return readstatus;
;;;1378   }
000010  4770              BX       lr
;;;1379   
                          ENDP

000012  0000              DCW      0x0000
                  |L19.20|
                          DCD      0x40023c15

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;1298     */
;;;1299   uint8_t FLASH_OB_GetUser(void)
000000  4802              LDR      r0,|L20.12|
;;;1300   {
;;;1301     /* Return the User Option Byte */
;;;1302     return (uint8_t)(FLASH->OPTCR >> 5);
000002  6800              LDR      r0,[r0,#0]
000004  f3c01047          UBFX     r0,r0,#5,#8
;;;1303   }
000008  4770              BX       lr
;;;1304   
                          ENDP

00000a  0000              DCW      0x0000
                  |L20.12|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;1309     */
;;;1310   uint16_t FLASH_OB_GetWRP(void)
000000  4801              LDR      r0,|L21.8|
;;;1311   {
;;;1312     /* Return the FLASH write protection Register value */
;;;1313     return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
000002  8800              LDRH     r0,[r0,#0]
;;;1314   }
000004  4770              BX       lr
;;;1315   
                          ENDP

000006  0000              DCW      0x0000
                  |L21.8|
                          DCD      0x40023c16

                          AREA ||i.FLASH_OB_GetWRP1||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP1 PROC
;;;1323     */
;;;1324   uint16_t FLASH_OB_GetWRP1(void)
000000  4801              LDR      r0,|L22.8|
;;;1325   {
;;;1326     /* Return the FLASH write protection Register value */
;;;1327     return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
000002  8800              LDRH     r0,[r0,#0]
;;;1328   }
000004  4770              BX       lr
;;;1329   
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      0x40023c1a

                          AREA ||i.FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Launch PROC
;;;1279     */
;;;1280   FLASH_Status FLASH_OB_Launch(void)
000000  b500              PUSH     {lr}
;;;1281   {
;;;1282     FLASH_Status status = FLASH_COMPLETE;
000002  2209              MOVS     r2,#9
;;;1283   
;;;1284     /* Set the OPTSTRT bit in OPTCR register */
;;;1285     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
000004  4805              LDR      r0,|L23.28|
000006  7800              LDRB     r0,[r0,#0]
000008  f0400002          ORR      r0,r0,#2
00000c  4903              LDR      r1,|L23.28|
00000e  7008              STRB     r0,[r1,#0]
;;;1286   
;;;1287     /* Wait for last operation to be completed */
;;;1288     status = FLASH_WaitForLastOperation();
000010  f7fffffe          BL       FLASH_WaitForLastOperation
000014  4602              MOV      r2,r0
;;;1289   
;;;1290     return status;
000016  4610              MOV      r0,r2
;;;1291   }
000018  bd00              POP      {pc}
;;;1292   
                          ENDP

00001a  0000              DCW      0x0000
                  |L23.28|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Lock PROC
;;;950      */
;;;951    void FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L24.16|
;;;952    {
;;;953      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;954      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L24.16|
00000a  6008              STR      r0,[r1,#0]
;;;955    }
00000c  4770              BX       lr
;;;956    
                          ENDP

00000e  0000              DCW      0x0000
                  |L24.16|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_PCROP1Config||, CODE, READONLY, ALIGN=2

                  FLASH_OB_PCROP1Config PROC
;;;1132     */
;;;1133   void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;1134   { 
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;1135     FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;1136     
;;;1137     /* Check the parameters */
;;;1138     assert_param(IS_OB_PCROP(OB_PCROP));
;;;1139     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1140       
;;;1141     status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;1142   
;;;1143     if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d10c              BNE      |L25.44|
;;;1144     { 
;;;1145       if(NewState != DISABLE)
000012  b134              CBZ      r4,|L25.34|
;;;1146       {
;;;1147         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
000014  4806              LDR      r0,|L25.48|
000016  8800              LDRH     r0,[r0,#0]
000018  b291              UXTH     r1,r2
00001a  4308              ORRS     r0,r0,r1
00001c  4904              LDR      r1,|L25.48|
00001e  8008              STRH     r0,[r1,#0]
000020  e004              B        |L25.44|
                  |L25.34|
;;;1148       }
;;;1149       else
;;;1150       {
;;;1151         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
000022  4803              LDR      r0,|L25.48|
000024  8800              LDRH     r0,[r0,#0]
000026  4390              BICS     r0,r0,r2
000028  4901              LDR      r1,|L25.48|
00002a  8008              STRH     r0,[r1,#0]
                  |L25.44|
;;;1152       }
;;;1153     }
;;;1154   }
00002c  bd30              POP      {r4,r5,pc}
;;;1155   
                          ENDP

00002e  0000              DCW      0x0000
                  |L25.48|
                          DCD      0x40023c1a

                          AREA ||i.FLASH_OB_PCROPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_PCROPConfig PROC
;;;1095     */
;;;1096   void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;1097   { 
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;1098     FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;1099     
;;;1100     /* Check the parameters */
;;;1101     assert_param(IS_OB_PCROP(OB_PCROP));
;;;1102     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1103       
;;;1104     status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;1105   
;;;1106     if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d10c              BNE      |L26.44|
;;;1107     { 
;;;1108       if(NewState != DISABLE)
000012  b134              CBZ      r4,|L26.34|
;;;1109       {
;;;1110         *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
000014  4806              LDR      r0,|L26.48|
000016  8800              LDRH     r0,[r0,#0]
000018  b291              UXTH     r1,r2
00001a  4308              ORRS     r0,r0,r1
00001c  4904              LDR      r1,|L26.48|
00001e  8008              STRH     r0,[r1,#0]
000020  e004              B        |L26.44|
                  |L26.34|
;;;1111       }
;;;1112       else
;;;1113       {
;;;1114         *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
000022  4803              LDR      r0,|L26.48|
000024  8800              LDRH     r0,[r0,#0]
000026  4390              BICS     r0,r0,r2
000028  4901              LDR      r1,|L26.48|
00002a  8008              STRH     r0,[r1,#0]
                  |L26.44|
;;;1115       }
;;;1116     }
;;;1117   }
00002c  bd30              POP      {r4,r5,pc}
;;;1118   
                          ENDP

00002e  0000              DCW      0x0000
                  |L26.48|
                          DCD      0x40023c16

                          AREA ||i.FLASH_OB_PCROPSelectionConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_PCROPSelectionConfig PROC
;;;1065     */
;;;1066   void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
000000  21ff              MOVS     r1,#0xff
;;;1067   {  
;;;1068     uint8_t optiontmp = 0xFF;
;;;1069         
;;;1070     /* Check the parameters */
;;;1071     assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
;;;1072     
;;;1073     /* Mask SPRMOD bit */
;;;1074     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
000002  4a04              LDR      r2,|L27.20|
000004  7812              LDRB     r2,[r2,#0]
000006  f002017f          AND      r1,r2,#0x7f
;;;1075     /* Update Option Byte */
;;;1076     *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
00000a  ea400201          ORR      r2,r0,r1
00000e  4b01              LDR      r3,|L27.20|
000010  701a              STRB     r2,[r3,#0]
;;;1077       
;;;1078   }
000012  4770              BX       lr
;;;1079   
                          ENDP

                  |L27.20|
                          DCD      0x40023c17

                          AREA ||i.FLASH_OB_RDPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDPConfig PROC
;;;1168     */
;;;1169   void FLASH_OB_RDPConfig(uint8_t OB_RDP)
000000  b510              PUSH     {r4,lr}
;;;1170   {
000002  4602              MOV      r2,r0
;;;1171     FLASH_Status status = FLASH_COMPLETE;
000004  2409              MOVS     r4,#9
;;;1172   
;;;1173     /* Check the parameters */
;;;1174     assert_param(IS_OB_RDP(OB_RDP));
;;;1175   
;;;1176     status = FLASH_WaitForLastOperation();
000006  f7fffffe          BL       FLASH_WaitForLastOperation
00000a  4604              MOV      r4,r0
;;;1177   
;;;1178     if(status == FLASH_COMPLETE)
00000c  2c09              CMP      r4,#9
00000e  d101              BNE      |L28.20|
;;;1179     {
;;;1180       *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
000010  4801              LDR      r0,|L28.24|
000012  7002              STRB     r2,[r0,#0]
                  |L28.20|
;;;1181   
;;;1182     }
;;;1183   }
000014  bd10              POP      {r4,pc}
;;;1184   
                          ENDP

000016  0000              DCW      0x0000
                  |L28.24|
                          DCD      0x40023c15

                          AREA ||i.FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Unlock PROC
;;;935      */
;;;936    void FLASH_OB_Unlock(void)
000000  4805              LDR      r0,|L29.24|
;;;937    {
;;;938      if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b128              CBZ      r0,|L29.22|
;;;939      {
;;;940        /* Authorizes the Option Byte register programming */
;;;941        FLASH->OPTKEYR = FLASH_OPT_KEY1;
00000a  4804              LDR      r0,|L29.28|
00000c  4902              LDR      r1,|L29.24|
00000e  390c              SUBS     r1,r1,#0xc
000010  6008              STR      r0,[r1,#0]
;;;942        FLASH->OPTKEYR = FLASH_OPT_KEY2;
000012  4803              LDR      r0,|L29.32|
000014  6008              STR      r0,[r1,#0]
                  |L29.22|
;;;943      }  
;;;944    }
000016  4770              BX       lr
;;;945    
                          ENDP

                  |L29.24|
                          DCD      0x40023c14
                  |L29.28|
                          DCD      0x08192a3b
                  |L29.32|
                          DCD      0x4c5d6e7f

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;1200     */
;;;1201   void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1202   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1203     uint8_t optiontmp = 0xFF;
000006  26ff              MOVS     r6,#0xff
;;;1204     FLASH_Status status = FLASH_COMPLETE; 
000008  2709              MOVS     r7,#9
;;;1205   
;;;1206     /* Check the parameters */
;;;1207     assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;1208     assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;1209     assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;1210   
;;;1211     /* Wait for last operation to be completed */
;;;1212     status = FLASH_WaitForLastOperation();
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
00000e  4607              MOV      r7,r0
;;;1213     
;;;1214     if(status == FLASH_COMPLETE)
000010  2f09              CMP      r7,#9
000012  d109              BNE      |L30.40|
;;;1215     { 
;;;1216   #if defined (STM32F427_437xx) || defined (STM32F429_439xx)     
;;;1217       /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
;;;1218       optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
;;;1219   #endif /* STM32F427_437xx ||  STM32F429_439xx */
;;;1220   
;;;1221   #if defined (STM32F40_41xxx) || defined (STM32F401xx) 
;;;1222       /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
;;;1223       optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
000014  4805              LDR      r0,|L30.44|
000016  7800              LDRB     r0,[r0,#0]
000018  f000060f          AND      r6,r0,#0xf
;;;1224   #endif /* STM32F40_41xxx || STM32F401xx */ 
;;;1225   
;;;1226       /* Update User Option Byte */
;;;1227       *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
00001c  ea450006          ORR      r0,r5,r6
000020  4310              ORRS     r0,r0,r2
000022  4320              ORRS     r0,r0,r4
000024  4901              LDR      r1,|L30.44|
000026  7008              STRB     r0,[r1,#0]
                  |L30.40|
;;;1228     }  
;;;1229   }
000028  bdf0              POP      {r4-r7,pc}
;;;1230   
                          ENDP

00002a  0000              DCW      0x0000
                  |L30.44|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_WRP1Config||, CODE, READONLY, ALIGN=2

                  FLASH_OB_WRP1Config PROC
;;;1015     */
;;;1016   void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;1017   { 
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;1018     FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;1019     
;;;1020     /* Check the parameters */
;;;1021     assert_param(IS_OB_WRP(OB_WRP));
;;;1022     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1023       
;;;1024     status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;1025   
;;;1026     if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d10c              BNE      |L31.44|
;;;1027     { 
;;;1028       if(NewState != DISABLE)
000012  b12c              CBZ      r4,|L31.32|
;;;1029       {
;;;1030         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
000014  4806              LDR      r0,|L31.48|
000016  8800              LDRH     r0,[r0,#0]
000018  4390              BICS     r0,r0,r2
00001a  4905              LDR      r1,|L31.48|
00001c  8008              STRH     r0,[r1,#0]
00001e  e005              B        |L31.44|
                  |L31.32|
;;;1031       }
;;;1032       else
;;;1033       {
;;;1034         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
000020  4803              LDR      r0,|L31.48|
000022  8800              LDRH     r0,[r0,#0]
000024  b291              UXTH     r1,r2
000026  4308              ORRS     r0,r0,r1
000028  4901              LDR      r1,|L31.48|
00002a  8008              STRH     r0,[r1,#0]
                  |L31.44|
;;;1035       }
;;;1036     }
;;;1037   }
00002c  bd30              POP      {r4,r5,pc}
;;;1038   
                          ENDP

00002e  0000              DCW      0x0000
                  |L31.48|
                          DCD      0x40023c1a

                          AREA ||i.FLASH_OB_WRPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_WRPConfig PROC
;;;973      */
;;;974    void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;975    { 
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;976      FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;977      
;;;978      /* Check the parameters */
;;;979      assert_param(IS_OB_WRP(OB_WRP));
;;;980      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;981        
;;;982      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;983    
;;;984      if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d10c              BNE      |L32.44|
;;;985      { 
;;;986        if(NewState != DISABLE)
000012  b12c              CBZ      r4,|L32.32|
;;;987        {
;;;988          *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
000014  4806              LDR      r0,|L32.48|
000016  8800              LDRH     r0,[r0,#0]
000018  4390              BICS     r0,r0,r2
00001a  4905              LDR      r1,|L32.48|
00001c  8008              STRH     r0,[r1,#0]
00001e  e005              B        |L32.44|
                  |L32.32|
;;;989        }
;;;990        else
;;;991        {
;;;992          *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
000020  4803              LDR      r0,|L32.48|
000022  8800              LDRH     r0,[r0,#0]
000024  b291              UXTH     r1,r2
000026  4308              ORRS     r0,r0,r1
000028  4901              LDR      r1,|L32.48|
00002a  8008              STRH     r0,[r1,#0]
                  |L32.44|
;;;993        }
;;;994      }
;;;995    }
00002c  bd30              POP      {r4,r5,pc}
;;;996    
                          ENDP

00002e  0000              DCW      0x0000
                  |L32.48|
                          DCD      0x40023c16

                          AREA ||i.FLASH_PrefetchBufferCmd||, CODE, READONLY, ALIGN=2

                  FLASH_PrefetchBufferCmd PROC
;;;262      */
;;;263    void FLASH_PrefetchBufferCmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L33.16|
;;;264    {
;;;265      /* Check the parameters */
;;;266      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;267      
;;;268      /* Enable or disable the Prefetch Buffer */
;;;269      if(NewState != DISABLE)
;;;270      {
;;;271        FLASH->ACR |= FLASH_ACR_PRFTEN;
000002  4907              LDR      r1,|L33.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4417180          ORR      r1,r1,#0x100
00000a  4a05              LDR      r2,|L33.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L33.28|
                  |L33.16|
;;;272      }
;;;273      else
;;;274      {
;;;275        FLASH->ACR &= (~FLASH_ACR_PRFTEN);
000010  4903              LDR      r1,|L33.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4217180          BIC      r1,r1,#0x100
000018  4a01              LDR      r2,|L33.32|
00001a  6011              STR      r1,[r2,#0]
                  |L33.28|
;;;276      }
;;;277    }
00001c  4770              BX       lr
;;;278    
                          ENDP

00001e  0000              DCW      0x0000
                  |L33.32|
                          DCD      0x40023c00

                          AREA ||i.FLASH_ProgramByte||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramByte PROC
;;;836      */
;;;837    FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
000000  b530              PUSH     {r4,r5,lr}
;;;838    {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;839      FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;840    
;;;841      /* Check the parameters */
;;;842      assert_param(IS_FLASH_ADDRESS(Address));
;;;843    
;;;844      /* Wait for last operation to be completed */
;;;845      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;846      
;;;847      if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d117              BNE      |L34.66|
;;;848      {
;;;849        /* if the previous operation is completed, proceed to program the new data */
;;;850        FLASH->CR &= CR_PSIZE_MASK;
000012  480d              LDR      r0,|L34.72|
000014  6800              LDR      r0,[r0,#0]
000016  f4207040          BIC      r0,r0,#0x300
00001a  490b              LDR      r1,|L34.72|
00001c  6008              STR      r0,[r1,#0]
;;;851        FLASH->CR |= FLASH_PSIZE_BYTE;
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  6008              STR      r0,[r1,#0]
;;;852        FLASH->CR |= FLASH_CR_PG;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f0400001          ORR      r0,r0,#1
00002c  6008              STR      r0,[r1,#0]
;;;853      
;;;854        *(__IO uint8_t*)Address = Data;
00002e  7014              STRB     r4,[r2,#0]
;;;855            
;;;856        /* Wait for last operation to be completed */
;;;857        status = FLASH_WaitForLastOperation();
000030  f7fffffe          BL       FLASH_WaitForLastOperation
000034  4605              MOV      r5,r0
;;;858    
;;;859        /* if the program operation is completed, disable the PG Bit */
;;;860        FLASH->CR &= (~FLASH_CR_PG);
000036  4804              LDR      r0,|L34.72|
000038  6800              LDR      r0,[r0,#0]
00003a  f0200001          BIC      r0,r0,#1
00003e  4902              LDR      r1,|L34.72|
000040  6008              STR      r0,[r1,#0]
                  |L34.66|
;;;861      } 
;;;862    
;;;863      /* Return the Program Status */
;;;864      return status;
000042  4628              MOV      r0,r5
;;;865    }
000044  bd30              POP      {r4,r5,pc}
;;;866    
                          ENDP

000046  0000              DCW      0x0000
                  |L34.72|
                          DCD      0x40023c10

                          AREA ||i.FLASH_ProgramDoubleWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramDoubleWord PROC
;;;709      */
;;;710    FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;711    {
000002  4606              MOV      r6,r0
000004  4614              MOV      r4,r2
000006  461d              MOV      r5,r3
;;;712      FLASH_Status status = FLASH_COMPLETE;
000008  2209              MOVS     r2,#9
;;;713    
;;;714      /* Check the parameters */
;;;715      assert_param(IS_FLASH_ADDRESS(Address));
;;;716    
;;;717      /* Wait for last operation to be completed */
;;;718      status = FLASH_WaitForLastOperation();
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
00000e  4602              MOV      r2,r0
;;;719      
;;;720      if(status == FLASH_COMPLETE)
000010  2a09              CMP      r2,#9
000012  d11a              BNE      |L35.74|
;;;721      {
;;;722        /* if the previous operation is completed, proceed to program the new data */
;;;723        FLASH->CR &= CR_PSIZE_MASK;
000014  480e              LDR      r0,|L35.80|
000016  6800              LDR      r0,[r0,#0]
000018  f4207040          BIC      r0,r0,#0x300
00001c  490c              LDR      r1,|L35.80|
00001e  6008              STR      r0,[r1,#0]
;;;724        FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
000020  4608              MOV      r0,r1
000022  6800              LDR      r0,[r0,#0]
000024  f4407040          ORR      r0,r0,#0x300
000028  6008              STR      r0,[r1,#0]
;;;725        FLASH->CR |= FLASH_CR_PG;
00002a  4608              MOV      r0,r1
00002c  6800              LDR      r0,[r0,#0]
00002e  f0400001          ORR      r0,r0,#1
000032  6008              STR      r0,[r1,#0]
;;;726      
;;;727        *(__IO uint64_t*)Address = Data;
000034  6034              STR      r4,[r6,#0]
000036  6075              STR      r5,[r6,#4]
;;;728            
;;;729        /* Wait for last operation to be completed */
;;;730        status = FLASH_WaitForLastOperation();
000038  f7fffffe          BL       FLASH_WaitForLastOperation
00003c  4602              MOV      r2,r0
;;;731    
;;;732        /* if the program operation is completed, disable the PG Bit */
;;;733        FLASH->CR &= (~FLASH_CR_PG);
00003e  4804              LDR      r0,|L35.80|
000040  6800              LDR      r0,[r0,#0]
000042  f0200001          BIC      r0,r0,#1
000046  4902              LDR      r1,|L35.80|
000048  6008              STR      r0,[r1,#0]
                  |L35.74|
;;;734      } 
;;;735      /* Return the Program Status */
;;;736      return status;
00004a  4610              MOV      r0,r2
;;;737    }
00004c  bd70              POP      {r4-r6,pc}
;;;738    
                          ENDP

00004e  0000              DCW      0x0000
                  |L35.80|
                          DCD      0x40023c10

                          AREA ||i.FLASH_ProgramHalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramHalfWord PROC
;;;794      */
;;;795    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
000000  b530              PUSH     {r4,r5,lr}
;;;796    {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;797      FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;798    
;;;799      /* Check the parameters */
;;;800      assert_param(IS_FLASH_ADDRESS(Address));
;;;801    
;;;802      /* Wait for last operation to be completed */
;;;803      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;804      
;;;805      if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d119              BNE      |L36.70|
;;;806      {
;;;807        /* if the previous operation is completed, proceed to program the new data */
;;;808        FLASH->CR &= CR_PSIZE_MASK;
000012  480e              LDR      r0,|L36.76|
000014  6800              LDR      r0,[r0,#0]
000016  f4207040          BIC      r0,r0,#0x300
00001a  490c              LDR      r1,|L36.76|
00001c  6008              STR      r0,[r1,#0]
;;;809        FLASH->CR |= FLASH_PSIZE_HALF_WORD;
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f4407080          ORR      r0,r0,#0x100
000026  6008              STR      r0,[r1,#0]
;;;810        FLASH->CR |= FLASH_CR_PG;
000028  4608              MOV      r0,r1
00002a  6800              LDR      r0,[r0,#0]
00002c  f0400001          ORR      r0,r0,#1
000030  6008              STR      r0,[r1,#0]
;;;811      
;;;812        *(__IO uint16_t*)Address = Data;
000032  8014              STRH     r4,[r2,#0]
;;;813            
;;;814        /* Wait for last operation to be completed */
;;;815        status = FLASH_WaitForLastOperation();
000034  f7fffffe          BL       FLASH_WaitForLastOperation
000038  4605              MOV      r5,r0
;;;816    
;;;817        /* if the program operation is completed, disable the PG Bit */
;;;818        FLASH->CR &= (~FLASH_CR_PG);
00003a  4804              LDR      r0,|L36.76|
00003c  6800              LDR      r0,[r0,#0]
00003e  f0200001          BIC      r0,r0,#1
000042  4902              LDR      r1,|L36.76|
000044  6008              STR      r0,[r1,#0]
                  |L36.70|
;;;819      } 
;;;820      /* Return the Program Status */
;;;821      return status;
000046  4628              MOV      r0,r5
;;;822    }
000048  bd30              POP      {r4,r5,pc}
;;;823    
                          ENDP

00004a  0000              DCW      0x0000
                  |L36.76|
                          DCD      0x40023c10

                          AREA ||i.FLASH_ProgramWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramWord PROC
;;;752      */
;;;753    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
000000  b530              PUSH     {r4,r5,lr}
;;;754    {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;755      FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;756    
;;;757      /* Check the parameters */
;;;758      assert_param(IS_FLASH_ADDRESS(Address));
;;;759    
;;;760      /* Wait for last operation to be completed */
;;;761      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;762      
;;;763      if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d119              BNE      |L37.70|
;;;764      {
;;;765        /* if the previous operation is completed, proceed to program the new data */
;;;766        FLASH->CR &= CR_PSIZE_MASK;
000012  480e              LDR      r0,|L37.76|
000014  6800              LDR      r0,[r0,#0]
000016  f4207040          BIC      r0,r0,#0x300
00001a  490c              LDR      r1,|L37.76|
00001c  6008              STR      r0,[r1,#0]
;;;767        FLASH->CR |= FLASH_PSIZE_WORD;
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f4407000          ORR      r0,r0,#0x200
000026  6008              STR      r0,[r1,#0]
;;;768        FLASH->CR |= FLASH_CR_PG;
000028  4608              MOV      r0,r1
00002a  6800              LDR      r0,[r0,#0]
00002c  f0400001          ORR      r0,r0,#1
000030  6008              STR      r0,[r1,#0]
;;;769      
;;;770        *(__IO uint32_t*)Address = Data;
000032  6014              STR      r4,[r2,#0]
;;;771            
;;;772        /* Wait for last operation to be completed */
;;;773        status = FLASH_WaitForLastOperation();
000034  f7fffffe          BL       FLASH_WaitForLastOperation
000038  4605              MOV      r5,r0
;;;774    
;;;775        /* if the program operation is completed, disable the PG Bit */
;;;776        FLASH->CR &= (~FLASH_CR_PG);
00003a  4804              LDR      r0,|L37.76|
00003c  6800              LDR      r0,[r0,#0]
00003e  f0200001          BIC      r0,r0,#1
000042  4902              LDR      r1,|L37.76|
000044  6008              STR      r0,[r1,#0]
                  |L37.70|
;;;777      } 
;;;778      /* Return the Program Status */
;;;779      return status;
000046  4628              MOV      r0,r5
;;;780    }
000048  bd30              POP      {r4,r5,pc}
;;;781    
                          ENDP

00004a  0000              DCW      0x0000
                  |L37.76|
                          DCD      0x40023c10

                          AREA ||i.FLASH_SetLatency||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;247      */
;;;248    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  4a01              LDR      r2,|L38.8|
;;;249    {
;;;250      /* Check the parameters */
;;;251      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;252      
;;;253      /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
;;;254      *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
000002  7010              STRB     r0,[r2,#0]
;;;255    }
000004  4770              BX       lr
;;;256    
                          ENDP

000006  0000              DCW      0x0000
                  |L38.8|
                          DCD      0x40023c00

                          AREA ||i.FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_Unlock PROC
;;;384      */
;;;385    void FLASH_Unlock(void)
000000  4805              LDR      r0,|L39.24|
;;;386    {
;;;387      if((FLASH->CR & FLASH_CR_LOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0004000          AND      r0,r0,#0x80000000
000008  b128              CBZ      r0,|L39.22|
;;;388      {
;;;389        /* Authorize the FLASH Registers access */
;;;390        FLASH->KEYR = FLASH_KEY1;
00000a  4804              LDR      r0,|L39.28|
00000c  4902              LDR      r1,|L39.24|
00000e  390c              SUBS     r1,r1,#0xc
000010  6008              STR      r0,[r1,#0]
;;;391        FLASH->KEYR = FLASH_KEY2;
000012  4803              LDR      r0,|L39.32|
000014  6008              STR      r0,[r1,#0]
                  |L39.22|
;;;392      }  
;;;393    }
000016  4770              BX       lr
;;;394    
                          ENDP

                  |L39.24|
                          DCD      0x40023c10
                  |L39.28|
                          DCD      0x45670123
                  |L39.32|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=1

                  FLASH_WaitForLastOperation PROC
;;;1545     */
;;;1546   FLASH_Status FLASH_WaitForLastOperation(void)
000000  b508              PUSH     {r3,lr}
;;;1547   { 
;;;1548     __IO FLASH_Status status = FLASH_COMPLETE;
000002  2009              MOVS     r0,#9
000004  9000              STR      r0,[sp,#0]
;;;1549      
;;;1550     /* Check for the FLASH Status */
;;;1551     status = FLASH_GetStatus();
000006  f7fffffe          BL       FLASH_GetStatus
00000a  9000              STR      r0,[sp,#0]
;;;1552   
;;;1553     /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;1554        Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;1555        flag will be set */
;;;1556     while(status == FLASH_BUSY)
00000c  e002              B        |L40.20|
                  |L40.14|
;;;1557     {
;;;1558       status = FLASH_GetStatus();
00000e  f7fffffe          BL       FLASH_GetStatus
000012  9000              STR      r0,[sp,#0]
                  |L40.20|
000014  f89d0000          LDRB     r0,[sp,#0]            ;1556
000018  2801              CMP      r0,#1                 ;1556
00001a  d0f8              BEQ      |L40.14|
;;;1559     }
;;;1560     /* Return the operation status */
;;;1561     return status;
00001c  f89d0000          LDRB     r0,[sp,#0]
;;;1562   }
000020  bd08              POP      {r3,pc}
;;;1563   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32LIB\\src\\stm32f4xx_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_flash_c_a2a150d6____REV16|
#line 388 "..\\stm32LIB\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___17_stm32f4xx_flash_c_a2a150d6____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_flash_c_a2a150d6____REVSH|
#line 402
|__asm___17_stm32f4xx_flash_c_a2a150d6____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_flash_c_a2a150d6____RRX|
#line 587
|__asm___17_stm32f4xx_flash_c_a2a150d6____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
