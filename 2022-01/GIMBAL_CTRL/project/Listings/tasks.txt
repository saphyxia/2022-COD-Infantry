; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\tasks.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\tasks.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\stm32LIB\inc -I..\stm32LIB\CMSIS\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\user\_Dsp\Include -I..\user\_Algorithms -I..\user\_Bsp -I..\user\_Device -I..\user\_Task -I..\system -I..\stm32LIB\CMSIS -I..\system -I..\FreeRTOS -I..\user -I.\RTE\_COD_Gimbal_Task -IC:\keil_v5_project\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM4 -D__FPU_PRESENT --omf_browse=.\objects\tasks.crf ..\FreeRTOS\tasks.c]
                          THUMB

                          AREA ||i.eTaskGetState||, CODE, READONLY, ALIGN=2

                  eTaskGetState PROC
;;;1377   
;;;1378   	eTaskState eTaskGetState( TaskHandle_t xTask )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1379   	{
000004  4607              MOV      r7,r0
;;;1380   	eTaskState eReturn;
;;;1381   	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
;;;1382   	const TCB_t * const pxTCB = xTask;
000006  463e              MOV      r6,r7
;;;1383   
;;;1384   		configASSERT( pxTCB );
000008  b956              CBNZ     r6,|L1.32|
00000a  bf00              NOP      
00000c  2050              MOVS     r0,#0x50
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L1.30|
00001e  e7fe              B        |L1.30|
                  |L1.32|
;;;1385   
;;;1386   		if( pxTCB == pxCurrentTCB )
000020  4817              LDR      r0,|L1.128|
000022  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000024  4286              CMP      r6,r0
000026  d101              BNE      |L1.44|
;;;1387   		{
;;;1388   			/* The task calling this function is querying its own state. */
;;;1389   			eReturn = eRunning;
000028  2400              MOVS     r4,#0
00002a  e026              B        |L1.122|
                  |L1.44|
;;;1390   		}
;;;1391   		else
;;;1392   		{
;;;1393   			taskENTER_CRITICAL();
00002c  f7fffffe          BL       vPortEnterCritical
;;;1394   			{
;;;1395   				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
000030  6975              LDR      r5,[r6,#0x14]
;;;1396   				pxDelayedList = pxDelayedTaskList;
000032  4814              LDR      r0,|L1.132|
000034  f8d08000          LDR      r8,[r0,#0]  ; pxDelayedTaskList
;;;1397   				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
000038  4813              LDR      r0,|L1.136|
00003a  f8d09000          LDR      r9,[r0,#0]  ; pxOverflowDelayedTaskList
;;;1398   			}
;;;1399   			taskEXIT_CRITICAL();
00003e  f7fffffe          BL       vPortExitCritical
;;;1400   
;;;1401   			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
000042  4545              CMP      r5,r8
000044  d001              BEQ      |L1.74|
000046  454d              CMP      r5,r9
000048  d101              BNE      |L1.78|
                  |L1.74|
;;;1402   			{
;;;1403   				/* The task being queried is referenced from one of the Blocked
;;;1404   				lists. */
;;;1405   				eReturn = eBlocked;
00004a  2402              MOVS     r4,#2
00004c  e015              B        |L1.122|
                  |L1.78|
;;;1406   			}
;;;1407   
;;;1408   			#if ( INCLUDE_vTaskSuspend == 1 )
;;;1409   				else if( pxStateList == &xSuspendedTaskList )
00004e  480f              LDR      r0,|L1.140|
000050  4285              CMP      r5,r0
000052  d10b              BNE      |L1.108|
;;;1410   				{
;;;1411   					/* The task being queried is referenced from the suspended
;;;1412   					list.  Is it genuinely suspended or is it blocked
;;;1413   					indefinitely? */
;;;1414   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
000054  6ab0              LDR      r0,[r6,#0x28]
000056  b938              CBNZ     r0,|L1.104|
;;;1415   					{
;;;1416   						#if( configUSE_TASK_NOTIFICATIONS == 1 )
;;;1417   						{
;;;1418   							/* The task does not appear on the event list item of
;;;1419   							and of the RTOS objects, but could still be in the
;;;1420   							blocked state if it is waiting on its notification
;;;1421   							rather than waiting on an object. */
;;;1422   							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
000058  f896005c          LDRB     r0,[r6,#0x5c]
00005c  2801              CMP      r0,#1
00005e  d101              BNE      |L1.100|
;;;1423   							{
;;;1424   								eReturn = eBlocked;
000060  2402              MOVS     r4,#2
000062  e00a              B        |L1.122|
                  |L1.100|
;;;1425   							}
;;;1426   							else
;;;1427   							{
;;;1428   								eReturn = eSuspended;
000064  2403              MOVS     r4,#3
000066  e008              B        |L1.122|
                  |L1.104|
;;;1429   							}
;;;1430   						}
;;;1431   						#else
;;;1432   						{
;;;1433   							eReturn = eSuspended;
;;;1434   						}
;;;1435   						#endif
;;;1436   					}
;;;1437   					else
;;;1438   					{
;;;1439   						eReturn = eBlocked;
000068  2402              MOVS     r4,#2
00006a  e006              B        |L1.122|
                  |L1.108|
;;;1440   					}
;;;1441   				}
;;;1442   			#endif
;;;1443   
;;;1444   			#if ( INCLUDE_vTaskDelete == 1 )
;;;1445   				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
00006c  4808              LDR      r0,|L1.144|
00006e  4285              CMP      r5,r0
000070  d000              BEQ      |L1.116|
000072  b90d              CBNZ     r5,|L1.120|
                  |L1.116|
;;;1446   				{
;;;1447   					/* The task being queried is referenced from the deleted
;;;1448   					tasks list, or it is not referenced from any lists at
;;;1449   					all. */
;;;1450   					eReturn = eDeleted;
000074  2404              MOVS     r4,#4
000076  e000              B        |L1.122|
                  |L1.120|
;;;1451   				}
;;;1452   			#endif
;;;1453   
;;;1454   			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
;;;1455   			{
;;;1456   				/* If the task is not in any other state, it must be in the
;;;1457   				Ready (including pending ready) state. */
;;;1458   				eReturn = eReady;
000078  2401              MOVS     r4,#1
                  |L1.122|
;;;1459   			}
;;;1460   		}
;;;1461   
;;;1462   		return eReturn;
00007a  4620              MOV      r0,r4
;;;1463   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
00007c  e8bd87f0          POP      {r4-r10,pc}
;;;1464   
                          ENDP

                  |L1.128|
                          DCD      pxCurrentTCB
                  |L1.132|
                          DCD      pxDelayedTaskList
                  |L1.136|
                          DCD      pxOverflowDelayedTaskList
                  |L1.140|
                          DCD      xSuspendedTaskList
                  |L1.144|
                          DCD      xTasksWaitingTermination

                          AREA ||i.pcTaskGetName||, CODE, READONLY, ALIGN=2

                  pcTaskGetName PROC
;;;2337   
;;;2338   char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  4601              MOV      r1,r0
;;;2339   {
;;;2340   TCB_t *pxTCB;
;;;2341   
;;;2342   	/* If null is passed in here then the name of the calling task is being
;;;2343   	queried. */
;;;2344   	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
000002  b911              CBNZ     r1,|L2.10|
000004  4809              LDR      r0,|L2.44|
000006  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000008  e000              B        |L2.12|
                  |L2.10|
00000a  4608              MOV      r0,r1
                  |L2.12|
00000c  4602              MOV      r2,r0
;;;2345   	configASSERT( pxTCB );
00000e  b952              CBNZ     r2,|L2.38|
000010  bf00              NOP      
000012  2050              MOVS     r0,#0x50
000014  f3808811          MSR      BASEPRI,r0
000018  f3bf8f4f          DSB      
00001c  f3bf8f6f          ISB      
000020  bf00              NOP      
000022  bf00              NOP      
                  |L2.36|
000024  e7fe              B        |L2.36|
                  |L2.38|
;;;2346   	return &( pxTCB->pcTaskName[ 0 ] );
000026  f1020034          ADD      r0,r2,#0x34
;;;2347   }
00002a  4770              BX       lr
;;;2348   /*-----------------------------------------------------------*/
                          ENDP

                  |L2.44|
                          DCD      pxCurrentTCB

                          AREA ||i.prvAddCurrentTaskToDelayedList||, CODE, READONLY, ALIGN=2

                  prvAddCurrentTaskToDelayedList PROC
;;;5080   
;;;5081   static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;5082   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;5083   TickType_t xTimeToWake;
;;;5084   const TickType_t xConstTickCount = xTickCount;
000008  481c              LDR      r0,|L3.124|
00000a  6807              LDR      r7,[r0,#0]  ; xTickCount
;;;5085   
;;;5086   	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;5087   	{
;;;5088   		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
;;;5089   		reset to pdFALSE so it can be detected as having been set to pdTRUE
;;;5090   		when the task leaves the Blocked state. */
;;;5091   		pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;5092   	}
;;;5093   	#endif
;;;5094   
;;;5095   	/* Remove the task from the ready list before adding it to the blocked list
;;;5096   	as the same list item is used for both lists. */
;;;5097   	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00000c  481c              LDR      r0,|L3.128|
00000e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000010  1d00              ADDS     r0,r0,#4
000012  f7fffffe          BL       uxListRemove
000016  b950              CBNZ     r0,|L3.46|
;;;5098   	{
;;;5099   		/* The current task must be in a ready list, so there is no need to
;;;5100   		check, and the port reset macro can be called directly. */
;;;5101   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
000018  4819              LDR      r0,|L3.128|
00001a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00001c  f890102c          LDRB     r1,[r0,#0x2c]
000020  2001              MOVS     r0,#1
000022  4088              LSLS     r0,r0,r1
000024  4917              LDR      r1,|L3.132|
000026  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000028  4381              BICS     r1,r1,r0
00002a  4816              LDR      r0,|L3.132|
00002c  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L3.46|
;;;5102   	}
;;;5103   	else
;;;5104   	{
;;;5105   		mtCOVERAGE_TEST_MARKER();
;;;5106   	}
;;;5107   
;;;5108   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;5109   	{
;;;5110   		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
00002e  1c68              ADDS     r0,r5,#1
000030  b938              CBNZ     r0,|L3.66|
000032  b136              CBZ      r6,|L3.66|
;;;5111   		{
;;;5112   			/* Add the task to the suspended task list instead of a delayed task
;;;5113   			list to ensure it is not woken by a timing event.  It will block
;;;5114   			indefinitely. */
;;;5115   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
000034  4812              LDR      r0,|L3.128|
000036  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000038  1d09              ADDS     r1,r1,#4
00003a  4813              LDR      r0,|L3.136|
00003c  f7fffffe          BL       vListInsertEnd
000040  e01a              B        |L3.120|
                  |L3.66|
;;;5116   		}
;;;5117   		else
;;;5118   		{
;;;5119   			/* Calculate the time at which the task should be woken if the event
;;;5120   			does not occur.  This may overflow but this doesn't matter, the
;;;5121   			kernel will manage it correctly. */
;;;5122   			xTimeToWake = xConstTickCount + xTicksToWait;
000042  197c              ADDS     r4,r7,r5
;;;5123   
;;;5124   			/* The list item will be inserted in wake time order. */
;;;5125   			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
000044  480e              LDR      r0,|L3.128|
000046  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000048  6044              STR      r4,[r0,#4]
;;;5126   
;;;5127   			if( xTimeToWake < xConstTickCount )
00004a  42bc              CMP      r4,r7
00004c  d207              BCS      |L3.94|
;;;5128   			{
;;;5129   				/* Wake time has overflowed.  Place this item in the overflow
;;;5130   				list. */
;;;5131   				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
00004e  480c              LDR      r0,|L3.128|
000050  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000052  1d09              ADDS     r1,r1,#4
000054  480d              LDR      r0,|L3.140|
000056  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedTaskList
000058  f7fffffe          BL       vListInsert
00005c  e00c              B        |L3.120|
                  |L3.94|
;;;5132   			}
;;;5133   			else
;;;5134   			{
;;;5135   				/* The wake time has not overflowed, so the current block list
;;;5136   				is used. */
;;;5137   				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
00005e  4808              LDR      r0,|L3.128|
000060  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000062  1d09              ADDS     r1,r1,#4
000064  480a              LDR      r0,|L3.144|
000066  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000068  f7fffffe          BL       vListInsert
;;;5138   
;;;5139   				/* If the task entering the blocked state was placed at the
;;;5140   				head of the list of blocked tasks then xNextTaskUnblockTime
;;;5141   				needs to be updated too. */
;;;5142   				if( xTimeToWake < xNextTaskUnblockTime )
00006c  4809              LDR      r0,|L3.148|
00006e  6800              LDR      r0,[r0,#0]  ; xNextTaskUnblockTime
000070  4284              CMP      r4,r0
000072  d201              BCS      |L3.120|
;;;5143   				{
;;;5144   					xNextTaskUnblockTime = xTimeToWake;
000074  4807              LDR      r0,|L3.148|
000076  6004              STR      r4,[r0,#0]  ; xNextTaskUnblockTime
                  |L3.120|
;;;5145   				}
;;;5146   				else
;;;5147   				{
;;;5148   					mtCOVERAGE_TEST_MARKER();
;;;5149   				}
;;;5150   			}
;;;5151   		}
;;;5152   	}
;;;5153   	#else /* INCLUDE_vTaskSuspend */
;;;5154   	{
;;;5155   		/* Calculate the time at which the task should be woken if the event
;;;5156   		does not occur.  This may overflow but this doesn't matter, the kernel
;;;5157   		will manage it correctly. */
;;;5158   		xTimeToWake = xConstTickCount + xTicksToWait;
;;;5159   
;;;5160   		/* The list item will be inserted in wake time order. */
;;;5161   		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
;;;5162   
;;;5163   		if( xTimeToWake < xConstTickCount )
;;;5164   		{
;;;5165   			/* Wake time has overflowed.  Place this item in the overflow list. */
;;;5166   			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;5167   		}
;;;5168   		else
;;;5169   		{
;;;5170   			/* The wake time has not overflowed, so the current block list is used. */
;;;5171   			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;5172   
;;;5173   			/* If the task entering the blocked state was placed at the head of the
;;;5174   			list of blocked tasks then xNextTaskUnblockTime needs to be updated
;;;5175   			too. */
;;;5176   			if( xTimeToWake < xNextTaskUnblockTime )
;;;5177   			{
;;;5178   				xNextTaskUnblockTime = xTimeToWake;
;;;5179   			}
;;;5180   			else
;;;5181   			{
;;;5182   				mtCOVERAGE_TEST_MARKER();
;;;5183   			}
;;;5184   		}
;;;5185   
;;;5186   		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
;;;5187   		( void ) xCanBlockIndefinitely;
;;;5188   	}
;;;5189   	#endif /* INCLUDE_vTaskSuspend */
;;;5190   }
000078  e8bd81f0          POP      {r4-r8,pc}
;;;5191   
                          ENDP

                  |L3.124|
                          DCD      xTickCount
                  |L3.128|
                          DCD      pxCurrentTCB
                  |L3.132|
                          DCD      uxTopReadyPriority
                  |L3.136|
                          DCD      xSuspendedTaskList
                  |L3.140|
                          DCD      pxOverflowDelayedTaskList
                  |L3.144|
                          DCD      pxDelayedTaskList
                  |L3.148|
                          DCD      xNextTaskUnblockTime

                          AREA ||i.prvAddNewTaskToReadyList||, CODE, READONLY, ALIGN=2

                  prvAddNewTaskToReadyList PROC
;;;1071   
;;;1072   static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
000000  b510              PUSH     {r4,lr}
;;;1073   {
000002  4604              MOV      r4,r0
;;;1074   	/* Ensure interrupts don't access the task lists while the lists are being
;;;1075   	updated. */
;;;1076   	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1077   	{
;;;1078   		uxCurrentNumberOfTasks++;
000008  4824              LDR      r0,|L4.156|
00000a  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
00000c  1c40              ADDS     r0,r0,#1
00000e  4923              LDR      r1,|L4.156|
000010  6008              STR      r0,[r1,#0]  ; uxCurrentNumberOfTasks
;;;1079   		if( pxCurrentTCB == NULL )
000012  4823              LDR      r0,|L4.160|
000014  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000016  b940              CBNZ     r0,|L4.42|
;;;1080   		{
;;;1081   			/* There are no other tasks, or all the other tasks are in
;;;1082   			the suspended state - make this the current task. */
;;;1083   			pxCurrentTCB = pxNewTCB;
000018  4821              LDR      r0,|L4.160|
00001a  6004              STR      r4,[r0,#0]  ; pxCurrentTCB
;;;1084   
;;;1085   			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
00001c  4608              MOV      r0,r1
00001e  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000020  2801              CMP      r0,#1
000022  d10d              BNE      |L4.64|
;;;1086   			{
;;;1087   				/* This is the first task to be created so do the preliminary
;;;1088   				initialisation required.  We will not recover if this call
;;;1089   				fails, but we will report the failure. */
;;;1090   				prvInitialiseTaskLists();
000024  f7fffffe          BL       prvInitialiseTaskLists
000028  e00a              B        |L4.64|
                  |L4.42|
;;;1091   			}
;;;1092   			else
;;;1093   			{
;;;1094   				mtCOVERAGE_TEST_MARKER();
;;;1095   			}
;;;1096   		}
;;;1097   		else
;;;1098   		{
;;;1099   			/* If the scheduler is not already running, make this task the
;;;1100   			current task if it is the highest priority task to be created
;;;1101   			so far. */
;;;1102   			if( xSchedulerRunning == pdFALSE )
00002a  481e              LDR      r0,|L4.164|
00002c  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
00002e  b938              CBNZ     r0,|L4.64|
;;;1103   			{
;;;1104   				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
000030  481b              LDR      r0,|L4.160|
000032  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000034  6ac0              LDR      r0,[r0,#0x2c]
000036  6ae1              LDR      r1,[r4,#0x2c]
000038  4288              CMP      r0,r1
00003a  d801              BHI      |L4.64|
;;;1105   				{
;;;1106   					pxCurrentTCB = pxNewTCB;
00003c  4818              LDR      r0,|L4.160|
00003e  6004              STR      r4,[r0,#0]  ; pxCurrentTCB
                  |L4.64|
;;;1107   				}
;;;1108   				else
;;;1109   				{
;;;1110   					mtCOVERAGE_TEST_MARKER();
;;;1111   				}
;;;1112   			}
;;;1113   			else
;;;1114   			{
;;;1115   				mtCOVERAGE_TEST_MARKER();
;;;1116   			}
;;;1117   		}
;;;1118   
;;;1119   		uxTaskNumber++;
000040  4819              LDR      r0,|L4.168|
000042  6800              LDR      r0,[r0,#0]  ; uxTaskNumber
000044  1c40              ADDS     r0,r0,#1
000046  4918              LDR      r1,|L4.168|
000048  6008              STR      r0,[r1,#0]  ; uxTaskNumber
;;;1120   
;;;1121   		#if ( configUSE_TRACE_FACILITY == 1 )
;;;1122   		{
;;;1123   			/* Add a counter into the TCB for tracing only. */
;;;1124   			pxNewTCB->uxTCBNumber = uxTaskNumber;
00004a  4608              MOV      r0,r1
00004c  6800              LDR      r0,[r0,#0]  ; uxTaskNumber
00004e  64a0              STR      r0,[r4,#0x48]
;;;1125   		}
;;;1126   		#endif /* configUSE_TRACE_FACILITY */
;;;1127   		traceTASK_CREATE( pxNewTCB );
;;;1128   
;;;1129   		prvAddTaskToReadyList( pxNewTCB );
000050  f894102c          LDRB     r1,[r4,#0x2c]
000054  2001              MOVS     r0,#1
000056  4088              LSLS     r0,r0,r1
000058  4914              LDR      r1,|L4.172|
00005a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00005c  4308              ORRS     r0,r0,r1
00005e  4913              LDR      r1,|L4.172|
000060  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000062  6ae1              LDR      r1,[r4,#0x2c]
000064  eb010181          ADD      r1,r1,r1,LSL #2
000068  4a11              LDR      r2,|L4.176|
00006a  eb020081          ADD      r0,r2,r1,LSL #2
00006e  1d21              ADDS     r1,r4,#4
000070  f7fffffe          BL       vListInsertEnd
;;;1130   
;;;1131   		portSETUP_TCB( pxNewTCB );
;;;1132   	}
;;;1133   	taskEXIT_CRITICAL();
000074  f7fffffe          BL       vPortExitCritical
;;;1134   
;;;1135   	if( xSchedulerRunning != pdFALSE )
000078  480a              LDR      r0,|L4.164|
00007a  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
00007c  b168              CBZ      r0,|L4.154|
;;;1136   	{
;;;1137   		/* If the created task is of a higher priority than the current task
;;;1138   		then it should run now. */
;;;1139   		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
00007e  4808              LDR      r0,|L4.160|
000080  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000082  6ac0              LDR      r0,[r0,#0x2c]
000084  6ae1              LDR      r1,[r4,#0x2c]
000086  4288              CMP      r0,r1
000088  d207              BCS      |L4.154|
;;;1140   		{
;;;1141   			taskYIELD_IF_USING_PREEMPTION();
00008a  f04f5080          MOV      r0,#0x10000000
00008e  4909              LDR      r1,|L4.180|
000090  6008              STR      r0,[r1,#0]
000092  f3bf8f4f          DSB      
000096  f3bf8f6f          ISB      
                  |L4.154|
;;;1142   		}
;;;1143   		else
;;;1144   		{
;;;1145   			mtCOVERAGE_TEST_MARKER();
;;;1146   		}
;;;1147   	}
;;;1148   	else
;;;1149   	{
;;;1150   		mtCOVERAGE_TEST_MARKER();
;;;1151   	}
;;;1152   }
00009a  bd10              POP      {r4,pc}
;;;1153   /*-----------------------------------------------------------*/
                          ENDP

                  |L4.156|
                          DCD      uxCurrentNumberOfTasks
                  |L4.160|
                          DCD      pxCurrentTCB
                  |L4.164|
                          DCD      xSchedulerRunning
                  |L4.168|
                          DCD      uxTaskNumber
                  |L4.172|
                          DCD      uxTopReadyPriority
                  |L4.176|
                          DCD      pxReadyTasksLists
                  |L4.180|
                          DCD      0xe000ed04

                          AREA ||i.prvCheckTasksWaitingTermination||, CODE, READONLY, ALIGN=2

                  prvCheckTasksWaitingTermination PROC
;;;3577   
;;;3578   static void prvCheckTasksWaitingTermination( void )
000000  b510              PUSH     {r4,lr}
;;;3579   {
;;;3580   
;;;3581   	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
;;;3582   
;;;3583   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3584   	{
;;;3585   		TCB_t *pxTCB;
;;;3586   
;;;3587   		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
;;;3588   		being called too often in the idle task. */
;;;3589   		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
000002  e016              B        |L5.50|
                  |L5.4|
;;;3590   		{
;;;3591   			taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;3592   			{
;;;3593   				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000008  480c              LDR      r0,|L5.60|
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  68c4              LDR      r4,[r0,#0xc]
;;;3594   				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
00000e  1d20              ADDS     r0,r4,#4
000010  f7fffffe          BL       uxListRemove
;;;3595   				--uxCurrentNumberOfTasks;
000014  480a              LDR      r0,|L5.64|
000016  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000018  1e40              SUBS     r0,r0,#1
00001a  4909              LDR      r1,|L5.64|
00001c  6008              STR      r0,[r1,#0]  ; uxCurrentNumberOfTasks
;;;3596   				--uxDeletedTasksWaitingCleanUp;
00001e  4809              LDR      r0,|L5.68|
000020  6800              LDR      r0,[r0,#0]  ; uxDeletedTasksWaitingCleanUp
000022  1e40              SUBS     r0,r0,#1
000024  4907              LDR      r1,|L5.68|
000026  6008              STR      r0,[r1,#0]  ; uxDeletedTasksWaitingCleanUp
;;;3597   			}
;;;3598   			taskEXIT_CRITICAL();
000028  f7fffffe          BL       vPortExitCritical
;;;3599   
;;;3600   			prvDeleteTCB( pxTCB );
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       prvDeleteTCB
                  |L5.50|
000032  4804              LDR      r0,|L5.68|
000034  6800              LDR      r0,[r0,#0]            ;3589  ; uxDeletedTasksWaitingCleanUp
000036  2800              CMP      r0,#0                 ;3589
000038  d1e4              BNE      |L5.4|
;;;3601   		}
;;;3602   	}
;;;3603   	#endif /* INCLUDE_vTaskDelete */
;;;3604   }
00003a  bd10              POP      {r4,pc}
;;;3605   /*-----------------------------------------------------------*/
                          ENDP

                  |L5.60|
                          DCD      xTasksWaitingTermination
                  |L5.64|
                          DCD      uxCurrentNumberOfTasks
                  |L5.68|
                          DCD      uxDeletedTasksWaitingCleanUp

                          AREA ||i.prvDeleteTCB||, CODE, READONLY, ALIGN=1

                  prvDeleteTCB PROC
;;;3825   
;;;3826   	static void prvDeleteTCB( TCB_t *pxTCB )
000000  b510              PUSH     {r4,lr}
;;;3827   	{
000002  4604              MOV      r4,r0
;;;3828   		/* This call is required specifically for the TriCore port.  It must be
;;;3829   		above the vPortFree() calls.  The call is also used by ports/demos that
;;;3830   		want to allocate and clean RAM statically. */
;;;3831   		portCLEAN_UP_TCB( pxTCB );
;;;3832   
;;;3833   		/* Free up the memory allocated by the scheduler for the task.  It is up
;;;3834   		to the task to free any memory allocated at the application level. */
;;;3835   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;3836   		{
;;;3837   			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
;;;3838   		}
;;;3839   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;3840   
;;;3841   		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
;;;3842   		{
;;;3843   			/* The task can only have been allocated dynamically - free both
;;;3844   			the stack and TCB. */
;;;3845   			vPortFree( pxTCB->pxStack );
000004  6b20              LDR      r0,[r4,#0x30]
000006  f7fffffe          BL       vPortFree
;;;3846   			vPortFree( pxTCB );
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       vPortFree
;;;3847   		}
;;;3848   		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
;;;3849   		{
;;;3850   			/* The task could have been allocated statically or dynamically, so
;;;3851   			check what was statically allocated before trying to free the
;;;3852   			memory. */
;;;3853   			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
;;;3854   			{
;;;3855   				/* Both the stack and TCB were allocated dynamically, so both
;;;3856   				must be freed. */
;;;3857   				vPortFree( pxTCB->pxStack );
;;;3858   				vPortFree( pxTCB );
;;;3859   			}
;;;3860   			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
;;;3861   			{
;;;3862   				/* Only the stack was statically allocated, so the TCB is the
;;;3863   				only memory that must be freed. */
;;;3864   				vPortFree( pxTCB );
;;;3865   			}
;;;3866   			else
;;;3867   			{
;;;3868   				/* Neither the stack nor the TCB were allocated dynamically, so
;;;3869   				nothing needs to be freed. */
;;;3870   				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
;;;3871   				mtCOVERAGE_TEST_MARKER();
;;;3872   			}
;;;3873   		}
;;;3874   		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;3875   	}
000010  bd10              POP      {r4,pc}
;;;3876   
                          ENDP


                          AREA ||i.prvIdleTask||, CODE, READONLY, ALIGN=2

                  prvIdleTask PROC
;;;3333    */
;;;3334   static portTASK_FUNCTION( prvIdleTask, pvParameters )
000000  bf00              NOP      
                  |L7.2|
;;;3335   {
;;;3336   	/* Stop warnings. */
;;;3337   	( void ) pvParameters;
;;;3338   
;;;3339   	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
;;;3340   	SCHEDULER IS STARTED. **/
;;;3341   
;;;3342   	/* In case a task that has a secure context deletes itself, in which case
;;;3343   	the idle task is responsible for deleting the task's secure context, if
;;;3344   	any. */
;;;3345   	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
;;;3346   
;;;3347   	for( ;; )
;;;3348   	{
;;;3349   		/* See if any tasks have deleted themselves - if so then the idle task
;;;3350   		is responsible for freeing the deleted task's TCB and stack. */
;;;3351   		prvCheckTasksWaitingTermination();
000002  f7fffffe          BL       prvCheckTasksWaitingTermination
;;;3352   
;;;3353   		#if ( configUSE_PREEMPTION == 0 )
;;;3354   		{
;;;3355   			/* If we are not using preemption we keep forcing a task switch to
;;;3356   			see if any other task has become available.  If we are using
;;;3357   			preemption we don't need to do this as any task becoming available
;;;3358   			will automatically get the processor anyway. */
;;;3359   			taskYIELD();
;;;3360   		}
;;;3361   		#endif /* configUSE_PREEMPTION */
;;;3362   
;;;3363   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
;;;3364   		{
;;;3365   			/* When using preemption tasks of equal priority will be
;;;3366   			timesliced.  If a task that is sharing the idle priority is ready
;;;3367   			to run then the idle task should yield before the end of the
;;;3368   			timeslice.
;;;3369   
;;;3370   			A critical region is not required here as we are just reading from
;;;3371   			the list, and an occasional incorrect value will not matter.  If
;;;3372   			the ready list at the idle priority contains more than one task
;;;3373   			then a task other than the idle task is ready to execute. */
;;;3374   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
000006  4806              LDR      r0,|L7.32|
000008  6800              LDR      r0,[r0,#0]  ; pxReadyTasksLists
00000a  2801              CMP      r0,#1
00000c  d9f9              BLS      |L7.2|
;;;3375   			{
;;;3376   				taskYIELD();
00000e  f04f5080          MOV      r0,#0x10000000
000012  4904              LDR      r1,|L7.36|
000014  6008              STR      r0,[r1,#0]
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  e7f0              B        |L7.2|
;;;3377   			}
;;;3378   			else
;;;3379   			{
;;;3380   				mtCOVERAGE_TEST_MARKER();
;;;3381   			}
;;;3382   		}
;;;3383   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
;;;3384   
;;;3385   		#if ( configUSE_IDLE_HOOK == 1 )
;;;3386   		{
;;;3387   			extern void vApplicationIdleHook( void );
;;;3388   
;;;3389   			/* Call the user defined function from within the idle task.  This
;;;3390   			allows the application designer to add background functionality
;;;3391   			without the overhead of a separate task.
;;;3392   			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
;;;3393   			CALL A FUNCTION THAT MIGHT BLOCK. */
;;;3394   			vApplicationIdleHook();
;;;3395   		}
;;;3396   		#endif /* configUSE_IDLE_HOOK */
;;;3397   
;;;3398   		/* This conditional compilation should use inequality to 0, not equality
;;;3399   		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
;;;3400   		user defined low power mode	implementations require
;;;3401   		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
;;;3402   		#if ( configUSE_TICKLESS_IDLE != 0 )
;;;3403   		{
;;;3404   		TickType_t xExpectedIdleTime;
;;;3405   
;;;3406   			/* It is not desirable to suspend then resume the scheduler on
;;;3407   			each iteration of the idle task.  Therefore, a preliminary
;;;3408   			test of the expected idle time is performed without the
;;;3409   			scheduler suspended.  The result here is not necessarily
;;;3410   			valid. */
;;;3411   			xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3412   
;;;3413   			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3414   			{
;;;3415   				vTaskSuspendAll();
;;;3416   				{
;;;3417   					/* Now the scheduler is suspended, the expected idle
;;;3418   					time can be sampled again, and this time its value can
;;;3419   					be used. */
;;;3420   					configASSERT( xNextTaskUnblockTime >= xTickCount );
;;;3421   					xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3422   
;;;3423   					/* Define the following macro to set xExpectedIdleTime to 0
;;;3424   					if the application does not want
;;;3425   					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
;;;3426   					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
;;;3427   
;;;3428   					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3429   					{
;;;3430   						traceLOW_POWER_IDLE_BEGIN();
;;;3431   						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
;;;3432   						traceLOW_POWER_IDLE_END();
;;;3433   					}
;;;3434   					else
;;;3435   					{
;;;3436   						mtCOVERAGE_TEST_MARKER();
;;;3437   					}
;;;3438   				}
;;;3439   				( void ) xTaskResumeAll();
;;;3440   			}
;;;3441   			else
;;;3442   			{
;;;3443   				mtCOVERAGE_TEST_MARKER();
;;;3444   			}
;;;3445   		}
;;;3446   		#endif /* configUSE_TICKLESS_IDLE */
;;;3447   	}
;;;3448   }
;;;3449   /*-----------------------------------------------------------*/
                          ENDP

                  |L7.32|
                          DCD      pxReadyTasksLists
                  |L7.36|
                          DCD      0xe000ed04

                          AREA ||i.prvInitialiseNewTask||, CODE, READONLY, ALIGN=1

                  prvInitialiseNewTask PROC
;;;820    
;;;821    static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;822    									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;823    									const uint32_t ulStackDepth,
;;;824    									void * const pvParameters,
;;;825    									UBaseType_t uxPriority,
;;;826    									TaskHandle_t * const pxCreatedTask,
;;;827    									TCB_t *pxNewTCB,
;;;828    									const MemoryRegion_t * const xRegions )
;;;829    {
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
00000a  469b              MOV      r11,r3
00000c  9f0a              LDR      r7,[sp,#0x28]
00000e  9c0c              LDR      r4,[sp,#0x30]
;;;830    StackType_t *pxTopOfStack;
;;;831    UBaseType_t x;
;;;832    
;;;833    	#if( portUSING_MPU_WRAPPERS == 1 )
;;;834    		/* Should the task be created in privileged mode? */
;;;835    		BaseType_t xRunPrivileged;
;;;836    		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
;;;837    		{
;;;838    			xRunPrivileged = pdTRUE;
;;;839    		}
;;;840    		else
;;;841    		{
;;;842    			xRunPrivileged = pdFALSE;
;;;843    		}
;;;844    		uxPriority &= ~portPRIVILEGE_BIT;
;;;845    	#endif /* portUSING_MPU_WRAPPERS == 1 */
;;;846    
;;;847    	/* Avoid dependency on memset() if it is not required. */
;;;848    	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
;;;849    	{
;;;850    		/* Fill the stack with a known value to assist debugging. */
;;;851    		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
000010  ea4f0188          LSL      r1,r8,#2
000014  22a5              MOVS     r2,#0xa5
000016  6b20              LDR      r0,[r4,#0x30]
000018  f7fffffe          BL       __aeabi_memset
;;;852    	}
;;;853    	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
;;;854    
;;;855    	/* Calculate the top of stack address.  This depends on whether the stack
;;;856    	grows from high memory to low (as per the 80x86) or vice versa.
;;;857    	portSTACK_GROWTH is used to make the result positive or negative as required
;;;858    	by the port. */
;;;859    	#if( portSTACK_GROWTH < 0 )
;;;860    	{
;;;861    		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
00001c  f1a80001          SUB      r0,r8,#1
000020  6b21              LDR      r1,[r4,#0x30]
000022  eb010980          ADD      r9,r1,r0,LSL #2
;;;862    		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
000026  f0290907          BIC      r9,r9,#7
;;;863    
;;;864    		/* Check the alignment of the calculated top of stack is correct. */
;;;865    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
00002a  f0090007          AND      r0,r9,#7
00002e  b908              CBNZ     r0,|L8.52|
000030  2001              MOVS     r0,#1
000032  e000              B        |L8.54|
                  |L8.52|
000034  2000              MOVS     r0,#0
                  |L8.54|
000036  b950              CBNZ     r0,|L8.78|
000038  bf00              NOP      
00003a  2050              MOVS     r0,#0x50
00003c  f3808811          MSR      BASEPRI,r0
000040  f3bf8f4f          DSB      
000044  f3bf8f6f          ISB      
000048  bf00              NOP      
00004a  bf00              NOP      
                  |L8.76|
00004c  e7fe              B        |L8.76|
                  |L8.78|
;;;866    
;;;867    		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
;;;868    		{
;;;869    			/* Also record the stack's high address, which may assist
;;;870    			debugging. */
;;;871    			pxNewTCB->pxEndOfStack = pxTopOfStack;
;;;872    		}
;;;873    		#endif /* configRECORD_STACK_HIGH_ADDRESS */
;;;874    	}
;;;875    	#else /* portSTACK_GROWTH */
;;;876    	{
;;;877    		pxTopOfStack = pxNewTCB->pxStack;
;;;878    
;;;879    		/* Check the alignment of the stack buffer is correct. */
;;;880    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;881    
;;;882    		/* The other extreme of the stack space is required if stack checking is
;;;883    		performed. */
;;;884    		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
;;;885    	}
;;;886    	#endif /* portSTACK_GROWTH */
;;;887    
;;;888    	/* Store the task name in the TCB. */
;;;889    	if( pcName != NULL )
00004e  b186              CBZ      r6,|L8.114|
;;;890    	{
;;;891    		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
000050  2500              MOVS     r5,#0
000052  e007              B        |L8.100|
                  |L8.84|
;;;892    		{
;;;893    			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
000054  5d71              LDRB     r1,[r6,r5]
000056  f1040034          ADD      r0,r4,#0x34
00005a  5541              STRB     r1,[r0,r5]
;;;894    
;;;895    			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
;;;896    			configMAX_TASK_NAME_LEN characters just in case the memory after the
;;;897    			string is not accessible (extremely unlikely). */
;;;898    			if( pcName[ x ] == ( char ) 0x00 )
00005c  5d70              LDRB     r0,[r6,r5]
00005e  b900              CBNZ     r0,|L8.98|
;;;899    			{
;;;900    				break;
000060  e002              B        |L8.104|
                  |L8.98|
000062  1c6d              ADDS     r5,r5,#1              ;891
                  |L8.100|
000064  2d14              CMP      r5,#0x14              ;891
000066  d3f5              BCC      |L8.84|
                  |L8.104|
000068  bf00              NOP      
;;;901    			}
;;;902    			else
;;;903    			{
;;;904    				mtCOVERAGE_TEST_MARKER();
;;;905    			}
;;;906    		}
;;;907    
;;;908    		/* Ensure the name string is terminated in the case that the string length
;;;909    		was greater or equal to configMAX_TASK_NAME_LEN. */
;;;910    		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
00006a  2100              MOVS     r1,#0
00006c  2047              MOVS     r0,#0x47
00006e  5501              STRB     r1,[r0,r4]
000070  e002              B        |L8.120|
                  |L8.114|
;;;911    	}
;;;912    	else
;;;913    	{
;;;914    		/* The task has not been given a name, so just ensure there is a NULL
;;;915    		terminator when it is read out. */
;;;916    		pxNewTCB->pcTaskName[ 0 ] = 0x00;
000072  2000              MOVS     r0,#0
000074  f8840034          STRB     r0,[r4,#0x34]
                  |L8.120|
;;;917    	}
;;;918    
;;;919    	/* This is used as an array index so must ensure it's not too large.  First
;;;920    	remove the privilege bit if one is present. */
;;;921    	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
000078  2f05              CMP      r7,#5
00007a  d300              BCC      |L8.126|
;;;922    	{
;;;923    		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
00007c  2704              MOVS     r7,#4
                  |L8.126|
;;;924    	}
;;;925    	else
;;;926    	{
;;;927    		mtCOVERAGE_TEST_MARKER();
;;;928    	}
;;;929    
;;;930    	pxNewTCB->uxPriority = uxPriority;
00007e  62e7              STR      r7,[r4,#0x2c]
;;;931    	#if ( configUSE_MUTEXES == 1 )
;;;932    	{
;;;933    		pxNewTCB->uxBasePriority = uxPriority;
000080  6527              STR      r7,[r4,#0x50]
;;;934    		pxNewTCB->uxMutexesHeld = 0;
000082  2000              MOVS     r0,#0
000084  6560              STR      r0,[r4,#0x54]
;;;935    	}
;;;936    	#endif /* configUSE_MUTEXES */
;;;937    
;;;938    	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
000086  1d20              ADDS     r0,r4,#4
000088  f7fffffe          BL       vListInitialiseItem
;;;939    	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
00008c  f1040018          ADD      r0,r4,#0x18
000090  f7fffffe          BL       vListInitialiseItem
;;;940    
;;;941    	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
;;;942    	back to	the containing TCB from a generic item in a list. */
;;;943    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
000094  6124              STR      r4,[r4,#0x10]
;;;944    
;;;945    	/* Event lists are always in priority order. */
;;;946    	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000096  f1c70005          RSB      r0,r7,#5
00009a  61a0              STR      r0,[r4,#0x18]
;;;947    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
00009c  6264              STR      r4,[r4,#0x24]
;;;948    
;;;949    	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
;;;950    	{
;;;951    		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
;;;952    	}
;;;953    	#endif /* portCRITICAL_NESTING_IN_TCB */
;;;954    
;;;955    	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
;;;956    	{
;;;957    		pxNewTCB->pxTaskTag = NULL;
;;;958    	}
;;;959    	#endif /* configUSE_APPLICATION_TASK_TAG */
;;;960    
;;;961    	#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;962    	{
;;;963    		pxNewTCB->ulRunTimeCounter = 0UL;
;;;964    	}
;;;965    	#endif /* configGENERATE_RUN_TIME_STATS */
;;;966    
;;;967    	#if ( portUSING_MPU_WRAPPERS == 1 )
;;;968    	{
;;;969    		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
;;;970    	}
;;;971    	#else
;;;972    	{
;;;973    		/* Avoid compiler warning about unreferenced parameter. */
;;;974    		( void ) xRegions;
;;;975    	}
;;;976    	#endif
;;;977    
;;;978    	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
;;;979    	{
;;;980    		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
;;;981    		{
;;;982    			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
;;;983    		}
;;;984    	}
;;;985    	#endif
;;;986    
;;;987    	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
;;;988    	{
;;;989    		pxNewTCB->ulNotifiedValue = 0;
00009e  2000              MOVS     r0,#0
0000a0  65a0              STR      r0,[r4,#0x58]
;;;990    		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
0000a2  f884005c          STRB     r0,[r4,#0x5c]
;;;991    	}
;;;992    	#endif
;;;993    
;;;994    	#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;995    	{
;;;996    		/* Initialise this task's Newlib reent structure. */
;;;997    		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
;;;998    	}
;;;999    	#endif
;;;1000   
;;;1001   	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;1002   	{
;;;1003   		pxNewTCB->ucDelayAborted = pdFALSE;
;;;1004   	}
;;;1005   	#endif
;;;1006   
;;;1007   	/* Initialize the TCB stack to look as if the task was already running,
;;;1008   	but had been interrupted by the scheduler.  The return address is set
;;;1009   	to the start of the task function. Once the stack has been initialised
;;;1010   	the top of stack variable is updated. */
;;;1011   	#if( portUSING_MPU_WRAPPERS == 1 )
;;;1012   	{
;;;1013   		/* If the port has capability to detect stack overflow,
;;;1014   		pass the stack end address to the stack initialization
;;;1015   		function as well. */
;;;1016   		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
;;;1017   		{
;;;1018   			#if( portSTACK_GROWTH < 0 )
;;;1019   			{
;;;1020   				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;1021   			}
;;;1022   			#else /* portSTACK_GROWTH */
;;;1023   			{
;;;1024   				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;1025   			}
;;;1026   			#endif /* portSTACK_GROWTH */
;;;1027   		}
;;;1028   		#else /* portHAS_STACK_OVERFLOW_CHECKING */
;;;1029   		{
;;;1030   			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;1031   		}
;;;1032   		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
;;;1033   	}
;;;1034   	#else /* portUSING_MPU_WRAPPERS */
;;;1035   	{
;;;1036   		/* If the port has capability to detect stack overflow,
;;;1037   		pass the stack end address to the stack initialization
;;;1038   		function as well. */
;;;1039   		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
;;;1040   		{
;;;1041   			#if( portSTACK_GROWTH < 0 )
;;;1042   			{
;;;1043   				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
;;;1044   			}
;;;1045   			#else /* portSTACK_GROWTH */
;;;1046   			{
;;;1047   				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCode, pvParameters );
;;;1048   			}
;;;1049   			#endif /* portSTACK_GROWTH */
;;;1050   		}
;;;1051   		#else /* portHAS_STACK_OVERFLOW_CHECKING */
;;;1052   		{
;;;1053   			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
0000a6  465a              MOV      r2,r11
0000a8  4651              MOV      r1,r10
0000aa  4648              MOV      r0,r9
0000ac  f7fffffe          BL       pxPortInitialiseStack
0000b0  6020              STR      r0,[r4,#0]
;;;1054   		}
;;;1055   		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
;;;1056   	}
;;;1057   	#endif /* portUSING_MPU_WRAPPERS */
;;;1058   
;;;1059   	if( pxCreatedTask != NULL )
0000b2  980b              LDR      r0,[sp,#0x2c]
0000b4  b108              CBZ      r0,|L8.186|
;;;1060   	{
;;;1061   		/* Pass the handle out in an anonymous way.  The handle can be used to
;;;1062   		change the created task's priority, delete the created task, etc.*/
;;;1063   		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
0000b6  980b              LDR      r0,[sp,#0x2c]
0000b8  6004              STR      r4,[r0,#0]
                  |L8.186|
;;;1064   	}
;;;1065   	else
;;;1066   	{
;;;1067   		mtCOVERAGE_TEST_MARKER();
;;;1068   	}
;;;1069   }
0000ba  e8bd9ff0          POP      {r4-r12,pc}
;;;1070   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvInitialiseTaskLists||, CODE, READONLY, ALIGN=2

                  prvInitialiseTaskLists PROC
;;;3545   
;;;3546   static void prvInitialiseTaskLists( void )
000000  b510              PUSH     {r4,lr}
;;;3547   {
;;;3548   UBaseType_t uxPriority;
;;;3549   
;;;3550   	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
000002  2400              MOVS     r4,#0
000004  e007              B        |L9.22|
                  |L9.6|
;;;3551   	{
;;;3552   		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
000006  eb040184          ADD      r1,r4,r4,LSL #2
00000a  4a0f              LDR      r2,|L9.72|
00000c  eb020081          ADD      r0,r2,r1,LSL #2
000010  f7fffffe          BL       vListInitialise
000014  1c64              ADDS     r4,r4,#1              ;3550
                  |L9.22|
000016  2c05              CMP      r4,#5                 ;3550
000018  d3f5              BCC      |L9.6|
;;;3553   	}
;;;3554   
;;;3555   	vListInitialise( &xDelayedTaskList1 );
00001a  480c              LDR      r0,|L9.76|
00001c  f7fffffe          BL       vListInitialise
;;;3556   	vListInitialise( &xDelayedTaskList2 );
000020  480b              LDR      r0,|L9.80|
000022  f7fffffe          BL       vListInitialise
;;;3557   	vListInitialise( &xPendingReadyList );
000026  480b              LDR      r0,|L9.84|
000028  f7fffffe          BL       vListInitialise
;;;3558   
;;;3559   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3560   	{
;;;3561   		vListInitialise( &xTasksWaitingTermination );
00002c  480a              LDR      r0,|L9.88|
00002e  f7fffffe          BL       vListInitialise
;;;3562   	}
;;;3563   	#endif /* INCLUDE_vTaskDelete */
;;;3564   
;;;3565   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;3566   	{
;;;3567   		vListInitialise( &xSuspendedTaskList );
000032  480a              LDR      r0,|L9.92|
000034  f7fffffe          BL       vListInitialise
;;;3568   	}
;;;3569   	#endif /* INCLUDE_vTaskSuspend */
;;;3570   
;;;3571   	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
;;;3572   	using list2. */
;;;3573   	pxDelayedTaskList = &xDelayedTaskList1;
000038  4804              LDR      r0,|L9.76|
00003a  4909              LDR      r1,|L9.96|
00003c  6008              STR      r0,[r1,#0]  ; pxDelayedTaskList
;;;3574   	pxOverflowDelayedTaskList = &xDelayedTaskList2;
00003e  4804              LDR      r0,|L9.80|
000040  4908              LDR      r1,|L9.100|
000042  6008              STR      r0,[r1,#0]  ; pxOverflowDelayedTaskList
;;;3575   }
000044  bd10              POP      {r4,pc}
;;;3576   /*-----------------------------------------------------------*/
                          ENDP

000046  0000              DCW      0x0000
                  |L9.72|
                          DCD      pxReadyTasksLists
                  |L9.76|
                          DCD      xDelayedTaskList1
                  |L9.80|
                          DCD      xDelayedTaskList2
                  |L9.84|
                          DCD      xPendingReadyList
                  |L9.88|
                          DCD      xTasksWaitingTermination
                  |L9.92|
                          DCD      xSuspendedTaskList
                  |L9.96|
                          DCD      pxDelayedTaskList
                  |L9.100|
                          DCD      pxOverflowDelayedTaskList

                          AREA ||i.prvListTasksWithinSingleList||, CODE, READONLY, ALIGN=1

                  prvListTasksWithinSingleList PROC
;;;3704   
;;;3705   	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3706   	{
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4690              MOV      r8,r2
;;;3707   	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
;;;3708   	UBaseType_t uxTask = 0;
00000a  2600              MOVS     r6,#0
;;;3709   
;;;3710   		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
00000c  6820              LDR      r0,[r4,#0]
00000e  b348              CBZ      r0,|L10.100|
;;;3711   		{
;;;3712   			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000010  4620              MOV      r0,r4
000012  6841              LDR      r1,[r0,#4]
000014  6849              LDR      r1,[r1,#4]
000016  6041              STR      r1,[r0,#4]
000018  f1000108          ADD      r1,r0,#8
00001c  6842              LDR      r2,[r0,#4]
00001e  428a              CMP      r2,r1
000020  d102              BNE      |L10.40|
000022  6841              LDR      r1,[r0,#4]
000024  6849              LDR      r1,[r1,#4]
000026  6041              STR      r1,[r0,#4]
                  |L10.40|
000028  6841              LDR      r1,[r0,#4]
00002a  f8d1900c          LDR      r9,[r1,#0xc]
;;;3713   
;;;3714   			/* Populate an TaskStatus_t structure within the
;;;3715   			pxTaskStatusArray array for each task that is referenced from
;;;3716   			pxList.  See the definition of TaskStatus_t in task.h for the
;;;3717   			meaning of each TaskStatus_t structure member. */
;;;3718   			do
00002e  bf00              NOP      
                  |L10.48|
;;;3719   			{
;;;3720   				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000030  4620              MOV      r0,r4
000032  6841              LDR      r1,[r0,#4]
000034  6849              LDR      r1,[r1,#4]
000036  6041              STR      r1,[r0,#4]
000038  f1000108          ADD      r1,r0,#8
00003c  6842              LDR      r2,[r0,#4]
00003e  428a              CMP      r2,r1
000040  d102              BNE      |L10.72|
000042  6841              LDR      r1,[r0,#4]
000044  6849              LDR      r1,[r1,#4]
000046  6041              STR      r1,[r0,#4]
                  |L10.72|
000048  6841              LDR      r1,[r0,#4]
00004a  68cd              LDR      r5,[r1,#0xc]
;;;3721   				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
00004c  eb0600c6          ADD      r0,r6,r6,LSL #3
000050  eb070180          ADD      r1,r7,r0,LSL #2
000054  4643              MOV      r3,r8
000056  2201              MOVS     r2,#1
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       vTaskGetInfo
;;;3722   				uxTask++;
00005e  1c76              ADDS     r6,r6,#1
;;;3723   			} while( pxNextTCB != pxFirstTCB );
000060  454d              CMP      r5,r9
000062  d1e5              BNE      |L10.48|
                  |L10.100|
;;;3724   		}
;;;3725   		else
;;;3726   		{
;;;3727   			mtCOVERAGE_TEST_MARKER();
;;;3728   		}
;;;3729   
;;;3730   		return uxTask;
000064  4630              MOV      r0,r6
;;;3731   	}
000066  e8bd87f0          POP      {r4-r10,pc}
;;;3732   
                          ENDP


                          AREA ||i.prvResetNextTaskUnblockTime||, CODE, READONLY, ALIGN=2

                  prvResetNextTaskUnblockTime PROC
;;;3879   
;;;3880   static void prvResetNextTaskUnblockTime( void )
000000  490a              LDR      r1,|L11.44|
;;;3881   {
;;;3882   TCB_t *pxTCB;
;;;3883   
;;;3884   	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
000002  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
000004  6809              LDR      r1,[r1,#0]
000006  b909              CBNZ     r1,|L11.12|
000008  2101              MOVS     r1,#1
00000a  e000              B        |L11.14|
                  |L11.12|
00000c  2100              MOVS     r1,#0
                  |L11.14|
00000e  b121              CBZ      r1,|L11.26|
;;;3885   	{
;;;3886   		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
;;;3887   		the maximum possible value so it is	extremely unlikely that the
;;;3888   		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
;;;3889   		there is an item in the delayed list. */
;;;3890   		xNextTaskUnblockTime = portMAX_DELAY;
000010  f04f31ff          MOV      r1,#0xffffffff
000014  4a06              LDR      r2,|L11.48|
000016  6011              STR      r1,[r2,#0]  ; xNextTaskUnblockTime
000018  e006              B        |L11.40|
                  |L11.26|
;;;3891   	}
;;;3892   	else
;;;3893   	{
;;;3894   		/* The new current delayed list is not empty, get the value of
;;;3895   		the item at the head of the delayed list.  This is the time at
;;;3896   		which the task at the head of the delayed list should be removed
;;;3897   		from the Blocked state. */
;;;3898   		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
00001a  4904              LDR      r1,|L11.44|
00001c  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
00001e  68c9              LDR      r1,[r1,#0xc]
000020  68c8              LDR      r0,[r1,#0xc]
;;;3899   		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
000022  4a03              LDR      r2,|L11.48|
000024  6841              LDR      r1,[r0,#4]
000026  6011              STR      r1,[r2,#0]  ; xNextTaskUnblockTime
                  |L11.40|
;;;3900   	}
;;;3901   }
000028  4770              BX       lr
;;;3902   /*-----------------------------------------------------------*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L11.44|
                          DCD      pxDelayedTaskList
                  |L11.48|
                          DCD      xNextTaskUnblockTime

                          AREA ||i.prvTaskCheckFreeStackSpace||, CODE, READONLY, ALIGN=1

                  prvTaskCheckFreeStackSpace PROC
;;;3737   
;;;3738   	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
000000  4602              MOV      r2,r0
;;;3739   	{
;;;3740   	uint32_t ulCount = 0U;
000002  2100              MOVS     r1,#0
;;;3741   
;;;3742   		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
000004  e001              B        |L12.10|
                  |L12.6|
;;;3743   		{
;;;3744   			pucStackByte -= portSTACK_GROWTH;
000006  1c52              ADDS     r2,r2,#1
;;;3745   			ulCount++;
000008  1c49              ADDS     r1,r1,#1
                  |L12.10|
00000a  7810              LDRB     r0,[r2,#0]            ;3742
00000c  28a5              CMP      r0,#0xa5              ;3742
00000e  d0fa              BEQ      |L12.6|
;;;3746   		}
;;;3747   
;;;3748   		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
000010  0889              LSRS     r1,r1,#2
;;;3749   
;;;3750   		return ( configSTACK_DEPTH_TYPE ) ulCount;
000012  b288              UXTH     r0,r1
;;;3751   	}
000014  4770              BX       lr
;;;3752   
                          ENDP


                          AREA ||i.prvTaskIsTaskSuspended||, CODE, READONLY, ALIGN=2

                  prvTaskIsTaskSuspended PROC
;;;1796   
;;;1797   	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
000000  b510              PUSH     {r4,lr}
;;;1798   	{
000002  4602              MOV      r2,r0
;;;1799   	BaseType_t xReturn = pdFALSE;
000004  2000              MOVS     r0,#0
;;;1800   	const TCB_t * const pxTCB = xTask;
000006  4611              MOV      r1,r2
;;;1801   
;;;1802   		/* Accesses xPendingReadyList so must be called from a critical
;;;1803   		section. */
;;;1804   
;;;1805   		/* It does not make sense to check if the calling task is suspended. */
;;;1806   		configASSERT( xTask );
000008  b952              CBNZ     r2,|L13.32|
00000a  bf00              NOP      
00000c  2350              MOVS     r3,#0x50
00000e  f3838811          MSR      BASEPRI,r3
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L13.30|
00001e  e7fe              B        |L13.30|
                  |L13.32|
;;;1807   
;;;1808   		/* Is the task being resumed actually in the suspended list? */
;;;1809   		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
000020  4c0b              LDR      r4,|L13.80|
000022  694b              LDR      r3,[r1,#0x14]
000024  42a3              CMP      r3,r4
000026  d101              BNE      |L13.44|
000028  2301              MOVS     r3,#1
00002a  e000              B        |L13.46|
                  |L13.44|
00002c  2300              MOVS     r3,#0
                  |L13.46|
00002e  b173              CBZ      r3,|L13.78|
;;;1810   		{
;;;1811   			/* Has the task already been resumed from within an ISR? */
;;;1812   			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
000030  4c08              LDR      r4,|L13.84|
000032  6a8b              LDR      r3,[r1,#0x28]
000034  42a3              CMP      r3,r4
000036  d101              BNE      |L13.60|
000038  2301              MOVS     r3,#1
00003a  e000              B        |L13.62|
                  |L13.60|
00003c  2300              MOVS     r3,#0
                  |L13.62|
00003e  b933              CBNZ     r3,|L13.78|
;;;1813   			{
;;;1814   				/* Is it in the suspended list because it is in the	Suspended
;;;1815   				state, or because is is blocked with no timeout? */
;;;1816   				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
000040  6a8b              LDR      r3,[r1,#0x28]
000042  b90b              CBNZ     r3,|L13.72|
000044  2301              MOVS     r3,#1
000046  e000              B        |L13.74|
                  |L13.72|
000048  2300              MOVS     r3,#0
                  |L13.74|
00004a  b103              CBZ      r3,|L13.78|
;;;1817   				{
;;;1818   					xReturn = pdTRUE;
00004c  2001              MOVS     r0,#1
                  |L13.78|
;;;1819   				}
;;;1820   				else
;;;1821   				{
;;;1822   					mtCOVERAGE_TEST_MARKER();
;;;1823   				}
;;;1824   			}
;;;1825   			else
;;;1826   			{
;;;1827   				mtCOVERAGE_TEST_MARKER();
;;;1828   			}
;;;1829   		}
;;;1830   		else
;;;1831   		{
;;;1832   			mtCOVERAGE_TEST_MARKER();
;;;1833   		}
;;;1834   
;;;1835   		return xReturn;
;;;1836   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
00004e  bd10              POP      {r4,pc}
;;;1837   
                          ENDP

                  |L13.80|
                          DCD      xSuspendedTaskList
                  |L13.84|
                          DCD      xPendingReadyList

                          AREA ||i.pvTaskIncrementMutexHeldCount||, CODE, READONLY, ALIGN=2

                  pvTaskIncrementMutexHeldCount PROC
;;;4548   
;;;4549   	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
000000  4806              LDR      r0,|L14.28|
;;;4550   	{
;;;4551   		/* If xSemaphoreCreateMutex() is called before any tasks have been created
;;;4552   		then pxCurrentTCB will be NULL. */
;;;4553   		if( pxCurrentTCB != NULL )
000002  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000004  b130              CBZ      r0,|L14.20|
;;;4554   		{
;;;4555   			( pxCurrentTCB->uxMutexesHeld )++;
000006  4905              LDR      r1,|L14.28|
000008  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000a  f1010054          ADD      r0,r1,#0x54
00000e  6d49              LDR      r1,[r1,#0x54]
000010  1c49              ADDS     r1,r1,#1
000012  6001              STR      r1,[r0,#0]
                  |L14.20|
;;;4556   		}
;;;4557   
;;;4558   		return pxCurrentTCB;
000014  4801              LDR      r0,|L14.28|
000016  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
;;;4559   	}
000018  4770              BX       lr
;;;4560   
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      pxCurrentTCB

                          AREA ||i.ulTaskNotifyTake||, CODE, READONLY, ALIGN=2

                  ulTaskNotifyTake PROC
;;;4565   
;;;4566   	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;4567   	{
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;4568   	uint32_t ulReturn;
;;;4569   
;;;4570   		taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;4571   		{
;;;4572   			/* Only block if the notification count is not already non-zero. */
;;;4573   			if( pxCurrentTCB->ulNotifiedValue == 0UL )
00000a  4818              LDR      r0,|L15.108|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  6d80              LDR      r0,[r0,#0x58]
000010  b988              CBNZ     r0,|L15.54|
;;;4574   			{
;;;4575   				/* Mark this task as waiting for a notification. */
;;;4576   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
000012  2001              MOVS     r0,#1
000014  4915              LDR      r1,|L15.108|
000016  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000018  f881005c          STRB     r0,[r1,#0x5c]
;;;4577   
;;;4578   				if( xTicksToWait > ( TickType_t ) 0 )
00001c  b15d              CBZ      r5,|L15.54|
;;;4579   				{
;;;4580   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00001e  2101              MOVS     r1,#1
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4581   					traceTASK_NOTIFY_TAKE_BLOCK();
;;;4582   
;;;4583   					/* All ports are written to allow a yield in a critical
;;;4584   					section (some will yield immediately, others wait until the
;;;4585   					critical section exits) - but it is not something that
;;;4586   					application code should ever do. */
;;;4587   					portYIELD_WITHIN_API();
000026  f04f5080          MOV      r0,#0x10000000
00002a  4911              LDR      r1,|L15.112|
00002c  6008              STR      r0,[r1,#0]
00002e  f3bf8f4f          DSB      
000032  f3bf8f6f          ISB      
                  |L15.54|
;;;4588   				}
;;;4589   				else
;;;4590   				{
;;;4591   					mtCOVERAGE_TEST_MARKER();
;;;4592   				}
;;;4593   			}
;;;4594   			else
;;;4595   			{
;;;4596   				mtCOVERAGE_TEST_MARKER();
;;;4597   			}
;;;4598   		}
;;;4599   		taskEXIT_CRITICAL();
000036  f7fffffe          BL       vPortExitCritical
;;;4600   
;;;4601   		taskENTER_CRITICAL();
00003a  f7fffffe          BL       vPortEnterCritical
;;;4602   		{
;;;4603   			traceTASK_NOTIFY_TAKE();
;;;4604   			ulReturn = pxCurrentTCB->ulNotifiedValue;
00003e  480b              LDR      r0,|L15.108|
000040  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000042  6d84              LDR      r4,[r0,#0x58]
;;;4605   
;;;4606   			if( ulReturn != 0UL )
000044  b14c              CBZ      r4,|L15.90|
;;;4607   			{
;;;4608   				if( xClearCountOnExit != pdFALSE )
000046  b126              CBZ      r6,|L15.82|
;;;4609   				{
;;;4610   					pxCurrentTCB->ulNotifiedValue = 0UL;
000048  2000              MOVS     r0,#0
00004a  4908              LDR      r1,|L15.108|
00004c  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00004e  6588              STR      r0,[r1,#0x58]
000050  e003              B        |L15.90|
                  |L15.82|
;;;4611   				}
;;;4612   				else
;;;4613   				{
;;;4614   					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
000052  1e60              SUBS     r0,r4,#1
000054  4905              LDR      r1,|L15.108|
000056  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000058  6588              STR      r0,[r1,#0x58]
                  |L15.90|
;;;4615   				}
;;;4616   			}
;;;4617   			else
;;;4618   			{
;;;4619   				mtCOVERAGE_TEST_MARKER();
;;;4620   			}
;;;4621   
;;;4622   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
00005a  2000              MOVS     r0,#0
00005c  4903              LDR      r1,|L15.108|
00005e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000060  f881005c          STRB     r0,[r1,#0x5c]
;;;4623   		}
;;;4624   		taskEXIT_CRITICAL();
000064  f7fffffe          BL       vPortExitCritical
;;;4625   
;;;4626   		return ulReturn;
000068  4620              MOV      r0,r4
;;;4627   	}
00006a  bd70              POP      {r4-r6,pc}
;;;4628   
                          ENDP

                  |L15.108|
                          DCD      pxCurrentTCB
                  |L15.112|
                          DCD      0xe000ed04

                          AREA ||i.uxTaskGetNumberOfTasks||, CODE, READONLY, ALIGN=2

                  uxTaskGetNumberOfTasks PROC
;;;2329   
;;;2330   UBaseType_t uxTaskGetNumberOfTasks( void )
000000  4801              LDR      r0,|L16.8|
;;;2331   {
;;;2332   	/* A critical section is not required because the variables are of type
;;;2333   	BaseType_t. */
;;;2334   	return uxCurrentNumberOfTasks;
000002  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
;;;2335   }
000004  4770              BX       lr
;;;2336   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      uxCurrentNumberOfTasks

                          AREA ||i.uxTaskGetSystemState||, CODE, READONLY, ALIGN=2

                  uxTaskGetSystemState PROC
;;;2484   
;;;2485   	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2486   	{
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;2487   	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
00000a  2400              MOVS     r4,#0
00000c  2705              MOVS     r7,#5
;;;2488   
;;;2489   		vTaskSuspendAll();
00000e  f7fffffe          BL       vTaskSuspendAll
;;;2490   		{
;;;2491   			/* Is there a space in the array for each task in the system? */
;;;2492   			if( uxArraySize >= uxCurrentNumberOfTasks )
000012  4821              LDR      r0,|L17.152|
000014  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000016  4580              CMP      r8,r0
000018  d339              BCC      |L17.142|
;;;2493   			{
;;;2494   				/* Fill in an TaskStatus_t structure with information on each
;;;2495   				task in the Ready state. */
;;;2496   				do
00001a  bf00              NOP      
                  |L17.28|
;;;2497   				{
;;;2498   					uxQueue--;
00001c  1e7f              SUBS     r7,r7,#1
;;;2499   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
00001e  eb070287          ADD      r2,r7,r7,LSL #2
000022  4b1e              LDR      r3,|L17.156|
000024  eb030182          ADD      r1,r3,r2,LSL #2
000028  eb0402c4          ADD      r2,r4,r4,LSL #3
00002c  eb050082          ADD      r0,r5,r2,LSL #2
000030  2201              MOVS     r2,#1
000032  f7fffffe          BL       prvListTasksWithinSingleList
000036  4404              ADD      r4,r4,r0
;;;2500   
;;;2501   				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000038  2f00              CMP      r7,#0
00003a  d1ef              BNE      |L17.28|
;;;2502   
;;;2503   				/* Fill in an TaskStatus_t structure with information on each
;;;2504   				task in the Blocked state. */
;;;2505   				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
00003c  eb0401c4          ADD      r1,r4,r4,LSL #3
000040  eb050081          ADD      r0,r5,r1,LSL #2
000044  2202              MOVS     r2,#2
000046  4916              LDR      r1,|L17.160|
000048  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
00004a  f7fffffe          BL       prvListTasksWithinSingleList
00004e  4404              ADD      r4,r4,r0
;;;2506   				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
000050  eb0401c4          ADD      r1,r4,r4,LSL #3
000054  eb050081          ADD      r0,r5,r1,LSL #2
000058  2202              MOVS     r2,#2
00005a  4912              LDR      r1,|L17.164|
00005c  6809              LDR      r1,[r1,#0]  ; pxOverflowDelayedTaskList
00005e  f7fffffe          BL       prvListTasksWithinSingleList
000062  4404              ADD      r4,r4,r0
;;;2507   
;;;2508   				#if( INCLUDE_vTaskDelete == 1 )
;;;2509   				{
;;;2510   					/* Fill in an TaskStatus_t structure with information on
;;;2511   					each task that has been deleted but not yet cleaned up. */
;;;2512   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
000064  eb0401c4          ADD      r1,r4,r4,LSL #3
000068  eb050081          ADD      r0,r5,r1,LSL #2
00006c  2204              MOVS     r2,#4
00006e  490e              LDR      r1,|L17.168|
000070  f7fffffe          BL       prvListTasksWithinSingleList
000074  4404              ADD      r4,r4,r0
;;;2513   				}
;;;2514   				#endif
;;;2515   
;;;2516   				#if ( INCLUDE_vTaskSuspend == 1 )
;;;2517   				{
;;;2518   					/* Fill in an TaskStatus_t structure with information on
;;;2519   					each task in the Suspended state. */
;;;2520   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
000076  eb0401c4          ADD      r1,r4,r4,LSL #3
00007a  eb050081          ADD      r0,r5,r1,LSL #2
00007e  2203              MOVS     r2,#3
000080  490a              LDR      r1,|L17.172|
000082  f7fffffe          BL       prvListTasksWithinSingleList
000086  4404              ADD      r4,r4,r0
;;;2521   				}
;;;2522   				#endif
;;;2523   
;;;2524   				#if ( configGENERATE_RUN_TIME_STATS == 1)
;;;2525   				{
;;;2526   					if( pulTotalRunTime != NULL )
;;;2527   					{
;;;2528   						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2529   							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
;;;2530   						#else
;;;2531   							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2532   						#endif
;;;2533   					}
;;;2534   				}
;;;2535   				#else
;;;2536   				{
;;;2537   					if( pulTotalRunTime != NULL )
000088  b10e              CBZ      r6,|L17.142|
;;;2538   					{
;;;2539   						*pulTotalRunTime = 0;
00008a  2000              MOVS     r0,#0
00008c  6030              STR      r0,[r6,#0]
                  |L17.142|
;;;2540   					}
;;;2541   				}
;;;2542   				#endif
;;;2543   			}
;;;2544   			else
;;;2545   			{
;;;2546   				mtCOVERAGE_TEST_MARKER();
;;;2547   			}
;;;2548   		}
;;;2549   		( void ) xTaskResumeAll();
00008e  f7fffffe          BL       xTaskResumeAll
;;;2550   
;;;2551   		return uxTask;
000092  4620              MOV      r0,r4
;;;2552   	}
000094  e8bd81f0          POP      {r4-r8,pc}
;;;2553   
                          ENDP

                  |L17.152|
                          DCD      uxCurrentNumberOfTasks
                  |L17.156|
                          DCD      pxReadyTasksLists
                  |L17.160|
                          DCD      pxDelayedTaskList
                  |L17.164|
                          DCD      pxOverflowDelayedTaskList
                  |L17.168|
                          DCD      xTasksWaitingTermination
                  |L17.172|
                          DCD      xSuspendedTaskList

                          AREA ||i.uxTaskGetTaskNumber||, CODE, READONLY, ALIGN=1

                  uxTaskGetTaskNumber PROC
;;;3286   
;;;3287   	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
000000  4601              MOV      r1,r0
;;;3288   	{
;;;3289   	UBaseType_t uxReturn;
;;;3290   	TCB_t const *pxTCB;
;;;3291   
;;;3292   		if( xTask != NULL )
000002  b111              CBZ      r1,|L18.10|
;;;3293   		{
;;;3294   			pxTCB = xTask;
000004  460a              MOV      r2,r1
;;;3295   			uxReturn = pxTCB->uxTaskNumber;
000006  6cd0              LDR      r0,[r2,#0x4c]
000008  e000              B        |L18.12|
                  |L18.10|
;;;3296   		}
;;;3297   		else
;;;3298   		{
;;;3299   			uxReturn = 0U;
00000a  2000              MOVS     r0,#0
                  |L18.12|
;;;3300   		}
;;;3301   
;;;3302   		return uxReturn;
;;;3303   	}
00000c  4770              BX       lr
;;;3304   
                          ENDP


                          AREA ||i.uxTaskPriorityGet||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGet PROC
;;;1469   
;;;1470   	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;1471   	{
000002  4604              MOV      r4,r0
;;;1472   	TCB_t const *pxTCB;
;;;1473   	UBaseType_t uxReturn;
;;;1474   
;;;1475   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1476   		{
;;;1477   			/* If null is passed in here then it is the priority of the task
;;;1478   			that called uxTaskPriorityGet() that is being queried. */
;;;1479   			pxTCB = prvGetTCBFromHandle( xTask );
000008  b914              CBNZ     r4,|L19.16|
00000a  4805              LDR      r0,|L19.32|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L19.18|
                  |L19.16|
000010  4620              MOV      r0,r4
                  |L19.18|
000012  4606              MOV      r6,r0
;;;1480   			uxReturn = pxTCB->uxPriority;
000014  6af5              LDR      r5,[r6,#0x2c]
;;;1481   		}
;;;1482   		taskEXIT_CRITICAL();
000016  f7fffffe          BL       vPortExitCritical
;;;1483   
;;;1484   		return uxReturn;
00001a  4628              MOV      r0,r5
;;;1485   	}
00001c  bd70              POP      {r4-r6,pc}
;;;1486   
                          ENDP

00001e  0000              DCW      0x0000
                  |L19.32|
                          DCD      pxCurrentTCB

                          AREA ||i.uxTaskPriorityGetFromISR||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGetFromISR PROC
;;;1491   
;;;1492   	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1493   	{
000004  4605              MOV      r5,r0
;;;1494   	TCB_t const *pxTCB;
;;;1495   	UBaseType_t uxReturn, uxSavedInterruptState;
;;;1496   
;;;1497   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1498   		maximum	system call (or maximum API call) interrupt priority.
;;;1499   		Interrupts that are	above the maximum system call priority are keep
;;;1500   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1501   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1502   		is defined in FreeRTOSConfig.h then
;;;1503   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1504   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1505   		been assigned a priority above the configured maximum system call
;;;1506   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1507   		from interrupts	that have been assigned a priority at or (logically)
;;;1508   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1509   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1510   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1511   		provided on the following link:
;;;1512   		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1513   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000006  f7fffffe          BL       vPortValidateInterruptPriority
;;;1514   
;;;1515   		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
00000a  bf00              NOP      
00000c  2150              MOVS     r1,#0x50
00000e  f3ef8011          MRS      r0,BASEPRI
000012  f3818811          MSR      BASEPRI,r1
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  bf00              NOP      
000020  4604              MOV      r4,r0
;;;1516   		{
;;;1517   			/* If null is passed in here then it is the priority of the calling
;;;1518   			task that is being queried. */
;;;1519   			pxTCB = prvGetTCBFromHandle( xTask );
000022  b915              CBNZ     r5,|L20.42|
000024  4806              LDR      r0,|L20.64|
000026  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000028  e000              B        |L20.44|
                  |L20.42|
00002a  4628              MOV      r0,r5
                  |L20.44|
00002c  4607              MOV      r7,r0
;;;1520   			uxReturn = pxTCB->uxPriority;
00002e  6afe              LDR      r6,[r7,#0x2c]
;;;1521   		}
;;;1522   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
000030  bf00              NOP      
000032  f3848811          MSR      BASEPRI,r4
000036  bf00              NOP      
;;;1523   
;;;1524   		return uxReturn;
000038  4630              MOV      r0,r6
;;;1525   	}
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;1526   
                          ENDP

00003e  0000              DCW      0x0000
                  |L20.64|
                          DCD      pxCurrentTCB

                          AREA ||i.uxTaskResetEventItemValue||, CODE, READONLY, ALIGN=2

                  uxTaskResetEventItemValue PROC
;;;4532   
;;;4533   TickType_t uxTaskResetEventItemValue( void )
000000  4905              LDR      r1,|L21.24|
;;;4534   {
;;;4535   TickType_t uxReturn;
;;;4536   
;;;4537   	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
000002  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000004  6988              LDR      r0,[r1,#0x18]
;;;4538   
;;;4539   	/* Reset the event list item to its normal value - so it can be used with
;;;4540   	queues and semaphores. */
;;;4541   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000006  4904              LDR      r1,|L21.24|
000008  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000a  6ac9              LDR      r1,[r1,#0x2c]
00000c  f1c10105          RSB      r1,r1,#5
000010  4a01              LDR      r2,|L21.24|
000012  6812              LDR      r2,[r2,#0]  ; pxCurrentTCB
000014  6191              STR      r1,[r2,#0x18]
;;;4542   
;;;4543   	return uxReturn;
;;;4544   }
000016  4770              BX       lr
;;;4545   /*-----------------------------------------------------------*/
                          ENDP

                  |L21.24|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskDelay||, CODE, READONLY, ALIGN=2

                  vTaskDelay PROC
;;;1332   
;;;1333   	void vTaskDelay( const TickType_t xTicksToDelay )
000000  b570              PUSH     {r4-r6,lr}
;;;1334   	{
000002  4604              MOV      r4,r0
;;;1335   	BaseType_t xAlreadyYielded = pdFALSE;
000004  2500              MOVS     r5,#0
;;;1336   
;;;1337   		/* A delay time of zero just forces a reschedule. */
;;;1338   		if( xTicksToDelay > ( TickType_t ) 0U )
000006  b1d4              CBZ      r4,|L22.62|
;;;1339   		{
;;;1340   			configASSERT( uxSchedulerSuspended == 0 );
000008  4812              LDR      r0,|L22.84|
00000a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000c  b908              CBNZ     r0,|L22.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L22.20|
                  |L22.18|
000012  2000              MOVS     r0,#0
                  |L22.20|
000014  b950              CBNZ     r0,|L22.44|
000016  bf00              NOP      
000018  2050              MOVS     r0,#0x50
00001a  f3808811          MSR      BASEPRI,r0
00001e  f3bf8f4f          DSB      
000022  f3bf8f6f          ISB      
000026  bf00              NOP      
000028  bf00              NOP      
                  |L22.42|
00002a  e7fe              B        |L22.42|
                  |L22.44|
;;;1341   			vTaskSuspendAll();
00002c  f7fffffe          BL       vTaskSuspendAll
;;;1342   			{
;;;1343   				traceTASK_DELAY();
;;;1344   
;;;1345   				/* A task that is removed from the event list while the
;;;1346   				scheduler is suspended will not get placed in the ready
;;;1347   				list or removed from the blocked list until the scheduler
;;;1348   				is resumed.
;;;1349   
;;;1350   				This task cannot be in an event list as it is the currently
;;;1351   				executing task. */
;;;1352   				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
000030  2100              MOVS     r1,#0
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;1353   			}
;;;1354   			xAlreadyYielded = xTaskResumeAll();
000038  f7fffffe          BL       xTaskResumeAll
00003c  4605              MOV      r5,r0
                  |L22.62|
;;;1355   		}
;;;1356   		else
;;;1357   		{
;;;1358   			mtCOVERAGE_TEST_MARKER();
;;;1359   		}
;;;1360   
;;;1361   		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;1362   		have put ourselves to sleep. */
;;;1363   		if( xAlreadyYielded == pdFALSE )
00003e  b93d              CBNZ     r5,|L22.80|
;;;1364   		{
;;;1365   			portYIELD_WITHIN_API();
000040  f04f5080          MOV      r0,#0x10000000
000044  4904              LDR      r1,|L22.88|
000046  6008              STR      r0,[r1,#0]
000048  f3bf8f4f          DSB      
00004c  f3bf8f6f          ISB      
                  |L22.80|
;;;1366   		}
;;;1367   		else
;;;1368   		{
;;;1369   			mtCOVERAGE_TEST_MARKER();
;;;1370   		}
;;;1371   	}
000050  bd70              POP      {r4-r6,pc}
;;;1372   
                          ENDP

000052  0000              DCW      0x0000
                  |L22.84|
                          DCD      uxSchedulerSuspended
                  |L22.88|
                          DCD      0xe000ed04

                          AREA ||i.vTaskDelayUntil||, CODE, READONLY, ALIGN=2

                  vTaskDelayUntil PROC
;;;1248   
;;;1249   	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1250   	{
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;1251   	TickType_t xTimeToWake;
;;;1252   	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
000008  f04f0900          MOV      r9,#0
;;;1253   
;;;1254   		configASSERT( pxPreviousWakeTime );
00000c  b954              CBNZ     r4,|L23.36|
00000e  bf00              NOP      
000010  2050              MOVS     r0,#0x50
000012  f3808811          MSR      BASEPRI,r0
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  bf00              NOP      
000020  bf00              NOP      
                  |L23.34|
000022  e7fe              B        |L23.34|
                  |L23.36|
;;;1255   		configASSERT( ( xTimeIncrement > 0U ) );
000024  b10f              CBZ      r7,|L23.42|
000026  2001              MOVS     r0,#1
000028  e000              B        |L23.44|
                  |L23.42|
00002a  2000              MOVS     r0,#0
                  |L23.44|
00002c  b950              CBNZ     r0,|L23.68|
00002e  bf00              NOP      
000030  2050              MOVS     r0,#0x50
000032  f3808811          MSR      BASEPRI,r0
000036  f3bf8f4f          DSB      
00003a  f3bf8f6f          ISB      
00003e  bf00              NOP      
000040  bf00              NOP      
                  |L23.66|
000042  e7fe              B        |L23.66|
                  |L23.68|
;;;1256   		configASSERT( uxSchedulerSuspended == 0 );
000044  4820              LDR      r0,|L23.200|
000046  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000048  b908              CBNZ     r0,|L23.78|
00004a  2001              MOVS     r0,#1
00004c  e000              B        |L23.80|
                  |L23.78|
00004e  2000              MOVS     r0,#0
                  |L23.80|
000050  b950              CBNZ     r0,|L23.104|
000052  bf00              NOP      
000054  2050              MOVS     r0,#0x50
000056  f3808811          MSR      BASEPRI,r0
00005a  f3bf8f4f          DSB      
00005e  f3bf8f6f          ISB      
000062  bf00              NOP      
000064  bf00              NOP      
                  |L23.102|
000066  e7fe              B        |L23.102|
                  |L23.104|
;;;1257   
;;;1258   		vTaskSuspendAll();
000068  f7fffffe          BL       vTaskSuspendAll
;;;1259   		{
;;;1260   			/* Minor optimisation.  The tick count cannot change in this
;;;1261   			block. */
;;;1262   			const TickType_t xConstTickCount = xTickCount;
00006c  4817              LDR      r0,|L23.204|
00006e  6806              LDR      r6,[r0,#0]  ; xTickCount
;;;1263   
;;;1264   			/* Generate the tick time at which the task wants to wake. */
;;;1265   			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
000070  6820              LDR      r0,[r4,#0]
000072  19c5              ADDS     r5,r0,r7
;;;1266   
;;;1267   			if( xConstTickCount < *pxPreviousWakeTime )
000074  6820              LDR      r0,[r4,#0]
000076  42b0              CMP      r0,r6
000078  d907              BLS      |L23.138|
;;;1268   			{
;;;1269   				/* The tick count has overflowed since this function was
;;;1270   				lasted called.  In this case the only time we should ever
;;;1271   				actually delay is if the wake time has also	overflowed,
;;;1272   				and the wake time is greater than the tick time.  When this
;;;1273   				is the case it is as if neither time had overflowed. */
;;;1274   				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
00007a  6820              LDR      r0,[r4,#0]
00007c  42a8              CMP      r0,r5
00007e  d90b              BLS      |L23.152|
000080  42b5              CMP      r5,r6
000082  d909              BLS      |L23.152|
;;;1275   				{
;;;1276   					xShouldDelay = pdTRUE;
000084  f04f0901          MOV      r9,#1
000088  e006              B        |L23.152|
                  |L23.138|
;;;1277   				}
;;;1278   				else
;;;1279   				{
;;;1280   					mtCOVERAGE_TEST_MARKER();
;;;1281   				}
;;;1282   			}
;;;1283   			else
;;;1284   			{
;;;1285   				/* The tick time has not overflowed.  In this case we will
;;;1286   				delay if either the wake time has overflowed, and/or the
;;;1287   				tick time is less than the wake time. */
;;;1288   				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
00008a  6820              LDR      r0,[r4,#0]
00008c  42a8              CMP      r0,r5
00008e  d801              BHI      |L23.148|
000090  42b5              CMP      r5,r6
000092  d901              BLS      |L23.152|
                  |L23.148|
;;;1289   				{
;;;1290   					xShouldDelay = pdTRUE;
000094  f04f0901          MOV      r9,#1
                  |L23.152|
;;;1291   				}
;;;1292   				else
;;;1293   				{
;;;1294   					mtCOVERAGE_TEST_MARKER();
;;;1295   				}
;;;1296   			}
;;;1297   
;;;1298   			/* Update the wake time ready for the next call. */
;;;1299   			*pxPreviousWakeTime = xTimeToWake;
000098  6025              STR      r5,[r4,#0]
;;;1300   
;;;1301   			if( xShouldDelay != pdFALSE )
00009a  f1b90f00          CMP      r9,#0
00009e  d003              BEQ      |L23.168|
;;;1302   			{
;;;1303   				traceTASK_DELAY_UNTIL( xTimeToWake );
;;;1304   
;;;1305   				/* prvAddCurrentTaskToDelayedList() needs the block time, not
;;;1306   				the time to wake, so subtract the current tick count. */
;;;1307   				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
0000a0  1ba8              SUBS     r0,r5,r6
0000a2  2100              MOVS     r1,#0
0000a4  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L23.168|
;;;1308   			}
;;;1309   			else
;;;1310   			{
;;;1311   				mtCOVERAGE_TEST_MARKER();
;;;1312   			}
;;;1313   		}
;;;1314   		xAlreadyYielded = xTaskResumeAll();
0000a8  f7fffffe          BL       xTaskResumeAll
0000ac  4680              MOV      r8,r0
;;;1315   
;;;1316   		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;1317   		have put ourselves to sleep. */
;;;1318   		if( xAlreadyYielded == pdFALSE )
0000ae  f1b80f00          CMP      r8,#0
0000b2  d107              BNE      |L23.196|
;;;1319   		{
;;;1320   			portYIELD_WITHIN_API();
0000b4  f04f5080          MOV      r0,#0x10000000
0000b8  4905              LDR      r1,|L23.208|
0000ba  6008              STR      r0,[r1,#0]
0000bc  f3bf8f4f          DSB      
0000c0  f3bf8f6f          ISB      
                  |L23.196|
;;;1321   		}
;;;1322   		else
;;;1323   		{
;;;1324   			mtCOVERAGE_TEST_MARKER();
;;;1325   		}
;;;1326   	}
0000c4  e8bd87f0          POP      {r4-r10,pc}
;;;1327   
                          ENDP

                  |L23.200|
                          DCD      uxSchedulerSuspended
                  |L23.204|
                          DCD      xTickCount
                  |L23.208|
                          DCD      0xe000ed04

                          AREA ||i.vTaskDelete||, CODE, READONLY, ALIGN=2

                  vTaskDelete PROC
;;;1156   
;;;1157   	void vTaskDelete( TaskHandle_t xTaskToDelete )
000000  b570              PUSH     {r4-r6,lr}
;;;1158   	{
000002  4605              MOV      r5,r0
;;;1159   	TCB_t *pxTCB;
;;;1160   
;;;1161   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1162   		{
;;;1163   			/* If null is passed in here then it is the calling task that is
;;;1164   			being deleted. */
;;;1165   			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
000008  b915              CBNZ     r5,|L24.16|
00000a  4830              LDR      r0,|L24.204|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L24.18|
                  |L24.16|
000010  4628              MOV      r0,r5
                  |L24.18|
000012  4604              MOV      r4,r0
;;;1166   
;;;1167   			/* Remove task from the ready list. */
;;;1168   			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000014  1d20              ADDS     r0,r4,#4
000016  f7fffffe          BL       uxListRemove
00001a  b978              CBNZ     r0,|L24.60|
;;;1169   			{
;;;1170   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00001c  6ae0              LDR      r0,[r4,#0x2c]
00001e  eb000080          ADD      r0,r0,r0,LSL #2
000022  492b              LDR      r1,|L24.208|
000024  f8510020          LDR      r0,[r1,r0,LSL #2]
000028  b940              CBNZ     r0,|L24.60|
00002a  f894102c          LDRB     r1,[r4,#0x2c]
00002e  2001              MOVS     r0,#1
000030  4088              LSLS     r0,r0,r1
000032  4928              LDR      r1,|L24.212|
000034  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000036  4381              BICS     r1,r1,r0
000038  4826              LDR      r0,|L24.212|
00003a  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L24.60|
;;;1171   			}
;;;1172   			else
;;;1173   			{
;;;1174   				mtCOVERAGE_TEST_MARKER();
;;;1175   			}
;;;1176   
;;;1177   			/* Is the task waiting on an event also? */
;;;1178   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  b118              CBZ      r0,|L24.72|
;;;1179   			{
;;;1180   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000040  f1040018          ADD      r0,r4,#0x18
000044  f7fffffe          BL       uxListRemove
                  |L24.72|
;;;1181   			}
;;;1182   			else
;;;1183   			{
;;;1184   				mtCOVERAGE_TEST_MARKER();
;;;1185   			}
;;;1186   
;;;1187   			/* Increment the uxTaskNumber also so kernel aware debuggers can
;;;1188   			detect that the task lists need re-generating.  This is done before
;;;1189   			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
;;;1190   			not return. */
;;;1191   			uxTaskNumber++;
000048  4823              LDR      r0,|L24.216|
00004a  6800              LDR      r0,[r0,#0]  ; uxTaskNumber
00004c  1c40              ADDS     r0,r0,#1
00004e  4922              LDR      r1,|L24.216|
000050  6008              STR      r0,[r1,#0]  ; uxTaskNumber
;;;1192   
;;;1193   			if( pxTCB == pxCurrentTCB )
000052  481e              LDR      r0,|L24.204|
000054  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000056  4284              CMP      r4,r0
000058  d109              BNE      |L24.110|
;;;1194   			{
;;;1195   				/* A task is deleting itself.  This cannot complete within the
;;;1196   				task itself, as a context switch to another task is required.
;;;1197   				Place the task in the termination list.  The idle task will
;;;1198   				check the termination list and free up any memory allocated by
;;;1199   				the scheduler for the TCB and stack of the deleted task. */
;;;1200   				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
00005a  1d21              ADDS     r1,r4,#4
00005c  481f              LDR      r0,|L24.220|
00005e  f7fffffe          BL       vListInsertEnd
;;;1201   
;;;1202   				/* Increment the ucTasksDeleted variable so the idle task knows
;;;1203   				there is a task that has been deleted and that it should therefore
;;;1204   				check the xTasksWaitingTermination list. */
;;;1205   				++uxDeletedTasksWaitingCleanUp;
000062  481f              LDR      r0,|L24.224|
000064  6800              LDR      r0,[r0,#0]  ; uxDeletedTasksWaitingCleanUp
000066  1c40              ADDS     r0,r0,#1
000068  491d              LDR      r1,|L24.224|
00006a  6008              STR      r0,[r1,#0]  ; uxDeletedTasksWaitingCleanUp
00006c  e009              B        |L24.130|
                  |L24.110|
;;;1206   
;;;1207   				/* The pre-delete hook is primarily for the Windows simulator,
;;;1208   				in which Windows specific clean up operations are performed,
;;;1209   				after which it is not possible to yield away from this task -
;;;1210   				hence xYieldPending is used to latch that a context switch is
;;;1211   				required. */
;;;1212   				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
;;;1213   			}
;;;1214   			else
;;;1215   			{
;;;1216   				--uxCurrentNumberOfTasks;
00006e  481d              LDR      r0,|L24.228|
000070  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000072  1e40              SUBS     r0,r0,#1
000074  491b              LDR      r1,|L24.228|
000076  6008              STR      r0,[r1,#0]  ; uxCurrentNumberOfTasks
;;;1217   				prvDeleteTCB( pxTCB );
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       prvDeleteTCB
;;;1218   
;;;1219   				/* Reset the next expected unblock time in case it referred to
;;;1220   				the task that has just been deleted. */
;;;1221   				prvResetNextTaskUnblockTime();
00007e  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L24.130|
;;;1222   			}
;;;1223   
;;;1224   			traceTASK_DELETE( pxTCB );
;;;1225   		}
;;;1226   		taskEXIT_CRITICAL();
000082  f7fffffe          BL       vPortExitCritical
;;;1227   
;;;1228   		/* Force a reschedule if it is the currently running task that has just
;;;1229   		been deleted. */
;;;1230   		if( xSchedulerRunning != pdFALSE )
000086  4818              LDR      r0,|L24.232|
000088  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
00008a  b1e8              CBZ      r0,|L24.200|
;;;1231   		{
;;;1232   			if( pxTCB == pxCurrentTCB )
00008c  480f              LDR      r0,|L24.204|
00008e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000090  4284              CMP      r4,r0
000092  d119              BNE      |L24.200|
;;;1233   			{
;;;1234   				configASSERT( uxSchedulerSuspended == 0 );
000094  4815              LDR      r0,|L24.236|
000096  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000098  b908              CBNZ     r0,|L24.158|
00009a  2001              MOVS     r0,#1
00009c  e000              B        |L24.160|
                  |L24.158|
00009e  2000              MOVS     r0,#0
                  |L24.160|
0000a0  b950              CBNZ     r0,|L24.184|
0000a2  bf00              NOP      
0000a4  2050              MOVS     r0,#0x50
0000a6  f3808811          MSR      BASEPRI,r0
0000aa  f3bf8f4f          DSB      
0000ae  f3bf8f6f          ISB      
0000b2  bf00              NOP      
0000b4  bf00              NOP      
                  |L24.182|
0000b6  e7fe              B        |L24.182|
                  |L24.184|
;;;1235   				portYIELD_WITHIN_API();
0000b8  f04f5080          MOV      r0,#0x10000000
0000bc  490c              LDR      r1,|L24.240|
0000be  6008              STR      r0,[r1,#0]
0000c0  f3bf8f4f          DSB      
0000c4  f3bf8f6f          ISB      
                  |L24.200|
;;;1236   			}
;;;1237   			else
;;;1238   			{
;;;1239   				mtCOVERAGE_TEST_MARKER();
;;;1240   			}
;;;1241   		}
;;;1242   	}
0000c8  bd70              POP      {r4-r6,pc}
;;;1243   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L24.204|
                          DCD      pxCurrentTCB
                  |L24.208|
                          DCD      pxReadyTasksLists
                  |L24.212|
                          DCD      uxTopReadyPriority
                  |L24.216|
                          DCD      uxTaskNumber
                  |L24.220|
                          DCD      xTasksWaitingTermination
                  |L24.224|
                          DCD      uxDeletedTasksWaitingCleanUp
                  |L24.228|
                          DCD      uxCurrentNumberOfTasks
                  |L24.232|
                          DCD      xSchedulerRunning
                  |L24.236|
                          DCD      uxSchedulerSuspended
                  |L24.240|
                          DCD      0xe000ed04

                          AREA ||i.vTaskEndScheduler||, CODE, READONLY, ALIGN=2

                  vTaskEndScheduler PROC
;;;2088   
;;;2089   void vTaskEndScheduler( void )
000000  b510              PUSH     {r4,lr}
;;;2090   {
;;;2091   	/* Stop the scheduler interrupts and call the portable scheduler end
;;;2092   	routine so the original ISRs can be restored if necessary.  The port
;;;2093   	layer must ensure interrupts enable	bit is left in the correct state. */
;;;2094   	portDISABLE_INTERRUPTS();
000002  bf00              NOP      
000004  2050              MOVS     r0,#0x50
000006  f3808811          MSR      BASEPRI,r0
00000a  f3bf8f4f          DSB      
00000e  f3bf8f6f          ISB      
000012  bf00              NOP      
;;;2095   	xSchedulerRunning = pdFALSE;
000014  2000              MOVS     r0,#0
000016  4902              LDR      r1,|L25.32|
000018  6008              STR      r0,[r1,#0]  ; xSchedulerRunning
;;;2096   	vPortEndScheduler();
00001a  f7fffffe          BL       vPortEndScheduler
;;;2097   }
00001e  bd10              POP      {r4,pc}
;;;2098   /*----------------------------------------------------------*/
                          ENDP

                  |L25.32|
                          DCD      xSchedulerRunning

                          AREA ||i.vTaskGetInfo||, CODE, READONLY, ALIGN=2

                  vTaskGetInfo PROC
;;;3608   
;;;3609   	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3610   	{
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4690              MOV      r8,r2
00000a  461e              MOV      r6,r3
;;;3611   	TCB_t *pxTCB;
;;;3612   
;;;3613   		/* xTask is NULL then get the state of the calling task. */
;;;3614   		pxTCB = prvGetTCBFromHandle( xTask );
00000c  b917              CBNZ     r7,|L26.20|
00000e  481c              LDR      r0,|L26.128|
000010  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000012  e000              B        |L26.22|
                  |L26.20|
000014  4638              MOV      r0,r7
                  |L26.22|
000016  4605              MOV      r5,r0
;;;3615   
;;;3616   		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
000018  6025              STR      r5,[r4,#0]
;;;3617   		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
00001a  f1050034          ADD      r0,r5,#0x34
00001e  6060              STR      r0,[r4,#4]
;;;3618   		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
000020  6ae8              LDR      r0,[r5,#0x2c]
000022  6120              STR      r0,[r4,#0x10]
;;;3619   		pxTaskStatus->pxStackBase = pxTCB->pxStack;
000024  6b28              LDR      r0,[r5,#0x30]
000026  61e0              STR      r0,[r4,#0x1c]
;;;3620   		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
000028  6ca8              LDR      r0,[r5,#0x48]
00002a  60a0              STR      r0,[r4,#8]
;;;3621   
;;;3622   		#if ( configUSE_MUTEXES == 1 )
;;;3623   		{
;;;3624   			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
00002c  6d28              LDR      r0,[r5,#0x50]
00002e  6160              STR      r0,[r4,#0x14]
;;;3625   		}
;;;3626   		#else
;;;3627   		{
;;;3628   			pxTaskStatus->uxBasePriority = 0;
;;;3629   		}
;;;3630   		#endif
;;;3631   
;;;3632   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;3633   		{
;;;3634   			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
;;;3635   		}
;;;3636   		#else
;;;3637   		{
;;;3638   			pxTaskStatus->ulRunTimeCounter = 0;
000030  2000              MOVS     r0,#0
000032  61a0              STR      r0,[r4,#0x18]
;;;3639   		}
;;;3640   		#endif
;;;3641   
;;;3642   		/* Obtaining the task state is a little fiddly, so is only done if the
;;;3643   		value of eState passed into this function is eInvalid - otherwise the
;;;3644   		state is just set to whatever is passed in. */
;;;3645   		if( eState != eInvalid )
000034  2e05              CMP      r6,#5
000036  d012              BEQ      |L26.94|
;;;3646   		{
;;;3647   			if( pxTCB == pxCurrentTCB )
000038  4811              LDR      r0,|L26.128|
00003a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00003c  4285              CMP      r5,r0
00003e  d102              BNE      |L26.70|
;;;3648   			{
;;;3649   				pxTaskStatus->eCurrentState = eRunning;
000040  2000              MOVS     r0,#0
000042  7320              STRB     r0,[r4,#0xc]
000044  e00f              B        |L26.102|
                  |L26.70|
;;;3650   			}
;;;3651   			else
;;;3652   			{
;;;3653   				pxTaskStatus->eCurrentState = eState;
000046  7326              STRB     r6,[r4,#0xc]
;;;3654   
;;;3655   				#if ( INCLUDE_vTaskSuspend == 1 )
;;;3656   				{
;;;3657   					/* If the task is in the suspended list then there is a
;;;3658   					chance it is actually just blocked indefinitely - so really
;;;3659   					it should be reported as being in the Blocked state. */
;;;3660   					if( eState == eSuspended )
000048  2e03              CMP      r6,#3
00004a  d10c              BNE      |L26.102|
;;;3661   					{
;;;3662   						vTaskSuspendAll();
00004c  f7fffffe          BL       vTaskSuspendAll
;;;3663   						{
;;;3664   							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
000050  6aa8              LDR      r0,[r5,#0x28]
000052  b108              CBZ      r0,|L26.88|
;;;3665   							{
;;;3666   								pxTaskStatus->eCurrentState = eBlocked;
000054  2002              MOVS     r0,#2
000056  7320              STRB     r0,[r4,#0xc]
                  |L26.88|
;;;3667   							}
;;;3668   						}
;;;3669   						( void ) xTaskResumeAll();
000058  f7fffffe          BL       xTaskResumeAll
00005c  e003              B        |L26.102|
                  |L26.94|
;;;3670   					}
;;;3671   				}
;;;3672   				#endif /* INCLUDE_vTaskSuspend */
;;;3673   			}
;;;3674   		}
;;;3675   		else
;;;3676   		{
;;;3677   			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       eTaskGetState
000064  7320              STRB     r0,[r4,#0xc]
                  |L26.102|
;;;3678   		}
;;;3679   
;;;3680   		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
;;;3681   		parameter is provided to allow it to be skipped. */
;;;3682   		if( xGetFreeStackSpace != pdFALSE )
000066  f1b80f00          CMP      r8,#0
00006a  d004              BEQ      |L26.118|
;;;3683   		{
;;;3684   			#if ( portSTACK_GROWTH > 0 )
;;;3685   			{
;;;3686   				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
;;;3687   			}
;;;3688   			#else
;;;3689   			{
;;;3690   				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
00006c  6b28              LDR      r0,[r5,#0x30]
00006e  f7fffffe          BL       prvTaskCheckFreeStackSpace
000072  8420              STRH     r0,[r4,#0x20]
000074  e001              B        |L26.122|
                  |L26.118|
;;;3691   			}
;;;3692   			#endif
;;;3693   		}
;;;3694   		else
;;;3695   		{
;;;3696   			pxTaskStatus->usStackHighWaterMark = 0;
000076  2000              MOVS     r0,#0
000078  8420              STRH     r0,[r4,#0x20]
                  |L26.122|
;;;3697   		}
;;;3698   	}
00007a  e8bd81f0          POP      {r4-r8,pc}
;;;3699   
                          ENDP

00007e  0000              DCW      0x0000
                  |L26.128|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskInternalSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskInternalSetTimeOutState PROC
;;;3207   
;;;3208   void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  4903              LDR      r1,|L27.16|
;;;3209   {
;;;3210   	/* For internal use only as it does not use a critical section. */
;;;3211   	pxTimeOut->xOverflowCount = xNumOfOverflows;
000002  6809              LDR      r1,[r1,#0]  ; xNumOfOverflows
000004  6001              STR      r1,[r0,#0]
;;;3212   	pxTimeOut->xTimeOnEntering = xTickCount;
000006  4903              LDR      r1,|L27.20|
000008  6809              LDR      r1,[r1,#0]  ; xTickCount
00000a  6041              STR      r1,[r0,#4]
;;;3213   }
00000c  4770              BX       lr
;;;3214   /*-----------------------------------------------------------*/
                          ENDP

00000e  0000              DCW      0x0000
                  |L27.16|
                          DCD      xNumOfOverflows
                  |L27.20|
                          DCD      xTickCount

                          AREA ||i.vTaskMissedYield||, CODE, READONLY, ALIGN=2

                  vTaskMissedYield PROC
;;;3278   
;;;3279   void vTaskMissedYield( void )
000000  2001              MOVS     r0,#1
;;;3280   {
;;;3281   	xYieldPending = pdTRUE;
000002  4901              LDR      r1,|L28.8|
000004  6008              STR      r0,[r1,#0]  ; xYieldPending
;;;3282   }
000006  4770              BX       lr
;;;3283   /*-----------------------------------------------------------*/
                          ENDP

                  |L28.8|
                          DCD      xYieldPending

                          AREA ||i.vTaskNotifyGiveFromISR||, CODE, READONLY, ALIGN=2

                  vTaskNotifyGiveFromISR PROC
;;;4956   
;;;4957   	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4958   	{
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;4959   	TCB_t * pxTCB;
;;;4960   	uint8_t ucOriginalNotifyState;
;;;4961   	UBaseType_t uxSavedInterruptStatus;
;;;4962   
;;;4963   		configASSERT( xTaskToNotify );
000008  b955              CBNZ     r5,|L29.32|
00000a  bf00              NOP      
00000c  2050              MOVS     r0,#0x50
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L29.30|
00001e  e7fe              B        |L29.30|
                  |L29.32|
;;;4964   
;;;4965   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4966   		maximum	system call (or maximum API call) interrupt priority.
;;;4967   		Interrupts that are	above the maximum system call priority are keep
;;;4968   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4969   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4970   		is defined in FreeRTOSConfig.h then
;;;4971   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4972   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4973   		been assigned a priority above the configured maximum system call
;;;4974   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4975   		from interrupts	that have been assigned a priority at or (logically)
;;;4976   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4977   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4978   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4979   		provided on the following link:
;;;4980   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4981   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000020  f7fffffe          BL       vPortValidateInterruptPriority
;;;4982   
;;;4983   		pxTCB = xTaskToNotify;
000024  462c              MOV      r4,r5
;;;4984   
;;;4985   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000026  bf00              NOP      
000028  2150              MOVS     r1,#0x50
00002a  f3ef8011          MRS      r0,BASEPRI
00002e  f3818811          MSR      BASEPRI,r1
000032  f3bf8f4f          DSB      
000036  f3bf8f6f          ISB      
00003a  bf00              NOP      
00003c  4606              MOV      r6,r0
;;;4986   		{
;;;4987   			ucOriginalNotifyState = pxTCB->ucNotifyState;
00003e  f894805c          LDRB     r8,[r4,#0x5c]
;;;4988   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
000042  2002              MOVS     r0,#2
000044  f884005c          STRB     r0,[r4,#0x5c]
;;;4989   
;;;4990   			/* 'Giving' is equivalent to incrementing a count in a counting
;;;4991   			semaphore. */
;;;4992   			( pxTCB->ulNotifiedValue )++;
000048  6da0              LDR      r0,[r4,#0x58]
00004a  1c40              ADDS     r0,r0,#1
00004c  65a0              STR      r0,[r4,#0x58]
;;;4993   
;;;4994   			traceTASK_NOTIFY_GIVE_FROM_ISR();
;;;4995   
;;;4996   			/* If the task is in the blocked state specifically to wait for a
;;;4997   			notification then unblock it now. */
;;;4998   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
00004e  f1b80f01          CMP      r8,#1
000052  d13a              BNE      |L29.202|
;;;4999   			{
;;;5000   				/* The task should not have been on an event list. */
;;;5001   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
000054  6aa0              LDR      r0,[r4,#0x28]
000056  b908              CBNZ     r0,|L29.92|
000058  2001              MOVS     r0,#1
00005a  e000              B        |L29.94|
                  |L29.92|
00005c  2000              MOVS     r0,#0
                  |L29.94|
00005e  b950              CBNZ     r0,|L29.118|
000060  bf00              NOP      
000062  2050              MOVS     r0,#0x50
000064  f3808811          MSR      BASEPRI,r0
000068  f3bf8f4f          DSB      
00006c  f3bf8f6f          ISB      
000070  bf00              NOP      
000072  bf00              NOP      
                  |L29.116|
000074  e7fe              B        |L29.116|
                  |L29.118|
;;;5002   
;;;5003   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000076  4818              LDR      r0,|L29.216|
000078  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00007a  b9a8              CBNZ     r0,|L29.168|
;;;5004   				{
;;;5005   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
00007c  1d20              ADDS     r0,r4,#4
00007e  f7fffffe          BL       uxListRemove
;;;5006   					prvAddTaskToReadyList( pxTCB );
000082  f894102c          LDRB     r1,[r4,#0x2c]
000086  2001              MOVS     r0,#1
000088  4088              LSLS     r0,r0,r1
00008a  4914              LDR      r1,|L29.220|
00008c  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00008e  4308              ORRS     r0,r0,r1
000090  4912              LDR      r1,|L29.220|
000092  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000094  6ae1              LDR      r1,[r4,#0x2c]
000096  eb010181          ADD      r1,r1,r1,LSL #2
00009a  4a11              LDR      r2,|L29.224|
00009c  eb020081          ADD      r0,r2,r1,LSL #2
0000a0  1d21              ADDS     r1,r4,#4
0000a2  f7fffffe          BL       vListInsertEnd
0000a6  e004              B        |L29.178|
                  |L29.168|
;;;5007   				}
;;;5008   				else
;;;5009   				{
;;;5010   					/* The delayed and ready lists cannot be accessed, so hold
;;;5011   					this task pending until the scheduler is resumed. */
;;;5012   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
0000a8  f1040118          ADD      r1,r4,#0x18
0000ac  480d              LDR      r0,|L29.228|
0000ae  f7fffffe          BL       vListInsertEnd
                  |L29.178|
;;;5013   				}
;;;5014   
;;;5015   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
0000b2  490d              LDR      r1,|L29.232|
0000b4  6ae0              LDR      r0,[r4,#0x2c]
0000b6  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000b8  6ac9              LDR      r1,[r1,#0x2c]
0000ba  4288              CMP      r0,r1
0000bc  d905              BLS      |L29.202|
;;;5016   				{
;;;5017   					/* The notified task has a priority above the currently
;;;5018   					executing task so a yield is required. */
;;;5019   					if( pxHigherPriorityTaskWoken != NULL )
0000be  b10f              CBZ      r7,|L29.196|
;;;5020   					{
;;;5021   						*pxHigherPriorityTaskWoken = pdTRUE;
0000c0  2001              MOVS     r0,#1
0000c2  6038              STR      r0,[r7,#0]
                  |L29.196|
;;;5022   					}
;;;5023   
;;;5024   					/* Mark that a yield is pending in case the user is not
;;;5025   					using the "xHigherPriorityTaskWoken" parameter in an ISR
;;;5026   					safe FreeRTOS function. */
;;;5027   					xYieldPending = pdTRUE;
0000c4  2001              MOVS     r0,#1
0000c6  4909              LDR      r1,|L29.236|
0000c8  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L29.202|
;;;5028   				}
;;;5029   				else
;;;5030   				{
;;;5031   					mtCOVERAGE_TEST_MARKER();
;;;5032   				}
;;;5033   			}
;;;5034   		}
;;;5035   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
0000ca  bf00              NOP      
0000cc  f3868811          MSR      BASEPRI,r6
0000d0  bf00              NOP      
;;;5036   	}
0000d2  e8bd81f0          POP      {r4-r8,pc}
;;;5037   
                          ENDP

0000d6  0000              DCW      0x0000
                  |L29.216|
                          DCD      uxSchedulerSuspended
                  |L29.220|
                          DCD      uxTopReadyPriority
                  |L29.224|
                          DCD      pxReadyTasksLists
                  |L29.228|
                          DCD      xPendingReadyList
                  |L29.232|
                          DCD      pxCurrentTCB
                  |L29.236|
                          DCD      xYieldPending

                          AREA ||i.vTaskPlaceOnEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventList PROC
;;;3019   
;;;3020   void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;3021   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;3022   	configASSERT( pxEventList );
000006  b954              CBNZ     r4,|L30.30|
000008  bf00              NOP      
00000a  2050              MOVS     r0,#0x50
00000c  f3808811          MSR      BASEPRI,r0
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L30.28|
00001c  e7fe              B        |L30.28|
                  |L30.30|
;;;3023   
;;;3024   	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
;;;3025   	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
;;;3026   
;;;3027   	/* Place the event list item of the TCB in the appropriate event list.
;;;3028   	This is placed in the list in priority order so the highest priority task
;;;3029   	is the first to be woken by the event.  The queue that contains the event
;;;3030   	list is locked, preventing simultaneous access from interrupts. */
;;;3031   	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
00001e  4805              LDR      r0,|L30.52|
000020  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000022  3118              ADDS     r1,r1,#0x18
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       vListInsert
;;;3032   
;;;3033   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00002a  2101              MOVS     r1,#1
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;3034   }
000032  bd70              POP      {r4-r6,pc}
;;;3035   /*-----------------------------------------------------------*/
                          ENDP

                  |L30.52|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskPlaceOnEventListRestricted||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventListRestricted PROC
;;;3062   
;;;3063   	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
000000  b570              PUSH     {r4-r6,lr}
;;;3064   	{
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;3065   		configASSERT( pxEventList );
000008  b955              CBNZ     r5,|L31.32|
00000a  bf00              NOP      
00000c  2050              MOVS     r0,#0x50
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L31.30|
00001e  e7fe              B        |L31.30|
                  |L31.32|
;;;3066   
;;;3067   		/* This function should not be called by application code hence the
;;;3068   		'Restricted' in its name.  It is not part of the public API.  It is
;;;3069   		designed for use by kernel code, and has special calling requirements -
;;;3070   		it should be called with the scheduler suspended. */
;;;3071   
;;;3072   
;;;3073   		/* Place the event list item of the TCB in the appropriate event list.
;;;3074   		In this case it is assume that this is the only task that is going to
;;;3075   		be waiting on this event list, so the faster vListInsertEnd() function
;;;3076   		can be used in place of vListInsert. */
;;;3077   		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000020  4806              LDR      r0,|L31.60|
000022  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000024  3118              ADDS     r1,r1,#0x18
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       vListInsertEnd
;;;3078   
;;;3079   		/* If the task should block indefinitely then set the block time to a
;;;3080   		value that will be recognised as an indefinite delay inside the
;;;3081   		prvAddCurrentTaskToDelayedList() function. */
;;;3082   		if( xWaitIndefinitely != pdFALSE )
00002c  b10c              CBZ      r4,|L31.50|
;;;3083   		{
;;;3084   			xTicksToWait = portMAX_DELAY;
00002e  f04f36ff          MOV      r6,#0xffffffff
                  |L31.50|
;;;3085   		}
;;;3086   
;;;3087   		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
;;;3088   		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
000032  4621              MOV      r1,r4
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;3089   	}
00003a  bd70              POP      {r4-r6,pc}
;;;3090   
                          ENDP

                  |L31.60|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskPlaceOnUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnUnorderedEventList PROC
;;;3036   
;;;3037   void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;3038   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;3039   	configASSERT( pxEventList );
000008  b954              CBNZ     r4,|L32.32|
00000a  bf00              NOP      
00000c  2050              MOVS     r0,#0x50
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L32.30|
00001e  e7fe              B        |L32.30|
                  |L32.32|
;;;3040   
;;;3041   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;3042   	the event groups implementation. */
;;;3043   	configASSERT( uxSchedulerSuspended != 0 );
000020  4810              LDR      r0,|L32.100|
000022  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000024  b108              CBZ      r0,|L32.42|
000026  2001              MOVS     r0,#1
000028  e000              B        |L32.44|
                  |L32.42|
00002a  2000              MOVS     r0,#0
                  |L32.44|
00002c  b950              CBNZ     r0,|L32.68|
00002e  bf00              NOP      
000030  2050              MOVS     r0,#0x50
000032  f3808811          MSR      BASEPRI,r0
000036  f3bf8f4f          DSB      
00003a  f3bf8f6f          ISB      
00003e  bf00              NOP      
000040  bf00              NOP      
                  |L32.66|
000042  e7fe              B        |L32.66|
                  |L32.68|
;;;3044   
;;;3045   	/* Store the item value in the event list item.  It is safe to access the
;;;3046   	event list item here as interrupts won't access the event list item of a
;;;3047   	task that is not in the Blocked state. */
;;;3048   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
000044  f0454000          ORR      r0,r5,#0x80000000
000048  4907              LDR      r1,|L32.104|
00004a  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00004c  6188              STR      r0,[r1,#0x18]
;;;3049   
;;;3050   	/* Place the event list item of the TCB at the end of the appropriate event
;;;3051   	list.  It is safe to access the event list here because it is part of an
;;;3052   	event group implementation - and interrupts don't access event groups
;;;3053   	directly (instead they access them indirectly by pending function calls to
;;;3054   	the task level). */
;;;3055   	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
00004e  4806              LDR      r0,|L32.104|
000050  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000052  3118              ADDS     r1,r1,#0x18
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       vListInsertEnd
;;;3056   
;;;3057   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
00005a  2101              MOVS     r1,#1
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;3058   }
000062  bd70              POP      {r4-r6,pc}
;;;3059   /*-----------------------------------------------------------*/
                          ENDP

                  |L32.100|
                          DCD      uxSchedulerSuspended
                  |L32.104|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskPriorityDisinheritAfterTimeout||, CODE, READONLY, ALIGN=2

                  vTaskPriorityDisinheritAfterTimeout PROC
;;;4117   
;;;4118   	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4119   	{
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;4120   	TCB_t * const pxTCB = pxMutexHolder;
000008  4634              MOV      r4,r6
;;;4121   	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
;;;4122   	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
00000a  f04f0901          MOV      r9,#1
;;;4123   
;;;4124   		if( pxMutexHolder != NULL )
00000e  2e00              CMP      r6,#0
000010  d067              BEQ      |L33.226|
;;;4125   		{
;;;4126   			/* If pxMutexHolder is not NULL then the holder must hold at least
;;;4127   			one mutex. */
;;;4128   			configASSERT( pxTCB->uxMutexesHeld );
000012  6d60              LDR      r0,[r4,#0x54]
000014  b950              CBNZ     r0,|L33.44|
000016  bf00              NOP      
000018  2050              MOVS     r0,#0x50
00001a  f3808811          MSR      BASEPRI,r0
00001e  f3bf8f4f          DSB      
000022  f3bf8f6f          ISB      
000026  bf00              NOP      
000028  bf00              NOP      
                  |L33.42|
00002a  e7fe              B        |L33.42|
                  |L33.44|
;;;4129   
;;;4130   			/* Determine the priority to which the priority of the task that
;;;4131   			holds the mutex should be set.  This will be the greater of the
;;;4132   			holding task's base priority and the priority of the highest
;;;4133   			priority task that is waiting to obtain the mutex. */
;;;4134   			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
00002c  6d20              LDR      r0,[r4,#0x50]
00002e  42b8              CMP      r0,r7
000030  d201              BCS      |L33.54|
;;;4135   			{
;;;4136   				uxPriorityToUse = uxHighestPriorityWaitingTask;
000032  463d              MOV      r5,r7
000034  e000              B        |L33.56|
                  |L33.54|
;;;4137   			}
;;;4138   			else
;;;4139   			{
;;;4140   				uxPriorityToUse = pxTCB->uxBasePriority;
000036  6d25              LDR      r5,[r4,#0x50]
                  |L33.56|
;;;4141   			}
;;;4142   
;;;4143   			/* Does the priority need to change? */
;;;4144   			if( pxTCB->uxPriority != uxPriorityToUse )
000038  6ae0              LDR      r0,[r4,#0x2c]
00003a  42a8              CMP      r0,r5
00003c  d051              BEQ      |L33.226|
;;;4145   			{
;;;4146   				/* Only disinherit if no other mutexes are held.  This is a
;;;4147   				simplification in the priority inheritance implementation.  If
;;;4148   				the task that holds the mutex is also holding other mutexes then
;;;4149   				the other mutexes may have caused the priority inheritance. */
;;;4150   				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
00003e  6d60              LDR      r0,[r4,#0x54]
000040  2801              CMP      r0,#1
000042  d14e              BNE      |L33.226|
;;;4151   				{
;;;4152   					/* If a task has timed out because it already holds the
;;;4153   					mutex it was trying to obtain then it cannot of inherited
;;;4154   					its own priority. */
;;;4155   					configASSERT( pxTCB != pxCurrentTCB );
000044  4828              LDR      r0,|L33.232|
000046  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000048  4284              CMP      r4,r0
00004a  d001              BEQ      |L33.80|
00004c  2001              MOVS     r0,#1
00004e  e000              B        |L33.82|
                  |L33.80|
000050  2000              MOVS     r0,#0
                  |L33.82|
000052  b950              CBNZ     r0,|L33.106|
000054  bf00              NOP      
000056  2050              MOVS     r0,#0x50
000058  f3808811          MSR      BASEPRI,r0
00005c  f3bf8f4f          DSB      
000060  f3bf8f6f          ISB      
000064  bf00              NOP      
000066  bf00              NOP      
                  |L33.104|
000068  e7fe              B        |L33.104|
                  |L33.106|
;;;4156   
;;;4157   					/* Disinherit the priority, remembering the previous
;;;4158   					priority to facilitate determining the subject task's
;;;4159   					state. */
;;;4160   					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
;;;4161   					uxPriorityUsedOnEntry = pxTCB->uxPriority;
00006a  f8d4802c          LDR      r8,[r4,#0x2c]
;;;4162   					pxTCB->uxPriority = uxPriorityToUse;
00006e  62e5              STR      r5,[r4,#0x2c]
;;;4163   
;;;4164   					/* Only reset the event list item value if the value is not
;;;4165   					being used for anything else. */
;;;4166   					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000070  69a0              LDR      r0,[r4,#0x18]
000072  f0004000          AND      r0,r0,#0x80000000
000076  b910              CBNZ     r0,|L33.126|
;;;4167   					{
;;;4168   						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000078  f1c50005          RSB      r0,r5,#5
00007c  61a0              STR      r0,[r4,#0x18]
                  |L33.126|
;;;4169   					}
;;;4170   					else
;;;4171   					{
;;;4172   						mtCOVERAGE_TEST_MARKER();
;;;4173   					}
;;;4174   
;;;4175   					/* If the running task is not the task that holds the mutex
;;;4176   					then the task that holds the mutex could be in either the
;;;4177   					Ready, Blocked or Suspended states.  Only remove the task
;;;4178   					from its current state list if it is in the Ready state as
;;;4179   					the task's priority is going to change and there is one
;;;4180   					Ready list per priority. */
;;;4181   					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
00007e  eb080188          ADD      r1,r8,r8,LSL #2
000082  4a1a              LDR      r2,|L33.236|
000084  eb020181          ADD      r1,r2,r1,LSL #2
000088  6960              LDR      r0,[r4,#0x14]
00008a  4288              CMP      r0,r1
00008c  d101              BNE      |L33.146|
00008e  2001              MOVS     r0,#1
000090  e000              B        |L33.148|
                  |L33.146|
000092  2000              MOVS     r0,#0
                  |L33.148|
000094  b328              CBZ      r0,|L33.226|
;;;4182   					{
;;;4183   						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000096  1d20              ADDS     r0,r4,#4
000098  f7fffffe          BL       uxListRemove
00009c  b978              CBNZ     r0,|L33.190|
;;;4184   						{
;;;4185   							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00009e  6ae0              LDR      r0,[r4,#0x2c]
0000a0  eb000080          ADD      r0,r0,r0,LSL #2
0000a4  4911              LDR      r1,|L33.236|
0000a6  f8510020          LDR      r0,[r1,r0,LSL #2]
0000aa  b940              CBNZ     r0,|L33.190|
0000ac  f894102c          LDRB     r1,[r4,#0x2c]
0000b0  2001              MOVS     r0,#1
0000b2  4088              LSLS     r0,r0,r1
0000b4  490e              LDR      r1,|L33.240|
0000b6  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000b8  4381              BICS     r1,r1,r0
0000ba  480d              LDR      r0,|L33.240|
0000bc  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L33.190|
;;;4186   						}
;;;4187   						else
;;;4188   						{
;;;4189   							mtCOVERAGE_TEST_MARKER();
;;;4190   						}
;;;4191   
;;;4192   						prvAddTaskToReadyList( pxTCB );
0000be  f894102c          LDRB     r1,[r4,#0x2c]
0000c2  2001              MOVS     r0,#1
0000c4  4088              LSLS     r0,r0,r1
0000c6  490a              LDR      r1,|L33.240|
0000c8  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000ca  4308              ORRS     r0,r0,r1
0000cc  4908              LDR      r1,|L33.240|
0000ce  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000d0  6ae1              LDR      r1,[r4,#0x2c]
0000d2  eb010181          ADD      r1,r1,r1,LSL #2
0000d6  4a05              LDR      r2,|L33.236|
0000d8  eb020081          ADD      r0,r2,r1,LSL #2
0000dc  1d21              ADDS     r1,r4,#4
0000de  f7fffffe          BL       vListInsertEnd
                  |L33.226|
;;;4193   					}
;;;4194   					else
;;;4195   					{
;;;4196   						mtCOVERAGE_TEST_MARKER();
;;;4197   					}
;;;4198   				}
;;;4199   				else
;;;4200   				{
;;;4201   					mtCOVERAGE_TEST_MARKER();
;;;4202   				}
;;;4203   			}
;;;4204   			else
;;;4205   			{
;;;4206   				mtCOVERAGE_TEST_MARKER();
;;;4207   			}
;;;4208   		}
;;;4209   		else
;;;4210   		{
;;;4211   			mtCOVERAGE_TEST_MARKER();
;;;4212   		}
;;;4213   	}
0000e2  e8bd87f0          POP      {r4-r10,pc}
;;;4214   
                          ENDP

0000e6  0000              DCW      0x0000
                  |L33.232|
                          DCD      pxCurrentTCB
                  |L33.236|
                          DCD      pxReadyTasksLists
                  |L33.240|
                          DCD      uxTopReadyPriority

                          AREA ||i.vTaskPrioritySet||, CODE, READONLY, ALIGN=2

                  vTaskPrioritySet PROC
;;;1531   
;;;1532   	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1533   	{
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;1534   	TCB_t *pxTCB;
;;;1535   	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
;;;1536   	BaseType_t xYieldRequired = pdFALSE;
000008  f04f0900          MOV      r9,#0
;;;1537   
;;;1538   		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
00000c  2d05              CMP      r5,#5
00000e  d201              BCS      |L34.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L34.22|
                  |L34.20|
000014  2000              MOVS     r0,#0
                  |L34.22|
000016  b950              CBNZ     r0,|L34.46|
000018  bf00              NOP      
00001a  2050              MOVS     r0,#0x50
00001c  f3808811          MSR      BASEPRI,r0
000020  f3bf8f4f          DSB      
000024  f3bf8f6f          ISB      
000028  bf00              NOP      
00002a  bf00              NOP      
                  |L34.44|
00002c  e7fe              B        |L34.44|
                  |L34.46|
;;;1539   
;;;1540   		/* Ensure the new priority is valid. */
;;;1541   		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
00002e  2d05              CMP      r5,#5
000030  d300              BCC      |L34.52|
;;;1542   		{
;;;1543   			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
000032  2504              MOVS     r5,#4
                  |L34.52|
;;;1544   		}
;;;1545   		else
;;;1546   		{
;;;1547   			mtCOVERAGE_TEST_MARKER();
;;;1548   		}
;;;1549   
;;;1550   		taskENTER_CRITICAL();
000034  f7fffffe          BL       vPortEnterCritical
;;;1551   		{
;;;1552   			/* If null is passed in here then it is the priority of the calling
;;;1553   			task that is being changed. */
;;;1554   			pxTCB = prvGetTCBFromHandle( xTask );
000038  f1b80f00          CMP      r8,#0
00003c  d102              BNE      |L34.68|
00003e  4831              LDR      r0,|L34.260|
000040  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000042  e000              B        |L34.70|
                  |L34.68|
000044  4640              MOV      r0,r8
                  |L34.70|
000046  4604              MOV      r4,r0
;;;1555   
;;;1556   			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
;;;1557   
;;;1558   			#if ( configUSE_MUTEXES == 1 )
;;;1559   			{
;;;1560   				uxCurrentBasePriority = pxTCB->uxBasePriority;
000048  6d26              LDR      r6,[r4,#0x50]
;;;1561   			}
;;;1562   			#else
;;;1563   			{
;;;1564   				uxCurrentBasePriority = pxTCB->uxPriority;
;;;1565   			}
;;;1566   			#endif
;;;1567   
;;;1568   			if( uxCurrentBasePriority != uxNewPriority )
00004a  42ae              CMP      r6,r5
00004c  d056              BEQ      |L34.252|
;;;1569   			{
;;;1570   				/* The priority change may have readied a task of higher
;;;1571   				priority than the calling task. */
;;;1572   				if( uxNewPriority > uxCurrentBasePriority )
00004e  42b5              CMP      r5,r6
000050  d90b              BLS      |L34.106|
;;;1573   				{
;;;1574   					if( pxTCB != pxCurrentTCB )
000052  482c              LDR      r0,|L34.260|
000054  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000056  4284              CMP      r4,r0
000058  d00d              BEQ      |L34.118|
;;;1575   					{
;;;1576   						/* The priority of a task other than the currently
;;;1577   						running task is being raised.  Is the priority being
;;;1578   						raised above that of the running task? */
;;;1579   						if( uxNewPriority >= pxCurrentTCB->uxPriority )
00005a  482a              LDR      r0,|L34.260|
00005c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00005e  6ac0              LDR      r0,[r0,#0x2c]
000060  42a8              CMP      r0,r5
000062  d808              BHI      |L34.118|
;;;1580   						{
;;;1581   							xYieldRequired = pdTRUE;
000064  f04f0901          MOV      r9,#1
000068  e005              B        |L34.118|
                  |L34.106|
;;;1582   						}
;;;1583   						else
;;;1584   						{
;;;1585   							mtCOVERAGE_TEST_MARKER();
;;;1586   						}
;;;1587   					}
;;;1588   					else
;;;1589   					{
;;;1590   						/* The priority of the running task is being raised,
;;;1591   						but the running task must already be the highest
;;;1592   						priority task able to run so no yield is required. */
;;;1593   					}
;;;1594   				}
;;;1595   				else if( pxTCB == pxCurrentTCB )
00006a  4826              LDR      r0,|L34.260|
00006c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00006e  4284              CMP      r4,r0
000070  d101              BNE      |L34.118|
;;;1596   				{
;;;1597   					/* Setting the priority of the running task down means
;;;1598   					there may now be another task of higher priority that
;;;1599   					is ready to execute. */
;;;1600   					xYieldRequired = pdTRUE;
000072  f04f0901          MOV      r9,#1
                  |L34.118|
;;;1601   				}
;;;1602   				else
;;;1603   				{
;;;1604   					/* Setting the priority of any other task down does not
;;;1605   					require a yield as the running task must be above the
;;;1606   					new priority of the task being modified. */
;;;1607   				}
;;;1608   
;;;1609   				/* Remember the ready list the task might be referenced from
;;;1610   				before its uxPriority member is changed so the
;;;1611   				taskRESET_READY_PRIORITY() macro can function correctly. */
;;;1612   				uxPriorityUsedOnEntry = pxTCB->uxPriority;
000076  6ae7              LDR      r7,[r4,#0x2c]
;;;1613   
;;;1614   				#if ( configUSE_MUTEXES == 1 )
;;;1615   				{
;;;1616   					/* Only change the priority being used if the task is not
;;;1617   					currently using an inherited priority. */
;;;1618   					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
000078  6ae1              LDR      r1,[r4,#0x2c]
00007a  6d20              LDR      r0,[r4,#0x50]
00007c  4288              CMP      r0,r1
00007e  d100              BNE      |L34.130|
;;;1619   					{
;;;1620   						pxTCB->uxPriority = uxNewPriority;
000080  62e5              STR      r5,[r4,#0x2c]
                  |L34.130|
;;;1621   					}
;;;1622   					else
;;;1623   					{
;;;1624   						mtCOVERAGE_TEST_MARKER();
;;;1625   					}
;;;1626   
;;;1627   					/* The base priority gets set whatever. */
;;;1628   					pxTCB->uxBasePriority = uxNewPriority;
000082  6525              STR      r5,[r4,#0x50]
;;;1629   				}
;;;1630   				#else
;;;1631   				{
;;;1632   					pxTCB->uxPriority = uxNewPriority;
;;;1633   				}
;;;1634   				#endif
;;;1635   
;;;1636   				/* Only reset the event list item value if the value is not
;;;1637   				being used for anything else. */
;;;1638   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000084  69a0              LDR      r0,[r4,#0x18]
000086  f0004000          AND      r0,r0,#0x80000000
00008a  b910              CBNZ     r0,|L34.146|
;;;1639   				{
;;;1640   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00008c  f1c50005          RSB      r0,r5,#5
000090  61a0              STR      r0,[r4,#0x18]
                  |L34.146|
;;;1641   				}
;;;1642   				else
;;;1643   				{
;;;1644   					mtCOVERAGE_TEST_MARKER();
;;;1645   				}
;;;1646   
;;;1647   				/* If the task is in the blocked or suspended list we need do
;;;1648   				nothing more than change its priority variable. However, if
;;;1649   				the task is in a ready list it needs to be removed and placed
;;;1650   				in the list appropriate to its new priority. */
;;;1651   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
000092  eb070187          ADD      r1,r7,r7,LSL #2
000096  4a1c              LDR      r2,|L34.264|
000098  eb020181          ADD      r1,r2,r1,LSL #2
00009c  6960              LDR      r0,[r4,#0x14]
00009e  4288              CMP      r0,r1
0000a0  d101              BNE      |L34.166|
0000a2  2001              MOVS     r0,#1
0000a4  e000              B        |L34.168|
                  |L34.166|
0000a6  2000              MOVS     r0,#0
                  |L34.168|
0000a8  b1e0              CBZ      r0,|L34.228|
;;;1652   				{
;;;1653   					/* The task is currently in its ready list - remove before
;;;1654   					adding it to it's new ready list.  As we are in a critical
;;;1655   					section we can do this even if the scheduler is suspended. */
;;;1656   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
0000aa  1d20              ADDS     r0,r4,#4
0000ac  f7fffffe          BL       uxListRemove
0000b0  b930              CBNZ     r0,|L34.192|
;;;1657   					{
;;;1658   						/* It is known that the task is in its ready list so
;;;1659   						there is no need to check again and the port level
;;;1660   						reset macro can be called directly. */
;;;1661   						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
0000b2  2001              MOVS     r0,#1
0000b4  40b8              LSLS     r0,r0,r7
0000b6  4915              LDR      r1,|L34.268|
0000b8  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000ba  4381              BICS     r1,r1,r0
0000bc  4813              LDR      r0,|L34.268|
0000be  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L34.192|
;;;1662   					}
;;;1663   					else
;;;1664   					{
;;;1665   						mtCOVERAGE_TEST_MARKER();
;;;1666   					}
;;;1667   					prvAddTaskToReadyList( pxTCB );
0000c0  f894102c          LDRB     r1,[r4,#0x2c]
0000c4  2001              MOVS     r0,#1
0000c6  4088              LSLS     r0,r0,r1
0000c8  4910              LDR      r1,|L34.268|
0000ca  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000cc  4308              ORRS     r0,r0,r1
0000ce  490f              LDR      r1,|L34.268|
0000d0  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000d2  6ae1              LDR      r1,[r4,#0x2c]
0000d4  eb010181          ADD      r1,r1,r1,LSL #2
0000d8  4a0b              LDR      r2,|L34.264|
0000da  eb020081          ADD      r0,r2,r1,LSL #2
0000de  1d21              ADDS     r1,r4,#4
0000e0  f7fffffe          BL       vListInsertEnd
                  |L34.228|
;;;1668   				}
;;;1669   				else
;;;1670   				{
;;;1671   					mtCOVERAGE_TEST_MARKER();
;;;1672   				}
;;;1673   
;;;1674   				if( xYieldRequired != pdFALSE )
0000e4  f1b90f00          CMP      r9,#0
0000e8  d007              BEQ      |L34.250|
;;;1675   				{
;;;1676   					taskYIELD_IF_USING_PREEMPTION();
0000ea  f04f5080          MOV      r0,#0x10000000
0000ee  4908              LDR      r1,|L34.272|
0000f0  6008              STR      r0,[r1,#0]
0000f2  f3bf8f4f          DSB      
0000f6  f3bf8f6f          ISB      
                  |L34.250|
;;;1677   				}
;;;1678   				else
;;;1679   				{
;;;1680   					mtCOVERAGE_TEST_MARKER();
;;;1681   				}
;;;1682   
;;;1683   				/* Remove compiler warning about unused variables when the port
;;;1684   				optimised task selection is not being used. */
;;;1685   				( void ) uxPriorityUsedOnEntry;
0000fa  bf00              NOP      
                  |L34.252|
;;;1686   			}
;;;1687   		}
;;;1688   		taskEXIT_CRITICAL();
0000fc  f7fffffe          BL       vPortExitCritical
;;;1689   	}
000100  e8bd87f0          POP      {r4-r10,pc}
;;;1690   
                          ENDP

                  |L34.260|
                          DCD      pxCurrentTCB
                  |L34.264|
                          DCD      pxReadyTasksLists
                  |L34.268|
                          DCD      uxTopReadyPriority
                  |L34.272|
                          DCD      0xe000ed04

                          AREA ||i.vTaskRemoveFromUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskRemoveFromUnorderedEventList PROC
;;;3161   
;;;3162   void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
000000  b570              PUSH     {r4-r6,lr}
;;;3163   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;3164   TCB_t *pxUnblockedTCB;
;;;3165   
;;;3166   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;3167   	the event flags implementation. */
;;;3168   	configASSERT( uxSchedulerSuspended != pdFALSE );
000006  4822              LDR      r0,|L35.144|
000008  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000a  b108              CBZ      r0,|L35.16|
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L35.18|
                  |L35.16|
000010  2000              MOVS     r0,#0
                  |L35.18|
000012  b950              CBNZ     r0,|L35.42|
000014  bf00              NOP      
000016  2050              MOVS     r0,#0x50
000018  f3808811          MSR      BASEPRI,r0
00001c  f3bf8f4f          DSB      
000020  f3bf8f6f          ISB      
000024  bf00              NOP      
000026  bf00              NOP      
                  |L35.40|
000028  e7fe              B        |L35.40|
                  |L35.42|
;;;3169   
;;;3170   	/* Store the new item value in the event list. */
;;;3171   	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
00002a  f0464000          ORR      r0,r6,#0x80000000
00002e  6028              STR      r0,[r5,#0]
;;;3172   
;;;3173   	/* Remove the event list form the event flag.  Interrupts do not access
;;;3174   	event flags. */
;;;3175   	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000030  68ec              LDR      r4,[r5,#0xc]
;;;3176   	configASSERT( pxUnblockedTCB );
000032  b954              CBNZ     r4,|L35.74|
000034  bf00              NOP      
000036  2050              MOVS     r0,#0x50
000038  f3808811          MSR      BASEPRI,r0
00003c  f3bf8f4f          DSB      
000040  f3bf8f6f          ISB      
000044  bf00              NOP      
000046  bf00              NOP      
                  |L35.72|
000048  e7fe              B        |L35.72|
                  |L35.74|
;;;3177   	( void ) uxListRemove( pxEventListItem );
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       uxListRemove
;;;3178   
;;;3179   	/* Remove the task from the delayed list and add it to the ready list.  The
;;;3180   	scheduler is suspended so interrupts will not be accessing the ready
;;;3181   	lists. */
;;;3182   	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
000050  1d20              ADDS     r0,r4,#4
000052  f7fffffe          BL       uxListRemove
;;;3183   	prvAddTaskToReadyList( pxUnblockedTCB );
000056  f894102c          LDRB     r1,[r4,#0x2c]
00005a  2001              MOVS     r0,#1
00005c  4088              LSLS     r0,r0,r1
00005e  490d              LDR      r1,|L35.148|
000060  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000062  4308              ORRS     r0,r0,r1
000064  490b              LDR      r1,|L35.148|
000066  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000068  6ae1              LDR      r1,[r4,#0x2c]
00006a  eb010181          ADD      r1,r1,r1,LSL #2
00006e  4a0a              LDR      r2,|L35.152|
000070  eb020081          ADD      r0,r2,r1,LSL #2
000074  1d21              ADDS     r1,r4,#4
000076  f7fffffe          BL       vListInsertEnd
;;;3184   
;;;3185   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
00007a  4908              LDR      r1,|L35.156|
00007c  6ae0              LDR      r0,[r4,#0x2c]
00007e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000080  6ac9              LDR      r1,[r1,#0x2c]
000082  4288              CMP      r0,r1
000084  d902              BLS      |L35.140|
;;;3186   	{
;;;3187   		/* The unblocked task has a priority above that of the calling task, so
;;;3188   		a context switch is required.  This function is called with the
;;;3189   		scheduler suspended so xYieldPending is set so the context switch
;;;3190   		occurs immediately that the scheduler is resumed (unsuspended). */
;;;3191   		xYieldPending = pdTRUE;
000086  2001              MOVS     r0,#1
000088  4905              LDR      r1,|L35.160|
00008a  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L35.140|
;;;3192   	}
;;;3193   }
00008c  bd70              POP      {r4-r6,pc}
;;;3194   /*-----------------------------------------------------------*/
                          ENDP

00008e  0000              DCW      0x0000
                  |L35.144|
                          DCD      uxSchedulerSuspended
                  |L35.148|
                          DCD      uxTopReadyPriority
                  |L35.152|
                          DCD      pxReadyTasksLists
                  |L35.156|
                          DCD      pxCurrentTCB
                  |L35.160|
                          DCD      xYieldPending

                          AREA ||i.vTaskResume||, CODE, READONLY, ALIGN=2

                  vTaskResume PROC
;;;1842   
;;;1843   	void vTaskResume( TaskHandle_t xTaskToResume )
000000  b570              PUSH     {r4-r6,lr}
;;;1844   	{
000002  4605              MOV      r5,r0
;;;1845   	TCB_t * const pxTCB = xTaskToResume;
000004  462c              MOV      r4,r5
;;;1846   
;;;1847   		/* It does not make sense to resume the calling task. */
;;;1848   		configASSERT( xTaskToResume );
000006  b955              CBNZ     r5,|L36.30|
000008  bf00              NOP      
00000a  2050              MOVS     r0,#0x50
00000c  f3808811          MSR      BASEPRI,r0
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L36.28|
00001c  e7fe              B        |L36.28|
                  |L36.30|
;;;1849   
;;;1850   		/* The parameter cannot be NULL as it is impossible to resume the
;;;1851   		currently executing task. */
;;;1852   		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
00001e  4818              LDR      r0,|L36.128|
000020  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000022  4284              CMP      r4,r0
000024  d02b              BEQ      |L36.126|
000026  b354              CBZ      r4,|L36.126|
;;;1853   		{
;;;1854   			taskENTER_CRITICAL();
000028  f7fffffe          BL       vPortEnterCritical
;;;1855   			{
;;;1856   				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       prvTaskIsTaskSuspended
000032  b310              CBZ      r0,|L36.122|
;;;1857   				{
;;;1858   					traceTASK_RESUME( pxTCB );
;;;1859   
;;;1860   					/* The ready list can be accessed even if the scheduler is
;;;1861   					suspended because this is inside a critical section. */
;;;1862   					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
000034  1d20              ADDS     r0,r4,#4
000036  f7fffffe          BL       uxListRemove
;;;1863   					prvAddTaskToReadyList( pxTCB );
00003a  f894102c          LDRB     r1,[r4,#0x2c]
00003e  2001              MOVS     r0,#1
000040  4088              LSLS     r0,r0,r1
000042  4910              LDR      r1,|L36.132|
000044  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000046  4308              ORRS     r0,r0,r1
000048  490e              LDR      r1,|L36.132|
00004a  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00004c  6ae1              LDR      r1,[r4,#0x2c]
00004e  eb010181          ADD      r1,r1,r1,LSL #2
000052  4a0d              LDR      r2,|L36.136|
000054  eb020081          ADD      r0,r2,r1,LSL #2
000058  1d21              ADDS     r1,r4,#4
00005a  f7fffffe          BL       vListInsertEnd
;;;1864   
;;;1865   					/* A higher priority task may have just been resumed. */
;;;1866   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00005e  4908              LDR      r1,|L36.128|
000060  6ae0              LDR      r0,[r4,#0x2c]
000062  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000064  6ac9              LDR      r1,[r1,#0x2c]
000066  4288              CMP      r0,r1
000068  d307              BCC      |L36.122|
;;;1867   					{
;;;1868   						/* This yield may not cause the task just resumed to run,
;;;1869   						but will leave the lists in the correct state for the
;;;1870   						next yield. */
;;;1871   						taskYIELD_IF_USING_PREEMPTION();
00006a  f04f5080          MOV      r0,#0x10000000
00006e  4907              LDR      r1,|L36.140|
000070  6008              STR      r0,[r1,#0]
000072  f3bf8f4f          DSB      
000076  f3bf8f6f          ISB      
                  |L36.122|
;;;1872   					}
;;;1873   					else
;;;1874   					{
;;;1875   						mtCOVERAGE_TEST_MARKER();
;;;1876   					}
;;;1877   				}
;;;1878   				else
;;;1879   				{
;;;1880   					mtCOVERAGE_TEST_MARKER();
;;;1881   				}
;;;1882   			}
;;;1883   			taskEXIT_CRITICAL();
00007a  f7fffffe          BL       vPortExitCritical
                  |L36.126|
;;;1884   		}
;;;1885   		else
;;;1886   		{
;;;1887   			mtCOVERAGE_TEST_MARKER();
;;;1888   		}
;;;1889   	}
00007e  bd70              POP      {r4-r6,pc}
;;;1890   
                          ENDP

                  |L36.128|
                          DCD      pxCurrentTCB
                  |L36.132|
                          DCD      uxTopReadyPriority
                  |L36.136|
                          DCD      pxReadyTasksLists
                  |L36.140|
                          DCD      0xe000ed04

                          AREA ||i.vTaskSetTaskNumber||, CODE, READONLY, ALIGN=1

                  vTaskSetTaskNumber PROC
;;;3309   
;;;3310   	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
000000  b108              CBZ      r0,|L37.6|
;;;3311   	{
;;;3312   	TCB_t * pxTCB;
;;;3313   
;;;3314   		if( xTask != NULL )
;;;3315   		{
;;;3316   			pxTCB = xTask;
000002  4602              MOV      r2,r0
;;;3317   			pxTCB->uxTaskNumber = uxHandle;
000004  64d1              STR      r1,[r2,#0x4c]
                  |L37.6|
;;;3318   		}
;;;3319   	}
000006  4770              BX       lr
;;;3320   
                          ENDP


                          AREA ||i.vTaskSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskSetTimeOutState PROC
;;;3195   
;;;3196   void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  b510              PUSH     {r4,lr}
;;;3197   {
000002  4604              MOV      r4,r0
;;;3198   	configASSERT( pxTimeOut );
000004  b954              CBNZ     r4,|L38.28|
000006  bf00              NOP      
000008  2050              MOVS     r0,#0x50
00000a  f3808811          MSR      BASEPRI,r0
00000e  f3bf8f4f          DSB      
000012  f3bf8f6f          ISB      
000016  bf00              NOP      
000018  bf00              NOP      
                  |L38.26|
00001a  e7fe              B        |L38.26|
                  |L38.28|
;;;3199   	taskENTER_CRITICAL();
00001c  f7fffffe          BL       vPortEnterCritical
;;;3200   	{
;;;3201   		pxTimeOut->xOverflowCount = xNumOfOverflows;
000020  4804              LDR      r0,|L38.52|
000022  6800              LDR      r0,[r0,#0]  ; xNumOfOverflows
000024  6020              STR      r0,[r4,#0]
;;;3202   		pxTimeOut->xTimeOnEntering = xTickCount;
000026  4804              LDR      r0,|L38.56|
000028  6800              LDR      r0,[r0,#0]  ; xTickCount
00002a  6060              STR      r0,[r4,#4]
;;;3203   	}
;;;3204   	taskEXIT_CRITICAL();
00002c  f7fffffe          BL       vPortExitCritical
;;;3205   }
000030  bd10              POP      {r4,pc}
;;;3206   /*-----------------------------------------------------------*/
                          ENDP

000032  0000              DCW      0x0000
                  |L38.52|
                          DCD      xNumOfOverflows
                  |L38.56|
                          DCD      xTickCount

                          AREA ||i.vTaskStartScheduler||, CODE, READONLY, ALIGN=2

                  vTaskStartScheduler PROC
;;;1966   
;;;1967   void vTaskStartScheduler( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;1968   {
;;;1969   BaseType_t xReturn;
;;;1970   
;;;1971   	/* Add the idle task at the lowest priority. */
;;;1972   	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;1973   	{
;;;1974   		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
;;;1975   		StackType_t *pxIdleTaskStackBuffer = NULL;
;;;1976   		uint32_t ulIdleTaskStackSize;
;;;1977   
;;;1978   		/* The Idle task is created using user provided RAM - obtain the
;;;1979   		address of the RAM then create the idle task. */
;;;1980   		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
;;;1981   		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
;;;1982   												configIDLE_TASK_NAME,
;;;1983   												ulIdleTaskStackSize,
;;;1984   												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
;;;1985   												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
;;;1986   												pxIdleTaskStackBuffer,
;;;1987   												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1988   
;;;1989   		if( xIdleTaskHandle != NULL )
;;;1990   		{
;;;1991   			xReturn = pdPASS;
;;;1992   		}
;;;1993   		else
;;;1994   		{
;;;1995   			xReturn = pdFAIL;
;;;1996   		}
;;;1997   	}
;;;1998   	#else
;;;1999   	{
;;;2000   		/* The Idle task is being created using dynamically allocated RAM. */
;;;2001   		xReturn = xTaskCreate(	prvIdleTask,
000002  481d              LDR      r0,|L39.120|
000004  2100              MOVS     r1,#0
000006  460b              MOV      r3,r1
000008  2282              MOVS     r2,#0x82
00000a  e9cd1000          STRD     r1,r0,[sp,#0]
00000e  a11b              ADR      r1,|L39.124|
000010  481c              LDR      r0,|L39.132|
000012  f7fffffe          BL       xTaskCreate
000016  4604              MOV      r4,r0
;;;2002   								configIDLE_TASK_NAME,
;;;2003   								configMINIMAL_STACK_SIZE,
;;;2004   								( void * ) NULL,
;;;2005   								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
;;;2006   								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;2007   	}
;;;2008   	#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;2009   
;;;2010   	#if ( configUSE_TIMERS == 1 )
;;;2011   	{
;;;2012   		if( xReturn == pdPASS )
000018  2c01              CMP      r4,#1
00001a  d102              BNE      |L39.34|
;;;2013   		{
;;;2014   			xReturn = xTimerCreateTimerTask();
00001c  f7fffffe          BL       xTimerCreateTimerTask
000020  4604              MOV      r4,r0
                  |L39.34|
;;;2015   		}
;;;2016   		else
;;;2017   		{
;;;2018   			mtCOVERAGE_TEST_MARKER();
;;;2019   		}
;;;2020   	}
;;;2021   	#endif /* configUSE_TIMERS */
;;;2022   
;;;2023   	if( xReturn == pdPASS )
000022  2c01              CMP      r4,#1
000024  d115              BNE      |L39.82|
;;;2024   	{
;;;2025   		/* freertos_tasks_c_additions_init() should only be called if the user
;;;2026   		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
;;;2027   		the only macro called by the function. */
;;;2028   		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
;;;2029   		{
;;;2030   			freertos_tasks_c_additions_init();
;;;2031   		}
;;;2032   		#endif
;;;2033   
;;;2034   		/* Interrupts are turned off here, to ensure a tick does not occur
;;;2035   		before or during the call to xPortStartScheduler().  The stacks of
;;;2036   		the created tasks contain a status word with interrupts switched on
;;;2037   		so interrupts will automatically get re-enabled when the first task
;;;2038   		starts to run. */
;;;2039   		portDISABLE_INTERRUPTS();
000026  bf00              NOP      
000028  2050              MOVS     r0,#0x50
00002a  f3808811          MSR      BASEPRI,r0
00002e  f3bf8f4f          DSB      
000032  f3bf8f6f          ISB      
000036  bf00              NOP      
;;;2040   
;;;2041   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2042   		{
;;;2043   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;2044   			structure specific to the task that will run first. */
;;;2045   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;2046   		}
;;;2047   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;2048   
;;;2049   		xNextTaskUnblockTime = portMAX_DELAY;
000038  f04f30ff          MOV      r0,#0xffffffff
00003c  4912              LDR      r1,|L39.136|
00003e  6008              STR      r0,[r1,#0]  ; xNextTaskUnblockTime
;;;2050   		xSchedulerRunning = pdTRUE;
000040  2001              MOVS     r0,#1
000042  4912              LDR      r1,|L39.140|
000044  6008              STR      r0,[r1,#0]  ; xSchedulerRunning
;;;2051   		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
000046  2000              MOVS     r0,#0
000048  4911              LDR      r1,|L39.144|
00004a  6008              STR      r0,[r1,#0]  ; xTickCount
;;;2052   
;;;2053   		/* If configGENERATE_RUN_TIME_STATS is defined then the following
;;;2054   		macro must be defined to configure the timer/counter used to generate
;;;2055   		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
;;;2056   		is set to 0 and the following line fails to build then ensure you do not
;;;2057   		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
;;;2058   		FreeRTOSConfig.h file. */
;;;2059   		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
;;;2060   
;;;2061   		traceTASK_SWITCHED_IN();
;;;2062   
;;;2063   		/* Setting up the timer tick is hardware specific and thus in the
;;;2064   		portable interface. */
;;;2065   		if( xPortStartScheduler() != pdFALSE )
00004c  f7fffffe          BL       xPortStartScheduler
000050  e010              B        |L39.116|
                  |L39.82|
;;;2066   		{
;;;2067   			/* Should not reach here as if the scheduler is running the
;;;2068   			function will not return. */
;;;2069   		}
;;;2070   		else
;;;2071   		{
;;;2072   			/* Should only reach here if a task calls xTaskEndScheduler(). */
;;;2073   		}
;;;2074   	}
;;;2075   	else
;;;2076   	{
;;;2077   		/* This line will only be reached if the kernel could not be started,
;;;2078   		because there was not enough FreeRTOS heap to create the idle task
;;;2079   		or the timer task. */
;;;2080   		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
000052  1c60              ADDS     r0,r4,#1
000054  b108              CBZ      r0,|L39.90|
000056  2001              MOVS     r0,#1
000058  e000              B        |L39.92|
                  |L39.90|
00005a  2000              MOVS     r0,#0
                  |L39.92|
00005c  b950              CBNZ     r0,|L39.116|
00005e  bf00              NOP      
000060  2050              MOVS     r0,#0x50
000062  f3808811          MSR      BASEPRI,r0
000066  f3bf8f4f          DSB      
00006a  f3bf8f6f          ISB      
00006e  bf00              NOP      
000070  bf00              NOP      
                  |L39.114|
000072  e7fe              B        |L39.114|
                  |L39.116|
;;;2081   	}
;;;2082   
;;;2083   	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
;;;2084   	meaning xIdleTaskHandle is not used anywhere else. */
;;;2085   	( void ) xIdleTaskHandle;
;;;2086   }
000074  bd1c              POP      {r2-r4,pc}
;;;2087   /*-----------------------------------------------------------*/
                          ENDP

000076  0000              DCW      0x0000
                  |L39.120|
                          DCD      xIdleTaskHandle
                  |L39.124|
00007c  49444c45          DCB      "IDLE",0
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L39.132|
                          DCD      prvIdleTask
                  |L39.136|
                          DCD      xNextTaskUnblockTime
                  |L39.140|
                          DCD      xSchedulerRunning
                  |L39.144|
                          DCD      xTickCount

                          AREA ||i.vTaskSuspend||, CODE, READONLY, ALIGN=2

                  vTaskSuspend PROC
;;;1695   
;;;1696   	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
000000  b570              PUSH     {r4-r6,lr}
;;;1697   	{
000002  4605              MOV      r5,r0
;;;1698   	TCB_t *pxTCB;
;;;1699   
;;;1700   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1701   		{
;;;1702   			/* If null is passed in here then it is the running task that is
;;;1703   			being suspended. */
;;;1704   			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
000008  b915              CBNZ     r5,|L40.16|
00000a  4832              LDR      r0,|L40.212|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L40.18|
                  |L40.16|
000010  4628              MOV      r0,r5
                  |L40.18|
000012  4604              MOV      r4,r0
;;;1705   
;;;1706   			traceTASK_SUSPEND( pxTCB );
;;;1707   
;;;1708   			/* Remove task from the ready/delayed list and place in the
;;;1709   			suspended list. */
;;;1710   			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000014  1d20              ADDS     r0,r4,#4
000016  f7fffffe          BL       uxListRemove
00001a  b978              CBNZ     r0,|L40.60|
;;;1711   			{
;;;1712   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00001c  6ae0              LDR      r0,[r4,#0x2c]
00001e  eb000080          ADD      r0,r0,r0,LSL #2
000022  492d              LDR      r1,|L40.216|
000024  f8510020          LDR      r0,[r1,r0,LSL #2]
000028  b940              CBNZ     r0,|L40.60|
00002a  f894102c          LDRB     r1,[r4,#0x2c]
00002e  2001              MOVS     r0,#1
000030  4088              LSLS     r0,r0,r1
000032  492a              LDR      r1,|L40.220|
000034  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000036  4381              BICS     r1,r1,r0
000038  4828              LDR      r0,|L40.220|
00003a  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L40.60|
;;;1713   			}
;;;1714   			else
;;;1715   			{
;;;1716   				mtCOVERAGE_TEST_MARKER();
;;;1717   			}
;;;1718   
;;;1719   			/* Is the task waiting on an event also? */
;;;1720   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  b118              CBZ      r0,|L40.72|
;;;1721   			{
;;;1722   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000040  f1040018          ADD      r0,r4,#0x18
000044  f7fffffe          BL       uxListRemove
                  |L40.72|
;;;1723   			}
;;;1724   			else
;;;1725   			{
;;;1726   				mtCOVERAGE_TEST_MARKER();
;;;1727   			}
;;;1728   
;;;1729   			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
000048  1d21              ADDS     r1,r4,#4
00004a  4825              LDR      r0,|L40.224|
00004c  f7fffffe          BL       vListInsertEnd
;;;1730   
;;;1731   			#if( configUSE_TASK_NOTIFICATIONS == 1 )
;;;1732   			{
;;;1733   				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
000050  f894005c          LDRB     r0,[r4,#0x5c]
000054  2801              CMP      r0,#1
000056  d102              BNE      |L40.94|
;;;1734   				{
;;;1735   					/* The task was blocked to wait for a notification, but is
;;;1736   					now suspended, so no notification was received. */
;;;1737   					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000058  2000              MOVS     r0,#0
00005a  f884005c          STRB     r0,[r4,#0x5c]
                  |L40.94|
;;;1738   				}
;;;1739   			}
;;;1740   			#endif
;;;1741   		}
;;;1742   		taskEXIT_CRITICAL();
00005e  f7fffffe          BL       vPortExitCritical
;;;1743   
;;;1744   		if( xSchedulerRunning != pdFALSE )
000062  4820              LDR      r0,|L40.228|
000064  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
000066  b128              CBZ      r0,|L40.116|
;;;1745   		{
;;;1746   			/* Reset the next expected unblock time in case it referred to the
;;;1747   			task that is now in the Suspended state. */
;;;1748   			taskENTER_CRITICAL();
000068  f7fffffe          BL       vPortEnterCritical
;;;1749   			{
;;;1750   				prvResetNextTaskUnblockTime();
00006c  f7fffffe          BL       prvResetNextTaskUnblockTime
;;;1751   			}
;;;1752   			taskEXIT_CRITICAL();
000070  f7fffffe          BL       vPortExitCritical
                  |L40.116|
;;;1753   		}
;;;1754   		else
;;;1755   		{
;;;1756   			mtCOVERAGE_TEST_MARKER();
;;;1757   		}
;;;1758   
;;;1759   		if( pxTCB == pxCurrentTCB )
000074  4817              LDR      r0,|L40.212|
000076  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000078  4284              CMP      r4,r0
00007a  d129              BNE      |L40.208|
;;;1760   		{
;;;1761   			if( xSchedulerRunning != pdFALSE )
00007c  4819              LDR      r0,|L40.228|
00007e  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
000080  b1d0              CBZ      r0,|L40.184|
;;;1762   			{
;;;1763   				/* The current task has just been suspended. */
;;;1764   				configASSERT( uxSchedulerSuspended == 0 );
000082  4819              LDR      r0,|L40.232|
000084  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000086  b908              CBNZ     r0,|L40.140|
000088  2001              MOVS     r0,#1
00008a  e000              B        |L40.142|
                  |L40.140|
00008c  2000              MOVS     r0,#0
                  |L40.142|
00008e  b950              CBNZ     r0,|L40.166|
000090  bf00              NOP      
000092  2050              MOVS     r0,#0x50
000094  f3808811          MSR      BASEPRI,r0
000098  f3bf8f4f          DSB      
00009c  f3bf8f6f          ISB      
0000a0  bf00              NOP      
0000a2  bf00              NOP      
                  |L40.164|
0000a4  e7fe              B        |L40.164|
                  |L40.166|
;;;1765   				portYIELD_WITHIN_API();
0000a6  f04f5080          MOV      r0,#0x10000000
0000aa  4910              LDR      r1,|L40.236|
0000ac  6008              STR      r0,[r1,#0]
0000ae  f3bf8f4f          DSB      
0000b2  f3bf8f6f          ISB      
0000b6  e00b              B        |L40.208|
                  |L40.184|
;;;1766   			}
;;;1767   			else
;;;1768   			{
;;;1769   				/* The scheduler is not running, but the task that was pointed
;;;1770   				to by pxCurrentTCB has just been suspended and pxCurrentTCB
;;;1771   				must be adjusted to point to a different task. */
;;;1772   				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
0000b8  4809              LDR      r0,|L40.224|
0000ba  6800              LDR      r0,[r0,#0]  ; xSuspendedTaskList
0000bc  490c              LDR      r1,|L40.240|
0000be  6809              LDR      r1,[r1,#0]  ; uxCurrentNumberOfTasks
0000c0  4288              CMP      r0,r1
0000c2  d103              BNE      |L40.204|
;;;1773   				{
;;;1774   					/* No other tasks are ready, so set pxCurrentTCB back to
;;;1775   					NULL so when the next task is created pxCurrentTCB will
;;;1776   					be set to point to it no matter what its relative priority
;;;1777   					is. */
;;;1778   					pxCurrentTCB = NULL;
0000c4  2000              MOVS     r0,#0
0000c6  4903              LDR      r1,|L40.212|
0000c8  6008              STR      r0,[r1,#0]  ; pxCurrentTCB
0000ca  e001              B        |L40.208|
                  |L40.204|
;;;1779   				}
;;;1780   				else
;;;1781   				{
;;;1782   					vTaskSwitchContext();
0000cc  f7fffffe          BL       vTaskSwitchContext
                  |L40.208|
;;;1783   				}
;;;1784   			}
;;;1785   		}
;;;1786   		else
;;;1787   		{
;;;1788   			mtCOVERAGE_TEST_MARKER();
;;;1789   		}
;;;1790   	}
0000d0  bd70              POP      {r4-r6,pc}
;;;1791   
                          ENDP

0000d2  0000              DCW      0x0000
                  |L40.212|
                          DCD      pxCurrentTCB
                  |L40.216|
                          DCD      pxReadyTasksLists
                  |L40.220|
                          DCD      uxTopReadyPriority
                  |L40.224|
                          DCD      xSuspendedTaskList
                  |L40.228|
                          DCD      xSchedulerRunning
                  |L40.232|
                          DCD      uxSchedulerSuspended
                  |L40.236|
                          DCD      0xe000ed04
                  |L40.240|
                          DCD      uxCurrentNumberOfTasks

                          AREA ||i.vTaskSuspendAll||, CODE, READONLY, ALIGN=2

                  vTaskSuspendAll PROC
;;;2099   
;;;2100   void vTaskSuspendAll( void )
000000  4802              LDR      r0,|L41.12|
;;;2101   {
;;;2102   	/* A critical section is not required as the variable is of type
;;;2103   	BaseType_t.  Please read Richard Barry's reply in the following link to a
;;;2104   	post in the FreeRTOS support forum before reporting this as a bug! -
;;;2105   	http://goo.gl/wu4acr */
;;;2106   	++uxSchedulerSuspended;
000002  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L41.12|
000008  6008              STR      r0,[r1,#0]  ; uxSchedulerSuspended
;;;2107   	portMEMORY_BARRIER();
;;;2108   }
00000a  4770              BX       lr
;;;2109   /*----------------------------------------------------------*/
                          ENDP

                  |L41.12|
                          DCD      uxSchedulerSuspended

                          AREA ||i.vTaskSwitchContext||, CODE, READONLY, ALIGN=2

                  vTaskSwitchContext PROC
;;;2946   
;;;2947   void vTaskSwitchContext( void )
000000  481d              LDR      r0,|L42.120|
;;;2948   {
;;;2949   	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
000002  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000004  b118              CBZ      r0,|L42.14|
;;;2950   	{
;;;2951   		/* The scheduler is currently suspended - do not allow a context
;;;2952   		switch. */
;;;2953   		xYieldPending = pdTRUE;
000006  2001              MOVS     r0,#1
000008  491c              LDR      r1,|L42.124|
00000a  6008              STR      r0,[r1,#0]  ; xYieldPending
00000c  e032              B        |L42.116|
                  |L42.14|
;;;2954   	}
;;;2955   	else
;;;2956   	{
;;;2957   		xYieldPending = pdFALSE;
00000e  2000              MOVS     r0,#0
000010  491a              LDR      r1,|L42.124|
000012  6008              STR      r0,[r1,#0]  ; xYieldPending
;;;2958   		traceTASK_SWITCHED_OUT();
;;;2959   
;;;2960   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;2961   		{
;;;2962   			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2963   				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
;;;2964   			#else
;;;2965   				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2966   			#endif
;;;2967   
;;;2968   			/* Add the amount of time the task has been running to the
;;;2969   			accumulated time so far.  The time the task started running was
;;;2970   			stored in ulTaskSwitchedInTime.  Note that there is no overflow
;;;2971   			protection here so count values are only valid until the timer
;;;2972   			overflows.  The guard against negative values is to protect
;;;2973   			against suspect run time stat counter implementations - which
;;;2974   			are provided by the application, not the kernel. */
;;;2975   			if( ulTotalRunTime > ulTaskSwitchedInTime )
;;;2976   			{
;;;2977   				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
;;;2978   			}
;;;2979   			else
;;;2980   			{
;;;2981   				mtCOVERAGE_TEST_MARKER();
;;;2982   			}
;;;2983   			ulTaskSwitchedInTime = ulTotalRunTime;
;;;2984   		}
;;;2985   		#endif /* configGENERATE_RUN_TIME_STATS */
;;;2986   
;;;2987   		/* Check for stack overflow, if configured. */
;;;2988   		taskCHECK_FOR_STACK_OVERFLOW();
;;;2989   
;;;2990   		/* Before the currently running task is switched out, save its errno. */
;;;2991   		#if( configUSE_POSIX_ERRNO == 1 )
;;;2992   		{
;;;2993   			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
;;;2994   		}
;;;2995   		#endif
;;;2996   
;;;2997   		/* Select a new task to run using either the generic C or port
;;;2998   		optimised asm code. */
;;;2999   		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000014  481a              LDR      r0,|L42.128|
000016  6800              LDR      r0,[r0,#0]  ; uxTopReadyPriority
000018  fab0f080          CLZ      r0,r0
00001c  f1c0011f          RSB      r1,r0,#0x1f
000020  eb010081          ADD      r0,r1,r1,LSL #2
000024  4a17              LDR      r2,|L42.132|
000026  f8520020          LDR      r0,[r2,r0,LSL #2]
00002a  b108              CBZ      r0,|L42.48|
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L42.50|
                  |L42.48|
000030  2000              MOVS     r0,#0
                  |L42.50|
000032  b950              CBNZ     r0,|L42.74|
000034  bf00              NOP      
000036  2050              MOVS     r0,#0x50
000038  f3808811          MSR      BASEPRI,r0
00003c  f3bf8f4f          DSB      
000040  f3bf8f6f          ISB      
000044  bf00              NOP      
000046  bf00              NOP      
                  |L42.72|
000048  e7fe              B        |L42.72|
                  |L42.74|
00004a  eb010281          ADD      r2,r1,r1,LSL #2
00004e  4b0d              LDR      r3,|L42.132|
000050  eb030082          ADD      r0,r3,r2,LSL #2
000054  6842              LDR      r2,[r0,#4]
000056  6852              LDR      r2,[r2,#4]
000058  6042              STR      r2,[r0,#4]
00005a  f1000208          ADD      r2,r0,#8
00005e  6843              LDR      r3,[r0,#4]
000060  4293              CMP      r3,r2
000062  d102              BNE      |L42.106|
000064  6842              LDR      r2,[r0,#4]
000066  6852              LDR      r2,[r2,#4]
000068  6042              STR      r2,[r0,#4]
                  |L42.106|
00006a  6842              LDR      r2,[r0,#4]
00006c  68d2              LDR      r2,[r2,#0xc]
00006e  4b06              LDR      r3,|L42.136|
000070  601a              STR      r2,[r3,#0]  ; pxCurrentTCB
000072  bf00              NOP      
                  |L42.116|
;;;3000   		traceTASK_SWITCHED_IN();
;;;3001   
;;;3002   		/* After the new task is switched in, update the global errno. */
;;;3003   		#if( configUSE_POSIX_ERRNO == 1 )
;;;3004   		{
;;;3005   			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
;;;3006   		}
;;;3007   		#endif
;;;3008   
;;;3009   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;3010   		{
;;;3011   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;3012   			structure specific to this task. */
;;;3013   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;3014   		}
;;;3015   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;3016   	}
;;;3017   }
000074  4770              BX       lr
;;;3018   /*-----------------------------------------------------------*/
                          ENDP

000076  0000              DCW      0x0000
                  |L42.120|
                          DCD      uxSchedulerSuspended
                  |L42.124|
                          DCD      xYieldPending
                  |L42.128|
                          DCD      uxTopReadyPriority
                  |L42.132|
                          DCD      pxReadyTasksLists
                  |L42.136|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskCheckForTimeOut||, CODE, READONLY, ALIGN=2

                  xTaskCheckForTimeOut PROC
;;;3215   
;;;3216   BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;3217   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3218   BaseType_t xReturn;
;;;3219   
;;;3220   	configASSERT( pxTimeOut );
000006  b955              CBNZ     r5,|L43.30|
000008  bf00              NOP      
00000a  2050              MOVS     r0,#0x50
00000c  f3808811          MSR      BASEPRI,r0
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L43.28|
00001c  e7fe              B        |L43.28|
                  |L43.30|
;;;3221   	configASSERT( pxTicksToWait );
00001e  b954              CBNZ     r4,|L43.54|
000020  bf00              NOP      
000022  2050              MOVS     r0,#0x50
000024  f3808811          MSR      BASEPRI,r0
000028  f3bf8f4f          DSB      
00002c  f3bf8f6f          ISB      
000030  bf00              NOP      
000032  bf00              NOP      
                  |L43.52|
000034  e7fe              B        |L43.52|
                  |L43.54|
;;;3222   
;;;3223   	taskENTER_CRITICAL();
000036  f7fffffe          BL       vPortEnterCritical
;;;3224   	{
;;;3225   		/* Minor optimisation.  The tick count cannot change in this block. */
;;;3226   		const TickType_t xConstTickCount = xTickCount;
00003a  4812              LDR      r0,|L43.132|
00003c  6802              LDR      r2,[r0,#0]  ; xTickCount
;;;3227   		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
00003e  6868              LDR      r0,[r5,#4]
000040  1a13              SUBS     r3,r2,r0
;;;3228   
;;;3229   		#if( INCLUDE_xTaskAbortDelay == 1 )
;;;3230   			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
;;;3231   			{
;;;3232   				/* The delay was aborted, which is not the same as a time out,
;;;3233   				but has the same result. */
;;;3234   				pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;3235   				xReturn = pdTRUE;
;;;3236   			}
;;;3237   			else
;;;3238   		#endif
;;;3239   
;;;3240   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;3241   			if( *pxTicksToWait == portMAX_DELAY )
000042  6820              LDR      r0,[r4,#0]
000044  1c40              ADDS     r0,r0,#1
000046  b908              CBNZ     r0,|L43.76|
;;;3242   			{
;;;3243   				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
;;;3244   				specified is the maximum block time then the task should block
;;;3245   				indefinitely, and therefore never time out. */
;;;3246   				xReturn = pdFALSE;
000048  2600              MOVS     r6,#0
00004a  e017              B        |L43.124|
                  |L43.76|
;;;3247   			}
;;;3248   			else
;;;3249   		#endif
;;;3250   
;;;3251   		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
00004c  490e              LDR      r1,|L43.136|
00004e  6828              LDR      r0,[r5,#0]
000050  6809              LDR      r1,[r1,#0]  ; xNumOfOverflows
000052  4288              CMP      r0,r1
000054  d004              BEQ      |L43.96|
000056  6868              LDR      r0,[r5,#4]
000058  4290              CMP      r0,r2
00005a  d801              BHI      |L43.96|
;;;3252   		{
;;;3253   			/* The tick count is greater than the time at which
;;;3254   			vTaskSetTimeout() was called, but has also overflowed since
;;;3255   			vTaskSetTimeOut() was called.  It must have wrapped all the way
;;;3256   			around and gone past again. This passed since vTaskSetTimeout()
;;;3257   			was called. */
;;;3258   			xReturn = pdTRUE;
00005c  2601              MOVS     r6,#1
00005e  e00d              B        |L43.124|
                  |L43.96|
;;;3259   		}
;;;3260   		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
000060  6820              LDR      r0,[r4,#0]
000062  4298              CMP      r0,r3
000064  d907              BLS      |L43.118|
;;;3261   		{
;;;3262   			/* Not a genuine timeout. Adjust parameters for time remaining. */
;;;3263   			*pxTicksToWait -= xElapsedTime;
000066  6820              LDR      r0,[r4,#0]
000068  1ac0              SUBS     r0,r0,r3
00006a  6020              STR      r0,[r4,#0]
;;;3264   			vTaskInternalSetTimeOutState( pxTimeOut );
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       vTaskInternalSetTimeOutState
;;;3265   			xReturn = pdFALSE;
000072  2600              MOVS     r6,#0
000074  e002              B        |L43.124|
                  |L43.118|
;;;3266   		}
;;;3267   		else
;;;3268   		{
;;;3269   			*pxTicksToWait = 0;
000076  2000              MOVS     r0,#0
000078  6020              STR      r0,[r4,#0]
;;;3270   			xReturn = pdTRUE;
00007a  2601              MOVS     r6,#1
                  |L43.124|
;;;3271   		}
;;;3272   	}
;;;3273   	taskEXIT_CRITICAL();
00007c  f7fffffe          BL       vPortExitCritical
;;;3274   
;;;3275   	return xReturn;
000080  4630              MOV      r0,r6
;;;3276   }
000082  bd70              POP      {r4-r6,pc}
;;;3277   /*-----------------------------------------------------------*/
                          ENDP

                  |L43.132|
                          DCD      xTickCount
                  |L43.136|
                          DCD      xNumOfOverflows

                          AREA ||i.xTaskCreate||, CODE, READONLY, ALIGN=1

                  xTaskCreate PROC
;;;729    
;;;730    	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;731    							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;732    							const configSTACK_DEPTH_TYPE usStackDepth,
;;;733    							void * const pvParameters,
;;;734    							UBaseType_t uxPriority,
;;;735    							TaskHandle_t * const pxCreatedTask )
;;;736    	{
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4617              MOV      r7,r2
00000c  e9ddab12          LDRD     r10,r11,[sp,#0x48]
;;;737    	TCB_t *pxNewTCB;
;;;738    	BaseType_t xReturn;
;;;739    
;;;740    		/* If the stack grows down then allocate the stack then the TCB so the stack
;;;741    		does not grow into the TCB.  Likewise if the stack grows up then allocate
;;;742    		the TCB then the stack. */
;;;743    		#if( portSTACK_GROWTH > 0 )
;;;744    		{
;;;745    			/* Allocate space for the TCB.  Where the memory comes from depends on
;;;746    			the implementation of the port malloc function and whether or not static
;;;747    			allocation is being used. */
;;;748    			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
;;;749    
;;;750    			if( pxNewTCB != NULL )
;;;751    			{
;;;752    				/* Allocate space for the stack used by the task being created.
;;;753    				The base of the stack memory stored in the TCB so the task can
;;;754    				be deleted later if required. */
;;;755    				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;756    
;;;757    				if( pxNewTCB->pxStack == NULL )
;;;758    				{
;;;759    					/* Could not allocate the stack.  Delete the allocated TCB. */
;;;760    					vPortFree( pxNewTCB );
;;;761    					pxNewTCB = NULL;
;;;762    				}
;;;763    			}
;;;764    		}
;;;765    		#else /* portSTACK_GROWTH */
;;;766    		{
;;;767    		StackType_t *pxStack;
;;;768    
;;;769    			/* Allocate space for the stack used by the task being created. */
;;;770    			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
000010  00b8              LSLS     r0,r7,#2
000012  f7fffffe          BL       pvPortMalloc
000016  4606              MOV      r6,r0
;;;771    
;;;772    			if( pxStack != NULL )
000018  b156              CBZ      r6,|L44.48|
;;;773    			{
;;;774    				/* Allocate space for the TCB. */
;;;775    				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
00001a  2060              MOVS     r0,#0x60
00001c  f7fffffe          BL       pvPortMalloc
000020  4604              MOV      r4,r0
;;;776    
;;;777    				if( pxNewTCB != NULL )
000022  b10c              CBZ      r4,|L44.40|
;;;778    				{
;;;779    					/* Store the stack location in the TCB. */
;;;780    					pxNewTCB->pxStack = pxStack;
000024  6326              STR      r6,[r4,#0x30]
000026  e004              B        |L44.50|
                  |L44.40|
;;;781    				}
;;;782    				else
;;;783    				{
;;;784    					/* The stack cannot be used as the TCB was not created.  Free
;;;785    					it again. */
;;;786    					vPortFree( pxStack );
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       vPortFree
00002e  e000              B        |L44.50|
                  |L44.48|
;;;787    				}
;;;788    			}
;;;789    			else
;;;790    			{
;;;791    				pxNewTCB = NULL;
000030  2400              MOVS     r4,#0
                  |L44.50|
;;;792    			}
;;;793    		}
;;;794    		#endif /* portSTACK_GROWTH */
;;;795    
;;;796    		if( pxNewTCB != NULL )
000032  b17c              CBZ      r4,|L44.84|
;;;797    		{
;;;798    			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
;;;799    			{
;;;800    				/* Tasks can be created statically or dynamically, so note this
;;;801    				task was created dynamically in case it is later deleted. */
;;;802    				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
;;;803    			}
;;;804    			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
;;;805    
;;;806    			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
000034  2000              MOVS     r0,#0
000036  e9cdab00          STRD     r10,r11,[sp,#0]
00003a  e9cd4002          STRD     r4,r0,[sp,#8]
00003e  463a              MOV      r2,r7
000040  4649              MOV      r1,r9
000042  4640              MOV      r0,r8
000044  9b08              LDR      r3,[sp,#0x20]
000046  f7fffffe          BL       prvInitialiseNewTask
;;;807    			prvAddNewTaskToReadyList( pxNewTCB );
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       prvAddNewTaskToReadyList
;;;808    			xReturn = pdPASS;
000050  2501              MOVS     r5,#1
000052  e001              B        |L44.88|
                  |L44.84|
;;;809    		}
;;;810    		else
;;;811    		{
;;;812    			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
000054  f04f35ff          MOV      r5,#0xffffffff
                  |L44.88|
;;;813    		}
;;;814    
;;;815    		return xReturn;
000058  4628              MOV      r0,r5
;;;816    	}
00005a  b009              ADD      sp,sp,#0x24
00005c  e8bd8ff0          POP      {r4-r11,pc}
;;;817    
                          ENDP


                          AREA ||i.xTaskGenericNotify||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotify PROC
;;;4713   
;;;4714   	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4715   	{
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;4716   	TCB_t * pxTCB;
;;;4717   	BaseType_t xReturn = pdPASS;
00000c  f04f0a01          MOV      r10,#1
;;;4718   	uint8_t ucOriginalNotifyState;
;;;4719   
;;;4720   		configASSERT( xTaskToNotify );
000010  b956              CBNZ     r6,|L45.40|
000012  bf00              NOP      
000014  2050              MOVS     r0,#0x50
000016  f3808811          MSR      BASEPRI,r0
00001a  f3bf8f4f          DSB      
00001e  f3bf8f6f          ISB      
000022  bf00              NOP      
000024  bf00              NOP      
                  |L45.38|
000026  e7fe              B        |L45.38|
                  |L45.40|
;;;4721   		pxTCB = xTaskToNotify;
000028  4634              MOV      r4,r6
;;;4722   
;;;4723   		taskENTER_CRITICAL();
00002a  f7fffffe          BL       vPortEnterCritical
;;;4724   		{
;;;4725   			if( pulPreviousNotificationValue != NULL )
00002e  f1b80f00          CMP      r8,#0
000032  d002              BEQ      |L45.58|
;;;4726   			{
;;;4727   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000034  6da0              LDR      r0,[r4,#0x58]
000036  f8c80000          STR      r0,[r8,#0]
                  |L45.58|
;;;4728   			}
;;;4729   
;;;4730   			ucOriginalNotifyState = pxTCB->ucNotifyState;
00003a  f894905c          LDRB     r9,[r4,#0x5c]
;;;4731   
;;;4732   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
00003e  2002              MOVS     r0,#2
000040  f884005c          STRB     r0,[r4,#0x5c]
;;;4733   
;;;4734   			switch( eAction )
000044  2f05              CMP      r7,#5
000046  d217              BCS      |L45.120|
000048  e8dff007          TBB      [pc,r7]
00004c  1503070b          DCB      0x15,0x03,0x07,0x0b
000050  0d00              DCB      0x0d,0x00
;;;4735   			{
;;;4736   				case eSetBits	:
;;;4737   					pxTCB->ulNotifiedValue |= ulValue;
000052  6da0              LDR      r0,[r4,#0x58]
000054  4328              ORRS     r0,r0,r5
000056  65a0              STR      r0,[r4,#0x58]
;;;4738   					break;
000058  e021              B        |L45.158|
;;;4739   
;;;4740   				case eIncrement	:
;;;4741   					( pxTCB->ulNotifiedValue )++;
00005a  6da0              LDR      r0,[r4,#0x58]
00005c  1c40              ADDS     r0,r0,#1
00005e  65a0              STR      r0,[r4,#0x58]
;;;4742   					break;
000060  e01d              B        |L45.158|
;;;4743   
;;;4744   				case eSetValueWithOverwrite	:
;;;4745   					pxTCB->ulNotifiedValue = ulValue;
000062  65a5              STR      r5,[r4,#0x58]
;;;4746   					break;
000064  e01b              B        |L45.158|
;;;4747   
;;;4748   				case eSetValueWithoutOverwrite :
;;;4749   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
000066  f1b90f02          CMP      r9,#2
00006a  d001              BEQ      |L45.112|
;;;4750   					{
;;;4751   						pxTCB->ulNotifiedValue = ulValue;
00006c  65a5              STR      r5,[r4,#0x58]
00006e  e001              B        |L45.116|
                  |L45.112|
;;;4752   					}
;;;4753   					else
;;;4754   					{
;;;4755   						/* The value could not be written to the task. */
;;;4756   						xReturn = pdFAIL;
000070  f04f0a00          MOV      r10,#0
                  |L45.116|
;;;4757   					}
;;;4758   					break;
000074  e013              B        |L45.158|
;;;4759   
;;;4760   				case eNoAction:
;;;4761   					/* The task is being notified without its notify value being
;;;4762   					updated. */
;;;4763   					break;
000076  e012              B        |L45.158|
                  |L45.120|
;;;4764   
;;;4765   				default:
;;;4766   					/* Should not get here if all enums are handled.
;;;4767   					Artificially force an assert by testing a value the
;;;4768   					compiler can't assume is const. */
;;;4769   					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
000078  6da0              LDR      r0,[r4,#0x58]
00007a  1c40              ADDS     r0,r0,#1
00007c  b908              CBNZ     r0,|L45.130|
00007e  2001              MOVS     r0,#1
000080  e000              B        |L45.132|
                  |L45.130|
000082  2000              MOVS     r0,#0
                  |L45.132|
000084  b950              CBNZ     r0,|L45.156|
000086  bf00              NOP      
000088  2050              MOVS     r0,#0x50
00008a  f3808811          MSR      BASEPRI,r0
00008e  f3bf8f4f          DSB      
000092  f3bf8f6f          ISB      
000096  bf00              NOP      
000098  bf00              NOP      
                  |L45.154|
00009a  e7fe              B        |L45.154|
                  |L45.156|
;;;4770   
;;;4771   					break;
00009c  bf00              NOP      
                  |L45.158|
00009e  bf00              NOP                            ;4738
;;;4772   			}
;;;4773   
;;;4774   			traceTASK_NOTIFY();
;;;4775   
;;;4776   			/* If the task is in the blocked state specifically to wait for a
;;;4777   			notification then unblock it now. */
;;;4778   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
0000a0  f1b90f01          CMP      r9,#1
0000a4  d133              BNE      |L45.270|
;;;4779   			{
;;;4780   				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
0000a6  1d20              ADDS     r0,r4,#4
0000a8  f7fffffe          BL       uxListRemove
;;;4781   				prvAddTaskToReadyList( pxTCB );
0000ac  f894102c          LDRB     r1,[r4,#0x2c]
0000b0  2001              MOVS     r0,#1
0000b2  4088              LSLS     r0,r0,r1
0000b4  4918              LDR      r1,|L45.280|
0000b6  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000b8  4308              ORRS     r0,r0,r1
0000ba  4917              LDR      r1,|L45.280|
0000bc  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000be  6ae1              LDR      r1,[r4,#0x2c]
0000c0  eb010181          ADD      r1,r1,r1,LSL #2
0000c4  4a15              LDR      r2,|L45.284|
0000c6  eb020081          ADD      r0,r2,r1,LSL #2
0000ca  1d21              ADDS     r1,r4,#4
0000cc  f7fffffe          BL       vListInsertEnd
;;;4782   
;;;4783   				/* The task should not have been on an event list. */
;;;4784   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
0000d0  6aa0              LDR      r0,[r4,#0x28]
0000d2  b908              CBNZ     r0,|L45.216|
0000d4  2001              MOVS     r0,#1
0000d6  e000              B        |L45.218|
                  |L45.216|
0000d8  2000              MOVS     r0,#0
                  |L45.218|
0000da  b950              CBNZ     r0,|L45.242|
0000dc  bf00              NOP      
0000de  2050              MOVS     r0,#0x50
0000e0  f3808811          MSR      BASEPRI,r0
0000e4  f3bf8f4f          DSB      
0000e8  f3bf8f6f          ISB      
0000ec  bf00              NOP      
0000ee  bf00              NOP      
                  |L45.240|
0000f0  e7fe              B        |L45.240|
                  |L45.242|
;;;4785   
;;;4786   				#if( configUSE_TICKLESS_IDLE != 0 )
;;;4787   				{
;;;4788   					/* If a task is blocked waiting for a notification then
;;;4789   					xNextTaskUnblockTime might be set to the blocked task's time
;;;4790   					out time.  If the task is unblocked for a reason other than
;;;4791   					a timeout xNextTaskUnblockTime is normally left unchanged,
;;;4792   					because it will automatically get reset to a new value when
;;;4793   					the tick count equals xNextTaskUnblockTime.  However if
;;;4794   					tickless idling is used it might be more important to enter
;;;4795   					sleep mode at the earliest possible time - so reset
;;;4796   					xNextTaskUnblockTime here to ensure it is updated at the
;;;4797   					earliest possible time. */
;;;4798   					prvResetNextTaskUnblockTime();
;;;4799   				}
;;;4800   				#endif
;;;4801   
;;;4802   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
0000f2  490b              LDR      r1,|L45.288|
0000f4  6ae0              LDR      r0,[r4,#0x2c]
0000f6  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000f8  6ac9              LDR      r1,[r1,#0x2c]
0000fa  4288              CMP      r0,r1
0000fc  d907              BLS      |L45.270|
;;;4803   				{
;;;4804   					/* The notified task has a priority above the currently
;;;4805   					executing task so a yield is required. */
;;;4806   					taskYIELD_IF_USING_PREEMPTION();
0000fe  f04f5080          MOV      r0,#0x10000000
000102  4908              LDR      r1,|L45.292|
000104  6008              STR      r0,[r1,#0]
000106  f3bf8f4f          DSB      
00010a  f3bf8f6f          ISB      
                  |L45.270|
;;;4807   				}
;;;4808   				else
;;;4809   				{
;;;4810   					mtCOVERAGE_TEST_MARKER();
;;;4811   				}
;;;4812   			}
;;;4813   			else
;;;4814   			{
;;;4815   				mtCOVERAGE_TEST_MARKER();
;;;4816   			}
;;;4817   		}
;;;4818   		taskEXIT_CRITICAL();
00010e  f7fffffe          BL       vPortExitCritical
;;;4819   
;;;4820   		return xReturn;
000112  4650              MOV      r0,r10
;;;4821   	}
000114  e8bd87f0          POP      {r4-r10,pc}
;;;4822   
                          ENDP

                  |L45.280|
                          DCD      uxTopReadyPriority
                  |L45.284|
                          DCD      pxReadyTasksLists
                  |L45.288|
                          DCD      pxCurrentTCB
                  |L45.292|
                          DCD      0xe000ed04

                          AREA ||i.xTaskGenericNotifyFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotifyFromISR PROC
;;;4827   
;;;4828   	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;4829   	{
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;4830   	TCB_t * pxTCB;
;;;4831   	uint8_t ucOriginalNotifyState;
;;;4832   	BaseType_t xReturn = pdPASS;
000010  2001              MOVS     r0,#1
000012  9000              STR      r0,[sp,#0]
;;;4833   	UBaseType_t uxSavedInterruptStatus;
;;;4834   
;;;4835   		configASSERT( xTaskToNotify );
000014  b957              CBNZ     r7,|L46.44|
000016  bf00              NOP      
000018  2050              MOVS     r0,#0x50
00001a  f3808811          MSR      BASEPRI,r0
00001e  f3bf8f4f          DSB      
000022  f3bf8f6f          ISB      
000026  bf00              NOP      
000028  bf00              NOP      
                  |L46.42|
00002a  e7fe              B        |L46.42|
                  |L46.44|
;;;4836   
;;;4837   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4838   		maximum	system call (or maximum API call) interrupt priority.
;;;4839   		Interrupts that are	above the maximum system call priority are keep
;;;4840   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4841   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4842   		is defined in FreeRTOSConfig.h then
;;;4843   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4844   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4845   		been assigned a priority above the configured maximum system call
;;;4846   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4847   		from interrupts	that have been assigned a priority at or (logically)
;;;4848   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4849   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4850   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4851   		provided on the following link:
;;;4852   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4853   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
00002c  f7fffffe          BL       vPortValidateInterruptPriority
;;;4854   
;;;4855   		pxTCB = xTaskToNotify;
000030  463c              MOV      r4,r7
;;;4856   
;;;4857   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000032  bf00              NOP      
000034  2150              MOVS     r1,#0x50
000036  f3ef8011          MRS      r0,BASEPRI
00003a  f3818811          MSR      BASEPRI,r1
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
000046  bf00              NOP      
000048  4605              MOV      r5,r0
;;;4858   		{
;;;4859   			if( pulPreviousNotificationValue != NULL )
00004a  f1b90f00          CMP      r9,#0
00004e  d002              BEQ      |L46.86|
;;;4860   			{
;;;4861   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000050  6da0              LDR      r0,[r4,#0x58]
000052  f8c90000          STR      r0,[r9,#0]
                  |L46.86|
;;;4862   			}
;;;4863   
;;;4864   			ucOriginalNotifyState = pxTCB->ucNotifyState;
000056  f894a05c          LDRB     r10,[r4,#0x5c]
;;;4865   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
00005a  2002              MOVS     r0,#2
00005c  f884005c          STRB     r0,[r4,#0x5c]
;;;4866   
;;;4867   			switch( eAction )
000060  f1b80f05          CMP      r8,#5
000064  d217              BCS      |L46.150|
000066  e8dff008          TBB      [pc,r8]
00006a  1503              DCB      0x15,0x03
00006c  070b0d00          DCB      0x07,0x0b,0x0d,0x00
;;;4868   			{
;;;4869   				case eSetBits	:
;;;4870   					pxTCB->ulNotifiedValue |= ulValue;
000070  6da0              LDR      r0,[r4,#0x58]
000072  4330              ORRS     r0,r0,r6
000074  65a0              STR      r0,[r4,#0x58]
;;;4871   					break;
000076  e021              B        |L46.188|
;;;4872   
;;;4873   				case eIncrement	:
;;;4874   					( pxTCB->ulNotifiedValue )++;
000078  6da0              LDR      r0,[r4,#0x58]
00007a  1c40              ADDS     r0,r0,#1
00007c  65a0              STR      r0,[r4,#0x58]
;;;4875   					break;
00007e  e01d              B        |L46.188|
;;;4876   
;;;4877   				case eSetValueWithOverwrite	:
;;;4878   					pxTCB->ulNotifiedValue = ulValue;
000080  65a6              STR      r6,[r4,#0x58]
;;;4879   					break;
000082  e01b              B        |L46.188|
;;;4880   
;;;4881   				case eSetValueWithoutOverwrite :
;;;4882   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
000084  f1ba0f02          CMP      r10,#2
000088  d001              BEQ      |L46.142|
;;;4883   					{
;;;4884   						pxTCB->ulNotifiedValue = ulValue;
00008a  65a6              STR      r6,[r4,#0x58]
00008c  e001              B        |L46.146|
                  |L46.142|
;;;4885   					}
;;;4886   					else
;;;4887   					{
;;;4888   						/* The value could not be written to the task. */
;;;4889   						xReturn = pdFAIL;
00008e  2000              MOVS     r0,#0
000090  9000              STR      r0,[sp,#0]
                  |L46.146|
;;;4890   					}
;;;4891   					break;
000092  e013              B        |L46.188|
;;;4892   
;;;4893   				case eNoAction :
;;;4894   					/* The task is being notified without its notify value being
;;;4895   					updated. */
;;;4896   					break;
000094  e012              B        |L46.188|
                  |L46.150|
;;;4897   
;;;4898   				default:
;;;4899   					/* Should not get here if all enums are handled.
;;;4900   					Artificially force an assert by testing a value the
;;;4901   					compiler can't assume is const. */
;;;4902   					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
000096  6da0              LDR      r0,[r4,#0x58]
000098  1c40              ADDS     r0,r0,#1
00009a  b908              CBNZ     r0,|L46.160|
00009c  2001              MOVS     r0,#1
00009e  e000              B        |L46.162|
                  |L46.160|
0000a0  2000              MOVS     r0,#0
                  |L46.162|
0000a2  b950              CBNZ     r0,|L46.186|
0000a4  bf00              NOP      
0000a6  2050              MOVS     r0,#0x50
0000a8  f3808811          MSR      BASEPRI,r0
0000ac  f3bf8f4f          DSB      
0000b0  f3bf8f6f          ISB      
0000b4  bf00              NOP      
0000b6  bf00              NOP      
                  |L46.184|
0000b8  e7fe              B        |L46.184|
                  |L46.186|
;;;4903   					break;
0000ba  bf00              NOP      
                  |L46.188|
0000bc  bf00              NOP                            ;4871
;;;4904   			}
;;;4905   
;;;4906   			traceTASK_NOTIFY_FROM_ISR();
;;;4907   
;;;4908   			/* If the task is in the blocked state specifically to wait for a
;;;4909   			notification then unblock it now. */
;;;4910   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
0000be  f1ba0f01          CMP      r10,#1
0000c2  d13d              BNE      |L46.320|
;;;4911   			{
;;;4912   				/* The task should not have been on an event list. */
;;;4913   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
0000c4  6aa0              LDR      r0,[r4,#0x28]
0000c6  b908              CBNZ     r0,|L46.204|
0000c8  2001              MOVS     r0,#1
0000ca  e000              B        |L46.206|
                  |L46.204|
0000cc  2000              MOVS     r0,#0
                  |L46.206|
0000ce  b950              CBNZ     r0,|L46.230|
0000d0  bf00              NOP      
0000d2  2050              MOVS     r0,#0x50
0000d4  f3808811          MSR      BASEPRI,r0
0000d8  f3bf8f4f          DSB      
0000dc  f3bf8f6f          ISB      
0000e0  bf00              NOP      
0000e2  bf00              NOP      
                  |L46.228|
0000e4  e7fe              B        |L46.228|
                  |L46.230|
;;;4914   
;;;4915   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
0000e6  481a              LDR      r0,|L46.336|
0000e8  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
0000ea  b9a8              CBNZ     r0,|L46.280|
;;;4916   				{
;;;4917   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
0000ec  1d20              ADDS     r0,r4,#4
0000ee  f7fffffe          BL       uxListRemove
;;;4918   					prvAddTaskToReadyList( pxTCB );
0000f2  f894102c          LDRB     r1,[r4,#0x2c]
0000f6  2001              MOVS     r0,#1
0000f8  4088              LSLS     r0,r0,r1
0000fa  4916              LDR      r1,|L46.340|
0000fc  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000fe  4308              ORRS     r0,r0,r1
000100  4914              LDR      r1,|L46.340|
000102  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000104  6ae1              LDR      r1,[r4,#0x2c]
000106  eb010181          ADD      r1,r1,r1,LSL #2
00010a  4a13              LDR      r2,|L46.344|
00010c  eb020081          ADD      r0,r2,r1,LSL #2
000110  1d21              ADDS     r1,r4,#4
000112  f7fffffe          BL       vListInsertEnd
000116  e004              B        |L46.290|
                  |L46.280|
;;;4919   				}
;;;4920   				else
;;;4921   				{
;;;4922   					/* The delayed and ready lists cannot be accessed, so hold
;;;4923   					this task pending until the scheduler is resumed. */
;;;4924   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000118  f1040118          ADD      r1,r4,#0x18
00011c  480f              LDR      r0,|L46.348|
00011e  f7fffffe          BL       vListInsertEnd
                  |L46.290|
;;;4925   				}
;;;4926   
;;;4927   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000122  490f              LDR      r1,|L46.352|
000124  6ae0              LDR      r0,[r4,#0x2c]
000126  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000128  6ac9              LDR      r1,[r1,#0x2c]
00012a  4288              CMP      r0,r1
00012c  d908              BLS      |L46.320|
;;;4928   				{
;;;4929   					/* The notified task has a priority above the currently
;;;4930   					executing task so a yield is required. */
;;;4931   					if( pxHigherPriorityTaskWoken != NULL )
00012e  f1bb0f00          CMP      r11,#0
000132  d002              BEQ      |L46.314|
;;;4932   					{
;;;4933   						*pxHigherPriorityTaskWoken = pdTRUE;
000134  2001              MOVS     r0,#1
000136  f8cb0000          STR      r0,[r11,#0]
                  |L46.314|
;;;4934   					}
;;;4935   
;;;4936   					/* Mark that a yield is pending in case the user is not
;;;4937   					using the "xHigherPriorityTaskWoken" parameter to an ISR
;;;4938   					safe FreeRTOS function. */
;;;4939   					xYieldPending = pdTRUE;
00013a  2001              MOVS     r0,#1
00013c  4909              LDR      r1,|L46.356|
00013e  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L46.320|
;;;4940   				}
;;;4941   				else
;;;4942   				{
;;;4943   					mtCOVERAGE_TEST_MARKER();
;;;4944   				}
;;;4945   			}
;;;4946   		}
;;;4947   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000140  bf00              NOP      
000142  f3858811          MSR      BASEPRI,r5
000146  bf00              NOP      
;;;4948   
;;;4949   		return xReturn;
000148  9800              LDR      r0,[sp,#0]
;;;4950   	}
00014a  e8bd8ff8          POP      {r3-r11,pc}
;;;4951   
                          ENDP

00014e  0000              DCW      0x0000
                  |L46.336|
                          DCD      uxSchedulerSuspended
                  |L46.340|
                          DCD      uxTopReadyPriority
                  |L46.344|
                          DCD      pxReadyTasksLists
                  |L46.348|
                          DCD      xPendingReadyList
                  |L46.352|
                          DCD      pxCurrentTCB
                  |L46.356|
                          DCD      xYieldPending

                          AREA ||i.xTaskGetCurrentTaskHandle||, CODE, READONLY, ALIGN=2

                  xTaskGetCurrentTaskHandle PROC
;;;3905   
;;;3906   	TaskHandle_t xTaskGetCurrentTaskHandle( void )
000000  4901              LDR      r1,|L47.8|
;;;3907   	{
;;;3908   	TaskHandle_t xReturn;
;;;3909   
;;;3910   		/* A critical section is not required as this is not called from
;;;3911   		an interrupt and the current TCB will always be the same for any
;;;3912   		individual execution thread. */
;;;3913   		xReturn = pxCurrentTCB;
000002  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;3914   
;;;3915   		return xReturn;
;;;3916   	}
000004  4770              BX       lr
;;;3917   
                          ENDP

000006  0000              DCW      0x0000
                  |L47.8|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskGetSchedulerState||, CODE, READONLY, ALIGN=2

                  xTaskGetSchedulerState PROC
;;;3922   
;;;3923   	BaseType_t xTaskGetSchedulerState( void )
000000  4905              LDR      r1,|L48.24|
;;;3924   	{
;;;3925   	BaseType_t xReturn;
;;;3926   
;;;3927   		if( xSchedulerRunning == pdFALSE )
000002  6809              LDR      r1,[r1,#0]  ; xSchedulerRunning
000004  b909              CBNZ     r1,|L48.10|
;;;3928   		{
;;;3929   			xReturn = taskSCHEDULER_NOT_STARTED;
000006  2001              MOVS     r0,#1
000008  e005              B        |L48.22|
                  |L48.10|
;;;3930   		}
;;;3931   		else
;;;3932   		{
;;;3933   			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00000a  4904              LDR      r1,|L48.28|
00000c  6809              LDR      r1,[r1,#0]  ; uxSchedulerSuspended
00000e  b909              CBNZ     r1,|L48.20|
;;;3934   			{
;;;3935   				xReturn = taskSCHEDULER_RUNNING;
000010  2002              MOVS     r0,#2
000012  e000              B        |L48.22|
                  |L48.20|
;;;3936   			}
;;;3937   			else
;;;3938   			{
;;;3939   				xReturn = taskSCHEDULER_SUSPENDED;
000014  2000              MOVS     r0,#0
                  |L48.22|
;;;3940   			}
;;;3941   		}
;;;3942   
;;;3943   		return xReturn;
;;;3944   	}
000016  4770              BX       lr
;;;3945   
                          ENDP

                  |L48.24|
                          DCD      xSchedulerRunning
                  |L48.28|
                          DCD      uxSchedulerSuspended

                          AREA ||i.xTaskGetTickCount||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCount PROC
;;;2283   
;;;2284   TickType_t xTaskGetTickCount( void )
000000  4901              LDR      r1,|L49.8|
;;;2285   {
;;;2286   TickType_t xTicks;
;;;2287   
;;;2288   	/* Critical section required if running on a 16 bit processor. */
;;;2289   	portTICK_TYPE_ENTER_CRITICAL();
;;;2290   	{
;;;2291   		xTicks = xTickCount;
000002  6808              LDR      r0,[r1,#0]  ; xTickCount
;;;2292   	}
;;;2293   	portTICK_TYPE_EXIT_CRITICAL();
;;;2294   
;;;2295   	return xTicks;
;;;2296   }
000004  4770              BX       lr
;;;2297   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L49.8|
                          DCD      xTickCount

                          AREA ||i.xTaskGetTickCountFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCountFromISR PROC
;;;2298   
;;;2299   TickType_t xTaskGetTickCountFromISR( void )
000000  b570              PUSH     {r4-r6,lr}
;;;2300   {
;;;2301   TickType_t xReturn;
;;;2302   UBaseType_t uxSavedInterruptStatus;
;;;2303   
;;;2304   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;2305   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;2306   	above the maximum system call priority are kept permanently enabled, even
;;;2307   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;2308   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;2309   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;2310   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;2311   	assigned a priority above the configured maximum system call priority.
;;;2312   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;2313   	that have been assigned a priority at or (logically) below the maximum
;;;2314   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;2315   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;2316   	More information (albeit Cortex-M specific) is provided on the following
;;;2317   	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;2318   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000002  f7fffffe          BL       vPortValidateInterruptPriority
;;;2319   
;;;2320   	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
000006  2500              MOVS     r5,#0
;;;2321   	{
;;;2322   		xReturn = xTickCount;
000008  4801              LDR      r0,|L50.16|
00000a  6804              LDR      r4,[r0,#0]  ; xTickCount
;;;2323   	}
;;;2324   	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;2325   
;;;2326   	return xReturn;
00000c  4620              MOV      r0,r4
;;;2327   }
00000e  bd70              POP      {r4-r6,pc}
;;;2328   /*-----------------------------------------------------------*/
                          ENDP

                  |L50.16|
                          DCD      xTickCount

                          AREA ||i.xTaskIncrementTick||, CODE, READONLY, ALIGN=2

                  xTaskIncrementTick PROC
;;;2664   
;;;2665   BaseType_t xTaskIncrementTick( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2666   {
;;;2667   TCB_t * pxTCB;
;;;2668   TickType_t xItemValue;
;;;2669   BaseType_t xSwitchRequired = pdFALSE;
000004  f04f0800          MOV      r8,#0
;;;2670   
;;;2671   	/* Called by the portable layer each time a tick interrupt occurs.
;;;2672   	Increments the tick then checks to see if the new tick value will cause any
;;;2673   	tasks to be unblocked. */
;;;2674   	traceTASK_INCREMENT_TICK( xTickCount );
;;;2675   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000008  4844              LDR      r0,|L51.284|
00000a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000c  2800              CMP      r0,#0
00000e  d177              BNE      |L51.256|
;;;2676   	{
;;;2677   		/* Minor optimisation.  The tick count cannot change in this
;;;2678   		block. */
;;;2679   		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
000010  4843              LDR      r0,|L51.288|
000012  6800              LDR      r0,[r0,#0]  ; xTickCount
000014  1c45              ADDS     r5,r0,#1
;;;2680   
;;;2681   		/* Increment the RTOS tick, switching the delayed and overflowed
;;;2682   		delayed lists if it wraps to 0. */
;;;2683   		xTickCount = xConstTickCount;
000016  4842              LDR      r0,|L51.288|
000018  6005              STR      r5,[r0,#0]  ; xTickCount
;;;2684   
;;;2685   		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
00001a  bb15              CBNZ     r5,|L51.98|
;;;2686   		{
;;;2687   			taskSWITCH_DELAYED_LISTS();
00001c  4841              LDR      r0,|L51.292|
00001e  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000020  6800              LDR      r0,[r0,#0]
000022  b908              CBNZ     r0,|L51.40|
000024  2001              MOVS     r0,#1
000026  e000              B        |L51.42|
                  |L51.40|
000028  2000              MOVS     r0,#0
                  |L51.42|
00002a  b950              CBNZ     r0,|L51.66|
00002c  bf00              NOP      
00002e  2050              MOVS     r0,#0x50
000030  f3808811          MSR      BASEPRI,r0
000034  f3bf8f4f          DSB      
000038  f3bf8f6f          ISB      
00003c  bf00              NOP      
00003e  bf00              NOP      
                  |L51.64|
000040  e7fe              B        |L51.64|
                  |L51.66|
000042  4838              LDR      r0,|L51.292|
000044  6807              LDR      r7,[r0,#0]  ; pxDelayedTaskList
000046  4838              LDR      r0,|L51.296|
000048  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedTaskList
00004a  4936              LDR      r1,|L51.292|
00004c  6008              STR      r0,[r1,#0]  ; pxDelayedTaskList
00004e  4836              LDR      r0,|L51.296|
000050  6007              STR      r7,[r0,#0]  ; pxOverflowDelayedTaskList
000052  4836              LDR      r0,|L51.300|
000054  6800              LDR      r0,[r0,#0]  ; xNumOfOverflows
000056  1c40              ADDS     r0,r0,#1
000058  4934              LDR      r1,|L51.300|
00005a  6008              STR      r0,[r1,#0]  ; xNumOfOverflows
00005c  f7fffffe          BL       prvResetNextTaskUnblockTime
000060  bf00              NOP      
                  |L51.98|
;;;2688   		}
;;;2689   		else
;;;2690   		{
;;;2691   			mtCOVERAGE_TEST_MARKER();
;;;2692   		}
;;;2693   
;;;2694   		/* See if this tick has made a timeout expire.  Tasks are stored in
;;;2695   		the	queue in the order of their wake time - meaning once one task
;;;2696   		has been found whose block time has not expired there is no need to
;;;2697   		look any further down the list. */
;;;2698   		if( xConstTickCount >= xNextTaskUnblockTime )
000062  4833              LDR      r0,|L51.304|
000064  6800              LDR      r0,[r0,#0]  ; xNextTaskUnblockTime
000066  4285              CMP      r5,r0
000068  d33c              BCC      |L51.228|
;;;2699   		{
;;;2700   			for( ;; )
00006a  bf00              NOP      
                  |L51.108|
;;;2701   			{
;;;2702   				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
00006c  482d              LDR      r0,|L51.292|
00006e  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000070  6800              LDR      r0,[r0,#0]
000072  b908              CBNZ     r0,|L51.120|
000074  2001              MOVS     r0,#1
000076  e000              B        |L51.122|
                  |L51.120|
000078  2000              MOVS     r0,#0
                  |L51.122|
00007a  b120              CBZ      r0,|L51.134|
;;;2703   				{
;;;2704   					/* The delayed list is empty.  Set xNextTaskUnblockTime
;;;2705   					to the maximum possible value so it is extremely
;;;2706   					unlikely that the
;;;2707   					if( xTickCount >= xNextTaskUnblockTime ) test will pass
;;;2708   					next time through. */
;;;2709   					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00007c  f04f30ff          MOV      r0,#0xffffffff
000080  492b              LDR      r1,|L51.304|
000082  6008              STR      r0,[r1,#0]  ; xNextTaskUnblockTime
;;;2710   					break;
000084  e02d              B        |L51.226|
                  |L51.134|
;;;2711   				}
;;;2712   				else
;;;2713   				{
;;;2714   					/* The delayed list is not empty, get the value of the
;;;2715   					item at the head of the delayed list.  This is the time
;;;2716   					at which the task at the head of the delayed list must
;;;2717   					be removed from the Blocked state. */
;;;2718   					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000086  4827              LDR      r0,|L51.292|
000088  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
00008a  68c0              LDR      r0,[r0,#0xc]
00008c  68c4              LDR      r4,[r0,#0xc]
;;;2719   					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
00008e  6866              LDR      r6,[r4,#4]
;;;2720   
;;;2721   					if( xConstTickCount < xItemValue )
000090  42b5              CMP      r5,r6
000092  d202              BCS      |L51.154|
;;;2722   					{
;;;2723   						/* It is not time to unblock this item yet, but the
;;;2724   						item value is the time at which the task at the head
;;;2725   						of the blocked list must be removed from the Blocked
;;;2726   						state -	so record the item value in
;;;2727   						xNextTaskUnblockTime. */
;;;2728   						xNextTaskUnblockTime = xItemValue;
000094  4826              LDR      r0,|L51.304|
000096  6006              STR      r6,[r0,#0]  ; xNextTaskUnblockTime
;;;2729   						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
000098  e023              B        |L51.226|
                  |L51.154|
;;;2730   					}
;;;2731   					else
;;;2732   					{
;;;2733   						mtCOVERAGE_TEST_MARKER();
;;;2734   					}
;;;2735   
;;;2736   					/* It is time to remove the item from the Blocked state. */
;;;2737   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
00009a  1d20              ADDS     r0,r4,#4
00009c  f7fffffe          BL       uxListRemove
;;;2738   
;;;2739   					/* Is the task waiting on an event also?  If so remove
;;;2740   					it from the event list. */
;;;2741   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
0000a0  6aa0              LDR      r0,[r4,#0x28]
0000a2  b118              CBZ      r0,|L51.172|
;;;2742   					{
;;;2743   						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
0000a4  f1040018          ADD      r0,r4,#0x18
0000a8  f7fffffe          BL       uxListRemove
                  |L51.172|
;;;2744   					}
;;;2745   					else
;;;2746   					{
;;;2747   						mtCOVERAGE_TEST_MARKER();
;;;2748   					}
;;;2749   
;;;2750   					/* Place the unblocked task into the appropriate ready
;;;2751   					list. */
;;;2752   					prvAddTaskToReadyList( pxTCB );
0000ac  f894102c          LDRB     r1,[r4,#0x2c]
0000b0  2001              MOVS     r0,#1
0000b2  4088              LSLS     r0,r0,r1
0000b4  491f              LDR      r1,|L51.308|
0000b6  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000b8  4308              ORRS     r0,r0,r1
0000ba  491e              LDR      r1,|L51.308|
0000bc  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000be  6ae1              LDR      r1,[r4,#0x2c]
0000c0  eb010181          ADD      r1,r1,r1,LSL #2
0000c4  4a1c              LDR      r2,|L51.312|
0000c6  eb020081          ADD      r0,r2,r1,LSL #2
0000ca  1d21              ADDS     r1,r4,#4
0000cc  f7fffffe          BL       vListInsertEnd
;;;2753   
;;;2754   					/* A task being unblocked cannot cause an immediate
;;;2755   					context switch if preemption is turned off. */
;;;2756   					#if (  configUSE_PREEMPTION == 1 )
;;;2757   					{
;;;2758   						/* Preemption is on, but a context switch should
;;;2759   						only be performed if the unblocked task has a
;;;2760   						priority that is equal to or higher than the
;;;2761   						currently executing task. */
;;;2762   						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
0000d0  491a              LDR      r1,|L51.316|
0000d2  6ae0              LDR      r0,[r4,#0x2c]
0000d4  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000d6  6ac9              LDR      r1,[r1,#0x2c]
0000d8  4288              CMP      r0,r1
0000da  d3c7              BCC      |L51.108|
;;;2763   						{
;;;2764   							xSwitchRequired = pdTRUE;
0000dc  f04f0801          MOV      r8,#1
0000e0  e7c4              B        |L51.108|
                  |L51.226|
0000e2  bf00              NOP                            ;2710
                  |L51.228|
;;;2765   						}
;;;2766   						else
;;;2767   						{
;;;2768   							mtCOVERAGE_TEST_MARKER();
;;;2769   						}
;;;2770   					}
;;;2771   					#endif /* configUSE_PREEMPTION */
;;;2772   				}
;;;2773   			}
;;;2774   		}
;;;2775   
;;;2776   		/* Tasks of equal priority to the currently running task will share
;;;2777   		processing time (time slice) if preemption is on, and the application
;;;2778   		writer has not explicitly turned time slicing off. */
;;;2779   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
;;;2780   		{
;;;2781   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
0000e4  4815              LDR      r0,|L51.316|
0000e6  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
0000e8  6ac0              LDR      r0,[r0,#0x2c]
0000ea  eb000080          ADD      r0,r0,r0,LSL #2
0000ee  4912              LDR      r1,|L51.312|
0000f0  f8510020          LDR      r0,[r1,r0,LSL #2]
0000f4  2801              CMP      r0,#1
0000f6  d901              BLS      |L51.252|
;;;2782   			{
;;;2783   				xSwitchRequired = pdTRUE;
0000f8  f04f0801          MOV      r8,#1
                  |L51.252|
;;;2784   			}
;;;2785   			else
;;;2786   			{
;;;2787   				mtCOVERAGE_TEST_MARKER();
;;;2788   			}
;;;2789   		}
;;;2790   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
;;;2791   
;;;2792   		#if ( configUSE_TICK_HOOK == 1 )
;;;2793   		{
;;;2794   			/* Guard against the tick hook being called when the pended tick
;;;2795   			count is being unwound (when the scheduler is being unlocked). */
;;;2796   			if( uxPendedTicks == ( UBaseType_t ) 0U )
;;;2797   			{
;;;2798   				vApplicationTickHook();
;;;2799   			}
;;;2800   			else
;;;2801   			{
;;;2802   				mtCOVERAGE_TEST_MARKER();
;;;2803   			}
;;;2804   		}
;;;2805   		#endif /* configUSE_TICK_HOOK */
;;;2806   	}
0000fc  e005              B        |L51.266|
0000fe  e7ff              B        |L51.256|
                  |L51.256|
;;;2807   	else
;;;2808   	{
;;;2809   		++uxPendedTicks;
000100  480f              LDR      r0,|L51.320|
000102  6800              LDR      r0,[r0,#0]  ; uxPendedTicks
000104  1c40              ADDS     r0,r0,#1
000106  490e              LDR      r1,|L51.320|
000108  6008              STR      r0,[r1,#0]  ; uxPendedTicks
                  |L51.266|
;;;2810   
;;;2811   		/* The tick hook gets called at regular intervals, even if the
;;;2812   		scheduler is locked. */
;;;2813   		#if ( configUSE_TICK_HOOK == 1 )
;;;2814   		{
;;;2815   			vApplicationTickHook();
;;;2816   		}
;;;2817   		#endif
;;;2818   	}
;;;2819   
;;;2820   	#if ( configUSE_PREEMPTION == 1 )
;;;2821   	{
;;;2822   		if( xYieldPending != pdFALSE )
00010a  480e              LDR      r0,|L51.324|
00010c  6800              LDR      r0,[r0,#0]  ; xYieldPending
00010e  b108              CBZ      r0,|L51.276|
;;;2823   		{
;;;2824   			xSwitchRequired = pdTRUE;
000110  f04f0801          MOV      r8,#1
                  |L51.276|
;;;2825   		}
;;;2826   		else
;;;2827   		{
;;;2828   			mtCOVERAGE_TEST_MARKER();
;;;2829   		}
;;;2830   	}
;;;2831   	#endif /* configUSE_PREEMPTION */
;;;2832   
;;;2833   	return xSwitchRequired;
000114  4640              MOV      r0,r8
;;;2834   }
000116  e8bd81f0          POP      {r4-r8,pc}
;;;2835   /*-----------------------------------------------------------*/
                          ENDP

00011a  0000              DCW      0x0000
                  |L51.284|
                          DCD      uxSchedulerSuspended
                  |L51.288|
                          DCD      xTickCount
                  |L51.292|
                          DCD      pxDelayedTaskList
                  |L51.296|
                          DCD      pxOverflowDelayedTaskList
                  |L51.300|
                          DCD      xNumOfOverflows
                  |L51.304|
                          DCD      xNextTaskUnblockTime
                  |L51.308|
                          DCD      uxTopReadyPriority
                  |L51.312|
                          DCD      pxReadyTasksLists
                  |L51.316|
                          DCD      pxCurrentTCB
                  |L51.320|
                          DCD      uxPendedTicks
                  |L51.324|
                          DCD      xYieldPending

                          AREA ||i.xTaskNotifyStateClear||, CODE, READONLY, ALIGN=2

                  xTaskNotifyStateClear PROC
;;;5043   
;;;5044   	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;5045   	{
000002  4605              MOV      r5,r0
;;;5046   	TCB_t *pxTCB;
;;;5047   	BaseType_t xReturn;
;;;5048   
;;;5049   		/* If null is passed in here then it is the calling task that is having
;;;5050   		its notification state cleared. */
;;;5051   		pxTCB = prvGetTCBFromHandle( xTask );
000004  b915              CBNZ     r5,|L52.12|
000006  480a              LDR      r0,|L52.48|
000008  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000a  e000              B        |L52.14|
                  |L52.12|
00000c  4628              MOV      r0,r5
                  |L52.14|
00000e  4606              MOV      r6,r0
;;;5052   
;;;5053   		taskENTER_CRITICAL();
000010  f7fffffe          BL       vPortEnterCritical
;;;5054   		{
;;;5055   			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
000014  f896005c          LDRB     r0,[r6,#0x5c]
000018  2802              CMP      r0,#2
00001a  d104              BNE      |L52.38|
;;;5056   			{
;;;5057   				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
00001c  2000              MOVS     r0,#0
00001e  f886005c          STRB     r0,[r6,#0x5c]
;;;5058   				xReturn = pdPASS;
000022  2401              MOVS     r4,#1
000024  e000              B        |L52.40|
                  |L52.38|
;;;5059   			}
;;;5060   			else
;;;5061   			{
;;;5062   				xReturn = pdFAIL;
000026  2400              MOVS     r4,#0
                  |L52.40|
;;;5063   			}
;;;5064   		}
;;;5065   		taskEXIT_CRITICAL();
000028  f7fffffe          BL       vPortExitCritical
;;;5066   
;;;5067   		return xReturn;
00002c  4620              MOV      r0,r4
;;;5068   	}
00002e  bd70              POP      {r4-r6,pc}
;;;5069   
                          ENDP

                  |L52.48|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskNotifyWait||, CODE, READONLY, ALIGN=2

                  xTaskNotifyWait PROC
;;;4633   
;;;4634   	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4635   	{
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;4636   	BaseType_t xReturn;
;;;4637   
;;;4638   		taskENTER_CRITICAL();
00000c  f7fffffe          BL       vPortEnterCritical
;;;4639   		{
;;;4640   			/* Only block if a notification is not already pending. */
;;;4641   			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
000010  4821              LDR      r0,|L53.152|
000012  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000014  f890005c          LDRB     r0,[r0,#0x5c]
000018  2802              CMP      r0,#2
00001a  d018              BEQ      |L53.78|
;;;4642   			{
;;;4643   				/* Clear bits in the task's notification value as bits may get
;;;4644   				set	by the notifying task or interrupt.  This can be used to
;;;4645   				clear the value to zero. */
;;;4646   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
00001c  491e              LDR      r1,|L53.152|
00001e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000020  f1010058          ADD      r0,r1,#0x58
000024  6d89              LDR      r1,[r1,#0x58]
000026  43b9              BICS     r1,r1,r7
000028  6001              STR      r1,[r0,#0]
;;;4647   
;;;4648   				/* Mark this task as waiting for a notification. */
;;;4649   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
00002a  2001              MOVS     r0,#1
00002c  491a              LDR      r1,|L53.152|
00002e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000030  f881005c          STRB     r0,[r1,#0x5c]
;;;4650   
;;;4651   				if( xTicksToWait > ( TickType_t ) 0 )
000034  b15d              CBZ      r5,|L53.78|
;;;4652   				{
;;;4653   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
000036  2101              MOVS     r1,#1
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4654   					traceTASK_NOTIFY_WAIT_BLOCK();
;;;4655   
;;;4656   					/* All ports are written to allow a yield in a critical
;;;4657   					section (some will yield immediately, others wait until the
;;;4658   					critical section exits) - but it is not something that
;;;4659   					application code should ever do. */
;;;4660   					portYIELD_WITHIN_API();
00003e  f04f5080          MOV      r0,#0x10000000
000042  4916              LDR      r1,|L53.156|
000044  6008              STR      r0,[r1,#0]
000046  f3bf8f4f          DSB      
00004a  f3bf8f6f          ISB      
                  |L53.78|
;;;4661   				}
;;;4662   				else
;;;4663   				{
;;;4664   					mtCOVERAGE_TEST_MARKER();
;;;4665   				}
;;;4666   			}
;;;4667   			else
;;;4668   			{
;;;4669   				mtCOVERAGE_TEST_MARKER();
;;;4670   			}
;;;4671   		}
;;;4672   		taskEXIT_CRITICAL();
00004e  f7fffffe          BL       vPortExitCritical
;;;4673   
;;;4674   		taskENTER_CRITICAL();
000052  f7fffffe          BL       vPortEnterCritical
;;;4675   		{
;;;4676   			traceTASK_NOTIFY_WAIT();
;;;4677   
;;;4678   			if( pulNotificationValue != NULL )
000056  b11c              CBZ      r4,|L53.96|
;;;4679   			{
;;;4680   				/* Output the current notification value, which may or may not
;;;4681   				have changed. */
;;;4682   				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
000058  480f              LDR      r0,|L53.152|
00005a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00005c  6d80              LDR      r0,[r0,#0x58]
00005e  6020              STR      r0,[r4,#0]
                  |L53.96|
;;;4683   			}
;;;4684   
;;;4685   			/* If ucNotifyValue is set then either the task never entered the
;;;4686   			blocked state (because a notification was already pending) or the
;;;4687   			task unblocked because of a notification.  Otherwise the task
;;;4688   			unblocked because of a timeout. */
;;;4689   			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
000060  480d              LDR      r0,|L53.152|
000062  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000064  f890005c          LDRB     r0,[r0,#0x5c]
000068  2802              CMP      r0,#2
00006a  d001              BEQ      |L53.112|
;;;4690   			{
;;;4691   				/* A notification was not received. */
;;;4692   				xReturn = pdFALSE;
00006c  2600              MOVS     r6,#0
00006e  e008              B        |L53.130|
                  |L53.112|
;;;4693   			}
;;;4694   			else
;;;4695   			{
;;;4696   				/* A notification was already pending or a notification was
;;;4697   				received while the task was waiting. */
;;;4698   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
000070  4909              LDR      r1,|L53.152|
000072  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000074  f1010058          ADD      r0,r1,#0x58
000078  6d89              LDR      r1,[r1,#0x58]
00007a  ea210108          BIC      r1,r1,r8
00007e  6001              STR      r1,[r0,#0]
;;;4699   				xReturn = pdTRUE;
000080  2601              MOVS     r6,#1
                  |L53.130|
;;;4700   			}
;;;4701   
;;;4702   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000082  2000              MOVS     r0,#0
000084  4904              LDR      r1,|L53.152|
000086  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000088  f881005c          STRB     r0,[r1,#0x5c]
;;;4703   		}
;;;4704   		taskEXIT_CRITICAL();
00008c  f7fffffe          BL       vPortExitCritical
;;;4705   
;;;4706   		return xReturn;
000090  4630              MOV      r0,r6
;;;4707   	}
000092  e8bd81f0          POP      {r4-r8,pc}
;;;4708   
                          ENDP

000096  0000              DCW      0x0000
                  |L53.152|
                          DCD      pxCurrentTCB
                  |L53.156|
                          DCD      0xe000ed04

                          AREA ||i.xTaskPriorityDisinherit||, CODE, READONLY, ALIGN=2

                  xTaskPriorityDisinherit PROC
;;;4037   
;;;4038   	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;4039   	{
000002  4605              MOV      r5,r0
;;;4040   	TCB_t * const pxTCB = pxMutexHolder;
000004  462c              MOV      r4,r5
;;;4041   	BaseType_t xReturn = pdFALSE;
000006  2600              MOVS     r6,#0
;;;4042   
;;;4043   		if( pxMutexHolder != NULL )
000008  2d00              CMP      r5,#0
00000a  d055              BEQ      |L54.184|
;;;4044   		{
;;;4045   			/* A task can only have an inherited priority if it holds the mutex.
;;;4046   			If the mutex is held by a task then it cannot be given from an
;;;4047   			interrupt, and if a mutex is given by the holding task then it must
;;;4048   			be the running state task. */
;;;4049   			configASSERT( pxTCB == pxCurrentTCB );
00000c  482b              LDR      r0,|L54.188|
00000e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000010  4284              CMP      r4,r0
000012  d101              BNE      |L54.24|
000014  2001              MOVS     r0,#1
000016  e000              B        |L54.26|
                  |L54.24|
000018  2000              MOVS     r0,#0
                  |L54.26|
00001a  b950              CBNZ     r0,|L54.50|
00001c  bf00              NOP      
00001e  2050              MOVS     r0,#0x50
000020  f3808811          MSR      BASEPRI,r0
000024  f3bf8f4f          DSB      
000028  f3bf8f6f          ISB      
00002c  bf00              NOP      
00002e  bf00              NOP      
                  |L54.48|
000030  e7fe              B        |L54.48|
                  |L54.50|
;;;4050   			configASSERT( pxTCB->uxMutexesHeld );
000032  6d60              LDR      r0,[r4,#0x54]
000034  b950              CBNZ     r0,|L54.76|
000036  bf00              NOP      
000038  2050              MOVS     r0,#0x50
00003a  f3808811          MSR      BASEPRI,r0
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
000046  bf00              NOP      
000048  bf00              NOP      
                  |L54.74|
00004a  e7fe              B        |L54.74|
                  |L54.76|
;;;4051   			( pxTCB->uxMutexesHeld )--;
00004c  6d60              LDR      r0,[r4,#0x54]
00004e  1e40              SUBS     r0,r0,#1
000050  6560              STR      r0,[r4,#0x54]
;;;4052   
;;;4053   			/* Has the holder of the mutex inherited the priority of another
;;;4054   			task? */
;;;4055   			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
000052  6d21              LDR      r1,[r4,#0x50]
000054  6ae0              LDR      r0,[r4,#0x2c]
000056  4288              CMP      r0,r1
000058  d02e              BEQ      |L54.184|
;;;4056   			{
;;;4057   				/* Only disinherit if no other mutexes are held. */
;;;4058   				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
00005a  6d60              LDR      r0,[r4,#0x54]
00005c  bb60              CBNZ     r0,|L54.184|
;;;4059   				{
;;;4060   					/* A task can only have an inherited priority if it holds
;;;4061   					the mutex.  If the mutex is held by a task then it cannot be
;;;4062   					given from an interrupt, and if a mutex is given by the
;;;4063   					holding task then it must be the running state task.  Remove
;;;4064   					the holding task from the ready list. */
;;;4065   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
00005e  1d20              ADDS     r0,r4,#4
000060  f7fffffe          BL       uxListRemove
000064  b978              CBNZ     r0,|L54.134|
;;;4066   					{
;;;4067   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
000066  6ae0              LDR      r0,[r4,#0x2c]
000068  eb000080          ADD      r0,r0,r0,LSL #2
00006c  4914              LDR      r1,|L54.192|
00006e  f8510020          LDR      r0,[r1,r0,LSL #2]
000072  b940              CBNZ     r0,|L54.134|
000074  f894102c          LDRB     r1,[r4,#0x2c]
000078  2001              MOVS     r0,#1
00007a  4088              LSLS     r0,r0,r1
00007c  4911              LDR      r1,|L54.196|
00007e  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000080  4381              BICS     r1,r1,r0
000082  4810              LDR      r0,|L54.196|
000084  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L54.134|
;;;4068   					}
;;;4069   					else
;;;4070   					{
;;;4071   						mtCOVERAGE_TEST_MARKER();
;;;4072   					}
;;;4073   
;;;4074   					/* Disinherit the priority before adding the task into the
;;;4075   					new	ready list. */
;;;4076   					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
;;;4077   					pxTCB->uxPriority = pxTCB->uxBasePriority;
000086  6d20              LDR      r0,[r4,#0x50]
000088  62e0              STR      r0,[r4,#0x2c]
;;;4078   
;;;4079   					/* Reset the event list item value.  It cannot be in use for
;;;4080   					any other purpose if this task is running, and it must be
;;;4081   					running to give back the mutex. */
;;;4082   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00008a  6ae0              LDR      r0,[r4,#0x2c]
00008c  f1c00005          RSB      r0,r0,#5
000090  61a0              STR      r0,[r4,#0x18]
;;;4083   					prvAddTaskToReadyList( pxTCB );
000092  f894102c          LDRB     r1,[r4,#0x2c]
000096  2001              MOVS     r0,#1
000098  4088              LSLS     r0,r0,r1
00009a  490a              LDR      r1,|L54.196|
00009c  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00009e  4308              ORRS     r0,r0,r1
0000a0  4908              LDR      r1,|L54.196|
0000a2  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000a4  6ae1              LDR      r1,[r4,#0x2c]
0000a6  eb010181          ADD      r1,r1,r1,LSL #2
0000aa  4a05              LDR      r2,|L54.192|
0000ac  eb020081          ADD      r0,r2,r1,LSL #2
0000b0  1d21              ADDS     r1,r4,#4
0000b2  f7fffffe          BL       vListInsertEnd
;;;4084   
;;;4085   					/* Return true to indicate that a context switch is required.
;;;4086   					This is only actually required in the corner case whereby
;;;4087   					multiple mutexes were held and the mutexes were given back
;;;4088   					in an order different to that in which they were taken.
;;;4089   					If a context switch did not occur when the first mutex was
;;;4090   					returned, even if a task was waiting on it, then a context
;;;4091   					switch should occur when the last mutex is returned whether
;;;4092   					a task is waiting on it or not. */
;;;4093   					xReturn = pdTRUE;
0000b6  2601              MOVS     r6,#1
                  |L54.184|
;;;4094   				}
;;;4095   				else
;;;4096   				{
;;;4097   					mtCOVERAGE_TEST_MARKER();
;;;4098   				}
;;;4099   			}
;;;4100   			else
;;;4101   			{
;;;4102   				mtCOVERAGE_TEST_MARKER();
;;;4103   			}
;;;4104   		}
;;;4105   		else
;;;4106   		{
;;;4107   			mtCOVERAGE_TEST_MARKER();
;;;4108   		}
;;;4109   
;;;4110   		return xReturn;
0000b8  4630              MOV      r0,r6
;;;4111   	}
0000ba  bd70              POP      {r4-r6,pc}
;;;4112   
                          ENDP

                  |L54.188|
                          DCD      pxCurrentTCB
                  |L54.192|
                          DCD      pxReadyTasksLists
                  |L54.196|
                          DCD      uxTopReadyPriority

                          AREA ||i.xTaskPriorityInherit||, CODE, READONLY, ALIGN=2

                  xTaskPriorityInherit PROC
;;;3950   
;;;3951   	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;3952   	{
000002  4605              MOV      r5,r0
;;;3953   	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
000004  462c              MOV      r4,r5
;;;3954   	BaseType_t xReturn = pdFALSE;
000006  2600              MOVS     r6,#0
;;;3955   
;;;3956   		/* If the mutex was given back by an interrupt while the queue was
;;;3957   		locked then the mutex holder might now be NULL.  _RB_ Is this still
;;;3958   		needed as interrupts can no longer use mutexes? */
;;;3959   		if( pxMutexHolder != NULL )
000008  2d00              CMP      r5,#0
00000a  d054              BEQ      |L55.182|
;;;3960   		{
;;;3961   			/* If the holder of the mutex has a priority below the priority of
;;;3962   			the task attempting to obtain the mutex then it will temporarily
;;;3963   			inherit the priority of the task attempting to obtain the mutex. */
;;;3964   			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
00000c  492b              LDR      r1,|L55.188|
00000e  6ae0              LDR      r0,[r4,#0x2c]
000010  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000012  6ac9              LDR      r1,[r1,#0x2c]
000014  4288              CMP      r0,r1
000016  d247              BCS      |L55.168|
;;;3965   			{
;;;3966   				/* Adjust the mutex holder state to account for its new
;;;3967   				priority.  Only reset the event list item value if the value is
;;;3968   				not being used for anything else. */
;;;3969   				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000018  69a0              LDR      r0,[r4,#0x18]
00001a  f0004000          AND      r0,r0,#0x80000000
00001e  b928              CBNZ     r0,|L55.44|
;;;3970   				{
;;;3971   					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000020  4826              LDR      r0,|L55.188|
000022  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000024  6ac0              LDR      r0,[r0,#0x2c]
000026  f1c00005          RSB      r0,r0,#5
00002a  61a0              STR      r0,[r4,#0x18]
                  |L55.44|
;;;3972   				}
;;;3973   				else
;;;3974   				{
;;;3975   					mtCOVERAGE_TEST_MARKER();
;;;3976   				}
;;;3977   
;;;3978   				/* If the task being modified is in the ready state it will need
;;;3979   				to be moved into a new list. */
;;;3980   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
00002c  6ae1              LDR      r1,[r4,#0x2c]
00002e  eb010181          ADD      r1,r1,r1,LSL #2
000032  4a23              LDR      r2,|L55.192|
000034  eb020181          ADD      r1,r2,r1,LSL #2
000038  6960              LDR      r0,[r4,#0x14]
00003a  4288              CMP      r0,r1
00003c  d101              BNE      |L55.66|
00003e  2001              MOVS     r0,#1
000040  e000              B        |L55.68|
                  |L55.66|
000042  2000              MOVS     r0,#0
                  |L55.68|
000044  b350              CBZ      r0,|L55.156|
;;;3981   				{
;;;3982   					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000046  1d20              ADDS     r0,r4,#4
000048  f7fffffe          BL       uxListRemove
00004c  b978              CBNZ     r0,|L55.110|
;;;3983   					{
;;;3984   						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
00004e  6ae0              LDR      r0,[r4,#0x2c]
000050  eb000080          ADD      r0,r0,r0,LSL #2
000054  491a              LDR      r1,|L55.192|
000056  f8510020          LDR      r0,[r1,r0,LSL #2]
00005a  b940              CBNZ     r0,|L55.110|
00005c  f894102c          LDRB     r1,[r4,#0x2c]
000060  2001              MOVS     r0,#1
000062  4088              LSLS     r0,r0,r1
000064  4917              LDR      r1,|L55.196|
000066  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000068  4381              BICS     r1,r1,r0
00006a  4816              LDR      r0,|L55.196|
00006c  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L55.110|
;;;3985   					}
;;;3986   					else
;;;3987   					{
;;;3988   						mtCOVERAGE_TEST_MARKER();
;;;3989   					}
;;;3990   
;;;3991   					/* Inherit the priority before being moved into the new list. */
;;;3992   					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
00006e  4813              LDR      r0,|L55.188|
000070  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000072  6ac0              LDR      r0,[r0,#0x2c]
000074  62e0              STR      r0,[r4,#0x2c]
;;;3993   					prvAddTaskToReadyList( pxMutexHolderTCB );
000076  f894102c          LDRB     r1,[r4,#0x2c]
00007a  2001              MOVS     r0,#1
00007c  4088              LSLS     r0,r0,r1
00007e  4911              LDR      r1,|L55.196|
000080  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000082  4308              ORRS     r0,r0,r1
000084  490f              LDR      r1,|L55.196|
000086  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000088  6ae1              LDR      r1,[r4,#0x2c]
00008a  eb010181          ADD      r1,r1,r1,LSL #2
00008e  4a0c              LDR      r2,|L55.192|
000090  eb020081          ADD      r0,r2,r1,LSL #2
000094  1d21              ADDS     r1,r4,#4
000096  f7fffffe          BL       vListInsertEnd
00009a  e003              B        |L55.164|
                  |L55.156|
;;;3994   				}
;;;3995   				else
;;;3996   				{
;;;3997   					/* Just inherit the priority. */
;;;3998   					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
00009c  4807              LDR      r0,|L55.188|
00009e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
0000a0  6ac0              LDR      r0,[r0,#0x2c]
0000a2  62e0              STR      r0,[r4,#0x2c]
                  |L55.164|
;;;3999   				}
;;;4000   
;;;4001   				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
;;;4002   
;;;4003   				/* Inheritance occurred. */
;;;4004   				xReturn = pdTRUE;
0000a4  2601              MOVS     r6,#1
0000a6  e006              B        |L55.182|
                  |L55.168|
;;;4005   			}
;;;4006   			else
;;;4007   			{
;;;4008   				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
0000a8  4904              LDR      r1,|L55.188|
0000aa  6d20              LDR      r0,[r4,#0x50]
0000ac  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000ae  6ac9              LDR      r1,[r1,#0x2c]
0000b0  4288              CMP      r0,r1
0000b2  d200              BCS      |L55.182|
;;;4009   				{
;;;4010   					/* The base priority of the mutex holder is lower than the
;;;4011   					priority of the task attempting to take the mutex, but the
;;;4012   					current priority of the mutex holder is not lower than the
;;;4013   					priority of the task attempting to take the mutex.
;;;4014   					Therefore the mutex holder must have already inherited a
;;;4015   					priority, but inheritance would have occurred if that had
;;;4016   					not been the case. */
;;;4017   					xReturn = pdTRUE;
0000b4  2601              MOVS     r6,#1
                  |L55.182|
;;;4018   				}
;;;4019   				else
;;;4020   				{
;;;4021   					mtCOVERAGE_TEST_MARKER();
;;;4022   				}
;;;4023   			}
;;;4024   		}
;;;4025   		else
;;;4026   		{
;;;4027   			mtCOVERAGE_TEST_MARKER();
;;;4028   		}
;;;4029   
;;;4030   		return xReturn;
0000b6  4630              MOV      r0,r6
;;;4031   	}
0000b8  bd70              POP      {r4-r6,pc}
;;;4032   
                          ENDP

0000ba  0000              DCW      0x0000
                  |L55.188|
                          DCD      pxCurrentTCB
                  |L55.192|
                          DCD      pxReadyTasksLists
                  |L55.196|
                          DCD      uxTopReadyPriority

                          AREA ||i.xTaskRemoveFromEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromEventList PROC
;;;3093   
;;;3094   BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
000000  b570              PUSH     {r4-r6,lr}
;;;3095   {
000002  4606              MOV      r6,r0
;;;3096   TCB_t *pxUnblockedTCB;
;;;3097   BaseType_t xReturn;
;;;3098   
;;;3099   	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
;;;3100   	called from a critical section within an ISR. */
;;;3101   
;;;3102   	/* The event list is sorted in priority order, so the first in the list can
;;;3103   	be removed as it is known to be the highest priority.  Remove the TCB from
;;;3104   	the delayed list, and add it to the ready list.
;;;3105   
;;;3106   	If an event is for a queue that is locked then this function will never
;;;3107   	get called - the lock count on the queue will get modified instead.  This
;;;3108   	means exclusive access to the event list is guaranteed here.
;;;3109   
;;;3110   	This function assumes that a check has already been made to ensure that
;;;3111   	pxEventList is not empty. */
;;;3112   	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000004  68f0              LDR      r0,[r6,#0xc]
000006  68c4              LDR      r4,[r0,#0xc]
;;;3113   	configASSERT( pxUnblockedTCB );
000008  b954              CBNZ     r4,|L56.32|
00000a  bf00              NOP      
00000c  2050              MOVS     r0,#0x50
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L56.30|
00001e  e7fe              B        |L56.30|
                  |L56.32|
;;;3114   	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
000020  f1040018          ADD      r0,r4,#0x18
000024  f7fffffe          BL       uxListRemove
;;;3115   
;;;3116   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000028  4815              LDR      r0,|L56.128|
00002a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00002c  b9a8              CBNZ     r0,|L56.90|
;;;3117   	{
;;;3118   		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
00002e  1d20              ADDS     r0,r4,#4
000030  f7fffffe          BL       uxListRemove
;;;3119   		prvAddTaskToReadyList( pxUnblockedTCB );
000034  f894102c          LDRB     r1,[r4,#0x2c]
000038  2001              MOVS     r0,#1
00003a  4088              LSLS     r0,r0,r1
00003c  4911              LDR      r1,|L56.132|
00003e  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000040  4308              ORRS     r0,r0,r1
000042  4910              LDR      r1,|L56.132|
000044  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000046  6ae1              LDR      r1,[r4,#0x2c]
000048  eb010181          ADD      r1,r1,r1,LSL #2
00004c  4a0e              LDR      r2,|L56.136|
00004e  eb020081          ADD      r0,r2,r1,LSL #2
000052  1d21              ADDS     r1,r4,#4
000054  f7fffffe          BL       vListInsertEnd
000058  e004              B        |L56.100|
                  |L56.90|
;;;3120   
;;;3121   		#if( configUSE_TICKLESS_IDLE != 0 )
;;;3122   		{
;;;3123   			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
;;;3124   			might be set to the blocked task's time out time.  If the task is
;;;3125   			unblocked for a reason other than a timeout xNextTaskUnblockTime is
;;;3126   			normally left unchanged, because it is automatically reset to a new
;;;3127   			value when the tick count equals xNextTaskUnblockTime.  However if
;;;3128   			tickless idling is used it might be more important to enter sleep mode
;;;3129   			at the earliest possible time - so reset xNextTaskUnblockTime here to
;;;3130   			ensure it is updated at the earliest possible time. */
;;;3131   			prvResetNextTaskUnblockTime();
;;;3132   		}
;;;3133   		#endif
;;;3134   	}
;;;3135   	else
;;;3136   	{
;;;3137   		/* The delayed and ready lists cannot be accessed, so hold this task
;;;3138   		pending until the scheduler is resumed. */
;;;3139   		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
00005a  f1040118          ADD      r1,r4,#0x18
00005e  480b              LDR      r0,|L56.140|
000060  f7fffffe          BL       vListInsertEnd
                  |L56.100|
;;;3140   	}
;;;3141   
;;;3142   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000064  490a              LDR      r1,|L56.144|
000066  6ae0              LDR      r0,[r4,#0x2c]
000068  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00006a  6ac9              LDR      r1,[r1,#0x2c]
00006c  4288              CMP      r0,r1
00006e  d904              BLS      |L56.122|
;;;3143   	{
;;;3144   		/* Return true if the task removed from the event list has a higher
;;;3145   		priority than the calling task.  This allows the calling task to know if
;;;3146   		it should force a context switch now. */
;;;3147   		xReturn = pdTRUE;
000070  2501              MOVS     r5,#1
;;;3148   
;;;3149   		/* Mark that a yield is pending in case the user is not using the
;;;3150   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;3151   		xYieldPending = pdTRUE;
000072  2001              MOVS     r0,#1
000074  4907              LDR      r1,|L56.148|
000076  6008              STR      r0,[r1,#0]  ; xYieldPending
000078  e000              B        |L56.124|
                  |L56.122|
;;;3152   	}
;;;3153   	else
;;;3154   	{
;;;3155   		xReturn = pdFALSE;
00007a  2500              MOVS     r5,#0
                  |L56.124|
;;;3156   	}
;;;3157   
;;;3158   	return xReturn;
00007c  4628              MOV      r0,r5
;;;3159   }
00007e  bd70              POP      {r4-r6,pc}
;;;3160   /*-----------------------------------------------------------*/
                          ENDP

                  |L56.128|
                          DCD      uxSchedulerSuspended
                  |L56.132|
                          DCD      uxTopReadyPriority
                  |L56.136|
                          DCD      pxReadyTasksLists
                  |L56.140|
                          DCD      xPendingReadyList
                  |L56.144|
                          DCD      pxCurrentTCB
                  |L56.148|
                          DCD      xYieldPending

                          AREA ||i.xTaskResumeAll||, CODE, READONLY, ALIGN=2

                  xTaskResumeAll PROC
;;;2173   
;;;2174   BaseType_t xTaskResumeAll( void )
000000  b570              PUSH     {r4-r6,lr}
;;;2175   {
;;;2176   TCB_t *pxTCB = NULL;
000002  2400              MOVS     r4,#0
;;;2177   BaseType_t xAlreadyYielded = pdFALSE;
000004  2600              MOVS     r6,#0
;;;2178   
;;;2179   	/* If uxSchedulerSuspended is zero then this function does not match a
;;;2180   	previous call to vTaskSuspendAll(). */
;;;2181   	configASSERT( uxSchedulerSuspended );
000006  4836              LDR      r0,|L57.224|
000008  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000a  b950              CBNZ     r0,|L57.34|
00000c  bf00              NOP      
00000e  2050              MOVS     r0,#0x50
000010  f3808811          MSR      BASEPRI,r0
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
00001c  bf00              NOP      
00001e  bf00              NOP      
                  |L57.32|
000020  e7fe              B        |L57.32|
                  |L57.34|
;;;2182   
;;;2183   	/* It is possible that an ISR caused a task to be removed from an event
;;;2184   	list while the scheduler was suspended.  If this was the case then the
;;;2185   	removed task will have been added to the xPendingReadyList.  Once the
;;;2186   	scheduler has been resumed it is safe to move all the pending ready
;;;2187   	tasks from this list into their appropriate ready list. */
;;;2188   	taskENTER_CRITICAL();
000022  f7fffffe          BL       vPortEnterCritical
;;;2189   	{
;;;2190   		--uxSchedulerSuspended;
000026  482e              LDR      r0,|L57.224|
000028  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00002a  1e40              SUBS     r0,r0,#1
00002c  492c              LDR      r1,|L57.224|
00002e  6008              STR      r0,[r1,#0]  ; uxSchedulerSuspended
;;;2191   
;;;2192   		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000030  4608              MOV      r0,r1
000032  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000034  2800              CMP      r0,#0
000036  d14f              BNE      |L57.216|
;;;2193   		{
;;;2194   			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
000038  482a              LDR      r0,|L57.228|
00003a  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
00003c  2800              CMP      r0,#0
00003e  d04b              BEQ      |L57.216|
;;;2195   			{
;;;2196   				/* Move any readied tasks from the pending list into the
;;;2197   				appropriate ready list. */
;;;2198   				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
000040  e024              B        |L57.140|
                  |L57.66|
;;;2199   				{
;;;2200   					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
000042  4829              LDR      r0,|L57.232|
000044  68c0              LDR      r0,[r0,#0xc]
000046  68c4              LDR      r4,[r0,#0xc]
;;;2201   					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000048  f1040018          ADD      r0,r4,#0x18
00004c  f7fffffe          BL       uxListRemove
;;;2202   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
000050  1d20              ADDS     r0,r4,#4
000052  f7fffffe          BL       uxListRemove
;;;2203   					prvAddTaskToReadyList( pxTCB );
000056  f894102c          LDRB     r1,[r4,#0x2c]
00005a  2001              MOVS     r0,#1
00005c  4088              LSLS     r0,r0,r1
00005e  4923              LDR      r1,|L57.236|
000060  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000062  4308              ORRS     r0,r0,r1
000064  4921              LDR      r1,|L57.236|
000066  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000068  6ae1              LDR      r1,[r4,#0x2c]
00006a  eb010181          ADD      r1,r1,r1,LSL #2
00006e  4a20              LDR      r2,|L57.240|
000070  eb020081          ADD      r0,r2,r1,LSL #2
000074  1d21              ADDS     r1,r4,#4
000076  f7fffffe          BL       vListInsertEnd
;;;2204   
;;;2205   					/* If the moved task has a priority higher than the current
;;;2206   					task then a yield must be performed. */
;;;2207   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00007a  491e              LDR      r1,|L57.244|
00007c  6ae0              LDR      r0,[r4,#0x2c]
00007e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000080  6ac9              LDR      r1,[r1,#0x2c]
000082  4288              CMP      r0,r1
000084  d302              BCC      |L57.140|
;;;2208   					{
;;;2209   						xYieldPending = pdTRUE;
000086  2001              MOVS     r0,#1
000088  491b              LDR      r1,|L57.248|
00008a  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L57.140|
00008c  4816              LDR      r0,|L57.232|
00008e  6800              LDR      r0,[r0,#0]            ;2198  ; xPendingReadyList
000090  b908              CBNZ     r0,|L57.150|
000092  2001              MOVS     r0,#1                 ;2198
000094  e000              B        |L57.152|
                  |L57.150|
000096  2000              MOVS     r0,#0                 ;2198
                  |L57.152|
000098  2800              CMP      r0,#0                 ;2198
00009a  d0d2              BEQ      |L57.66|
;;;2210   					}
;;;2211   					else
;;;2212   					{
;;;2213   						mtCOVERAGE_TEST_MARKER();
;;;2214   					}
;;;2215   				}
;;;2216   
;;;2217   				if( pxTCB != NULL )
00009c  b10c              CBZ      r4,|L57.162|
;;;2218   				{
;;;2219   					/* A task was unblocked while the scheduler was suspended,
;;;2220   					which may have prevented the next unblock time from being
;;;2221   					re-calculated, in which case re-calculate it now.  Mainly
;;;2222   					important for low power tickless implementations, where
;;;2223   					this can prevent an unnecessary exit from low power
;;;2224   					state. */
;;;2225   					prvResetNextTaskUnblockTime();
00009e  f7fffffe          BL       prvResetNextTaskUnblockTime
                  |L57.162|
;;;2226   				}
;;;2227   
;;;2228   				/* If any ticks occurred while the scheduler was suspended then
;;;2229   				they should be processed now.  This ensures the tick count does
;;;2230   				not	slip, and that any delayed tasks are resumed at the correct
;;;2231   				time. */
;;;2232   				{
;;;2233   					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
0000a2  4816              LDR      r0,|L57.252|
0000a4  6805              LDR      r5,[r0,#0]  ; uxPendedTicks
;;;2234   
;;;2235   					if( uxPendedCounts > ( UBaseType_t ) 0U )
0000a6  b165              CBZ      r5,|L57.194|
;;;2236   					{
;;;2237   						do
0000a8  bf00              NOP      
                  |L57.170|
;;;2238   						{
;;;2239   							if( xTaskIncrementTick() != pdFALSE )
0000aa  f7fffffe          BL       xTaskIncrementTick
0000ae  b110              CBZ      r0,|L57.182|
;;;2240   							{
;;;2241   								xYieldPending = pdTRUE;
0000b0  2001              MOVS     r0,#1
0000b2  4911              LDR      r1,|L57.248|
0000b4  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L57.182|
;;;2242   							}
;;;2243   							else
;;;2244   							{
;;;2245   								mtCOVERAGE_TEST_MARKER();
;;;2246   							}
;;;2247   							--uxPendedCounts;
0000b6  1e6d              SUBS     r5,r5,#1
;;;2248   						} while( uxPendedCounts > ( UBaseType_t ) 0U );
0000b8  2d00              CMP      r5,#0
0000ba  d1f6              BNE      |L57.170|
;;;2249   
;;;2250   						uxPendedTicks = 0;
0000bc  2000              MOVS     r0,#0
0000be  490f              LDR      r1,|L57.252|
0000c0  6008              STR      r0,[r1,#0]  ; uxPendedTicks
                  |L57.194|
;;;2251   					}
;;;2252   					else
;;;2253   					{
;;;2254   						mtCOVERAGE_TEST_MARKER();
;;;2255   					}
;;;2256   				}
;;;2257   
;;;2258   				if( xYieldPending != pdFALSE )
0000c2  480d              LDR      r0,|L57.248|
0000c4  6800              LDR      r0,[r0,#0]  ; xYieldPending
0000c6  b138              CBZ      r0,|L57.216|
;;;2259   				{
;;;2260   					#if( configUSE_PREEMPTION != 0 )
;;;2261   					{
;;;2262   						xAlreadyYielded = pdTRUE;
0000c8  2601              MOVS     r6,#1
;;;2263   					}
;;;2264   					#endif
;;;2265   					taskYIELD_IF_USING_PREEMPTION();
0000ca  0730              LSLS     r0,r6,#28
0000cc  490c              LDR      r1,|L57.256|
0000ce  6008              STR      r0,[r1,#0]
0000d0  f3bf8f4f          DSB      
0000d4  f3bf8f6f          ISB      
                  |L57.216|
;;;2266   				}
;;;2267   				else
;;;2268   				{
;;;2269   					mtCOVERAGE_TEST_MARKER();
;;;2270   				}
;;;2271   			}
;;;2272   		}
;;;2273   		else
;;;2274   		{
;;;2275   			mtCOVERAGE_TEST_MARKER();
;;;2276   		}
;;;2277   	}
;;;2278   	taskEXIT_CRITICAL();
0000d8  f7fffffe          BL       vPortExitCritical
;;;2279   
;;;2280   	return xAlreadyYielded;
0000dc  4630              MOV      r0,r6
;;;2281   }
0000de  bd70              POP      {r4-r6,pc}
;;;2282   /*-----------------------------------------------------------*/
                          ENDP

                  |L57.224|
                          DCD      uxSchedulerSuspended
                  |L57.228|
                          DCD      uxCurrentNumberOfTasks
                  |L57.232|
                          DCD      xPendingReadyList
                  |L57.236|
                          DCD      uxTopReadyPriority
                  |L57.240|
                          DCD      pxReadyTasksLists
                  |L57.244|
                          DCD      pxCurrentTCB
                  |L57.248|
                          DCD      xYieldPending
                  |L57.252|
                          DCD      uxPendedTicks
                  |L57.256|
                          DCD      0xe000ed04

                          AREA ||i.xTaskResumeFromISR||, CODE, READONLY, ALIGN=2

                  xTaskResumeFromISR PROC
;;;1896   
;;;1897   	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1898   	{
000004  4606              MOV      r6,r0
;;;1899   	BaseType_t xYieldRequired = pdFALSE;
000006  2700              MOVS     r7,#0
;;;1900   	TCB_t * const pxTCB = xTaskToResume;
000008  4634              MOV      r4,r6
;;;1901   	UBaseType_t uxSavedInterruptStatus;
;;;1902   
;;;1903   		configASSERT( xTaskToResume );
00000a  b956              CBNZ     r6,|L58.34|
00000c  bf00              NOP      
00000e  2050              MOVS     r0,#0x50
000010  f3808811          MSR      BASEPRI,r0
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
00001c  bf00              NOP      
00001e  bf00              NOP      
                  |L58.32|
000020  e7fe              B        |L58.32|
                  |L58.34|
;;;1904   
;;;1905   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1906   		maximum	system call (or maximum API call) interrupt priority.
;;;1907   		Interrupts that are	above the maximum system call priority are keep
;;;1908   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1909   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1910   		is defined in FreeRTOSConfig.h then
;;;1911   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1912   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1913   		been assigned a priority above the configured maximum system call
;;;1914   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1915   		from interrupts	that have been assigned a priority at or (logically)
;;;1916   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1917   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1918   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1919   		provided on the following link:
;;;1920   		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1921   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000022  f7fffffe          BL       vPortValidateInterruptPriority
;;;1922   
;;;1923   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000026  bf00              NOP      
000028  2150              MOVS     r1,#0x50
00002a  f3ef8011          MRS      r0,BASEPRI
00002e  f3818811          MSR      BASEPRI,r1
000032  f3bf8f4f          DSB      
000036  f3bf8f6f          ISB      
00003a  bf00              NOP      
00003c  4605              MOV      r5,r0
;;;1924   		{
;;;1925   			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       prvTaskIsTaskSuspended
000044  b320              CBZ      r0,|L58.144|
;;;1926   			{
;;;1927   				traceTASK_RESUME_FROM_ISR( pxTCB );
;;;1928   
;;;1929   				/* Check the ready lists can be accessed. */
;;;1930   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000046  4816              LDR      r0,|L58.160|
000048  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00004a  b9e0              CBNZ     r0,|L58.134|
;;;1931   				{
;;;1932   					/* Ready lists can be accessed so move the task from the
;;;1933   					suspended list to the ready list directly. */
;;;1934   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00004c  4915              LDR      r1,|L58.164|
00004e  6ae0              LDR      r0,[r4,#0x2c]
000050  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000052  6ac9              LDR      r1,[r1,#0x2c]
000054  4288              CMP      r0,r1
000056  d300              BCC      |L58.90|
;;;1935   					{
;;;1936   						xYieldRequired = pdTRUE;
000058  2701              MOVS     r7,#1
                  |L58.90|
;;;1937   					}
;;;1938   					else
;;;1939   					{
;;;1940   						mtCOVERAGE_TEST_MARKER();
;;;1941   					}
;;;1942   
;;;1943   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
00005a  1d20              ADDS     r0,r4,#4
00005c  f7fffffe          BL       uxListRemove
;;;1944   					prvAddTaskToReadyList( pxTCB );
000060  f894102c          LDRB     r1,[r4,#0x2c]
000064  2001              MOVS     r0,#1
000066  4088              LSLS     r0,r0,r1
000068  490f              LDR      r1,|L58.168|
00006a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00006c  4308              ORRS     r0,r0,r1
00006e  490e              LDR      r1,|L58.168|
000070  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000072  6ae1              LDR      r1,[r4,#0x2c]
000074  eb010181          ADD      r1,r1,r1,LSL #2
000078  4a0c              LDR      r2,|L58.172|
00007a  eb020081          ADD      r0,r2,r1,LSL #2
00007e  1d21              ADDS     r1,r4,#4
000080  f7fffffe          BL       vListInsertEnd
000084  e004              B        |L58.144|
                  |L58.134|
;;;1945   				}
;;;1946   				else
;;;1947   				{
;;;1948   					/* The delayed or ready lists cannot be accessed so the task
;;;1949   					is held in the pending ready list until the scheduler is
;;;1950   					unsuspended. */
;;;1951   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000086  f1040118          ADD      r1,r4,#0x18
00008a  4809              LDR      r0,|L58.176|
00008c  f7fffffe          BL       vListInsertEnd
                  |L58.144|
;;;1952   				}
;;;1953   			}
;;;1954   			else
;;;1955   			{
;;;1956   				mtCOVERAGE_TEST_MARKER();
;;;1957   			}
;;;1958   		}
;;;1959   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000090  bf00              NOP      
000092  f3858811          MSR      BASEPRI,r5
000096  bf00              NOP      
;;;1960   
;;;1961   		return xYieldRequired;
000098  4638              MOV      r0,r7
;;;1962   	}
00009a  e8bd81f0          POP      {r4-r8,pc}
;;;1963   
                          ENDP

00009e  0000              DCW      0x0000
                  |L58.160|
                          DCD      uxSchedulerSuspended
                  |L58.164|
                          DCD      pxCurrentTCB
                  |L58.168|
                          DCD      uxTopReadyPriority
                  |L58.172|
                          DCD      pxReadyTasksLists
                  |L58.176|
                          DCD      xPendingReadyList

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyTasksLists
                          %        100
                  xDelayedTaskList1
                          %        20
                  xDelayedTaskList2
                          %        20
                  xPendingReadyList
                          %        20
                  xTasksWaitingTermination
                          %        20
                  xSuspendedTaskList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentTCB
                          DCD      0x00000000
                  pxDelayedTaskList
                          DCD      0x00000000
                  pxOverflowDelayedTaskList
                          DCD      0x00000000
                  uxDeletedTasksWaitingCleanUp
                          DCD      0x00000000
                  uxCurrentNumberOfTasks
                          DCD      0x00000000
                  xTickCount
                          DCD      0x00000000
                  uxTopReadyPriority
                          DCD      0x00000000
                  xSchedulerRunning
                          DCD      0x00000000
                  uxPendedTicks
                          DCD      0x00000000
                  xYieldPending
                          DCD      0x00000000
                  xNumOfOverflows
                          DCD      0x00000000
                  uxTaskNumber
                          DCD      0x00000000
                  xNextTaskUnblockTime
                          DCD      0x00000000
                  xIdleTaskHandle
                          DCD      0x00000000
                  uxSchedulerSuspended
                          DCD      0x00000000
