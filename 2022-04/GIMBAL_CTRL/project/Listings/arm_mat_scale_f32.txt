; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\arm_mat_scale_f32.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\arm_mat_scale_f32.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\stm32LIB\inc -I..\stm32LIB\CMSIS\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM4F -I..\user\_Dsp\Include -I..\user\_Algorithms -I..\user\_Bsp -I..\user\_Device -I..\user\_Task -I..\system -I..\stm32LIB\CMSIS -I..\system -I..\FreeRTOS -I..\user -I.\RTE\_COD_Gimbal_Task -IC:\keil_v5_project\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DARM_MATH_CM4 -D__FPU_PRESENT --omf_browse=.\objects\arm_mat_scale_f32.crf ..\stm32LIB\Device\arm_mat_scale_f32.c]
                          THUMB

                          AREA ||i.arm_mat_scale_f32||, CODE, READONLY, ALIGN=1

                  arm_mat_scale_f32 PROC
;;;79     
;;;80     arm_status arm_mat_scale_f32(
000000  b5f0              PUSH     {r4-r7,lr}
;;;81       const arm_matrix_instance_f32 * pSrc,
;;;82       float32_t scale,
;;;83       arm_matrix_instance_f32 * pDst)
;;;84     {
000002  4603              MOV      r3,r0
000004  460d              MOV      r5,r1
;;;85       float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
000006  6859              LDR      r1,[r3,#4]
;;;86       float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
000008  686a              LDR      r2,[r5,#4]
;;;87       uint32_t numSamples;                           /* total number of elements in the matrix */
;;;88       uint32_t blkCnt;                               /* loop counters */
;;;89       arm_status status;                             /* status of matrix scaling     */
;;;90     
;;;91     #ifndef ARM_MATH_CM0_FAMILY
;;;92     
;;;93       float32_t in1, in2, in3, in4;                  /* temporary variables */
;;;94       float32_t out1, out2, out3, out4;              /* temporary variables */
;;;95     
;;;96     #endif //      #ifndef ARM_MATH_CM0_FAMILY
;;;97     
;;;98     #ifdef ARM_MATH_MATRIX_CHECK
;;;99       /* Check for matrix mismatch condition */
;;;100      if((pSrc->numRows != pDst->numRows) || (pSrc->numCols != pDst->numCols))
;;;101      {
;;;102        /* Set status as ARM_MATH_SIZE_MISMATCH */
;;;103        status = ARM_MATH_SIZE_MISMATCH;
;;;104      }
;;;105      else
;;;106    #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
;;;107      {
;;;108        /* Total number of samples in the input matrix */
;;;109        numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
00000a  881f              LDRH     r7,[r3,#0]
00000c  f8b3c002          LDRH     r12,[r3,#2]
000010  fb07f60c          MUL      r6,r7,r12
;;;110    
;;;111    #ifndef ARM_MATH_CM0_FAMILY
;;;112    
;;;113        /* Run the below code for Cortex-M4 and Cortex-M3 */
;;;114    
;;;115        /* Loop Unrolling */
;;;116        blkCnt = numSamples >> 2;
000014  08b4              LSRS     r4,r6,#2
;;;117    
;;;118        /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
;;;119         ** a second loop below computes the remaining 1 to 3 samples. */
;;;120        while(blkCnt > 0u)
000016  e01a              B        |L1.78|
                  |L1.24|
;;;121        {
;;;122          /* C(m,n) = A(m,n) * scale */
;;;123          /* Scaling and results are stored in the destination buffer. */
;;;124          in1 = pIn[0];
000018  edd10a00          VLDR     s1,[r1,#0]
;;;125          in2 = pIn[1];
00001c  ed911a01          VLDR     s2,[r1,#4]
;;;126          in3 = pIn[2];
000020  edd11a02          VLDR     s3,[r1,#8]
;;;127          in4 = pIn[3];
000024  ed912a03          VLDR     s4,[r1,#0xc]
;;;128    
;;;129          out1 = in1 * scale;
000028  ee602a80          VMUL.F32 s5,s1,s0
;;;130          out2 = in2 * scale;
00002c  ee213a00          VMUL.F32 s6,s2,s0
;;;131          out3 = in3 * scale;
000030  ee613a80          VMUL.F32 s7,s3,s0
;;;132          out4 = in4 * scale;
000034  ee224a00          VMUL.F32 s8,s4,s0
;;;133    
;;;134    
;;;135          pOut[0] = out1;
000038  edc22a00          VSTR     s5,[r2,#0]
;;;136          pOut[1] = out2;
00003c  ed823a01          VSTR     s6,[r2,#4]
;;;137          pOut[2] = out3;
000040  edc23a02          VSTR     s7,[r2,#8]
;;;138          pOut[3] = out4;
000044  ed824a03          VSTR     s8,[r2,#0xc]
;;;139    
;;;140          /* update pointers to process next sampels */
;;;141          pIn += 4u;
000048  3110              ADDS     r1,r1,#0x10
;;;142          pOut += 4u;
00004a  3210              ADDS     r2,r2,#0x10
;;;143    
;;;144          /* Decrement the numSamples loop counter */
;;;145          blkCnt--;
00004c  1e64              SUBS     r4,r4,#1
                  |L1.78|
00004e  2c00              CMP      r4,#0                 ;120
000050  d1e2              BNE      |L1.24|
;;;146        }
;;;147    
;;;148        /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
;;;149         ** No loop unrolling is used. */
;;;150        blkCnt = numSamples % 0x4u;
000052  f0060403          AND      r4,r6,#3
;;;151    
;;;152    #else
;;;153    
;;;154        /* Run the below code for Cortex-M0 */
;;;155    
;;;156        /* Initialize blkCnt with number of samples */
;;;157        blkCnt = numSamples;
;;;158    
;;;159    #endif /* #ifndef ARM_MATH_CM0_FAMILY */
;;;160    
;;;161        while(blkCnt > 0u)
000056  e006              B        |L1.102|
                  |L1.88|
;;;162        {
;;;163          /* C(m,n) = A(m,n) * scale */
;;;164          /* The results are stored in the destination buffer. */
;;;165          *pOut++ = (*pIn++) * scale;
000058  ecf14a01          VLDM     r1!,{s9}
00005c  ee644a80          VMUL.F32 s9,s9,s0
000060  ece24a01          VSTM     r2!,{s9}
;;;166    
;;;167          /* Decrement the loop counter */
;;;168          blkCnt--;
000064  1e64              SUBS     r4,r4,#1
                  |L1.102|
000066  2c00              CMP      r4,#0                 ;161
000068  d1f6              BNE      |L1.88|
;;;169        }
;;;170    
;;;171        /* Set status as ARM_MATH_SUCCESS */
;;;172        status = ARM_MATH_SUCCESS;
00006a  2000              MOVS     r0,#0
;;;173      }
;;;174    
;;;175      /* Return to application */
;;;176      return (status);
;;;177    }
00006c  bdf0              POP      {r4-r7,pc}
;;;178    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\stm32LIB\\Device\\arm_mat_scale_f32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_f32_c_21ee612e____REV16|
#line 388 "..\\stm32LIB\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_arm_mat_scale_f32_c_21ee612e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_f32_c_21ee612e____REVSH|
#line 402
|__asm___19_arm_mat_scale_f32_c_21ee612e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_arm_mat_scale_f32_c_21ee612e____RRX|
#line 587
|__asm___19_arm_mat_scale_f32_c_21ee612e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
